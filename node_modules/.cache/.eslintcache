[{"/Users/annabatzeri/Desktop/Nøkkelhulet/src/index.js":"1","/Users/annabatzeri/Desktop/Nøkkelhulet/src/RoutesPath.js":"2","/Users/annabatzeri/Desktop/Nøkkelhulet/src/App.js":"3","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Calculator.js":"4","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Header.js":"5","/Users/annabatzeri/Desktop/Nøkkelhulet/src/HeaderCalculator.js":"6","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Kategori2.js":"7","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Kategori0.js":"8","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Kategori1.js":"9","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Kategori3.js":"10","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Kategori8a.js":"11","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Kategori5.js":"12","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Kategori9.js":"13","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Kategori10.js":"14","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Melk11a.js":"15","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Melk11b.js":"16","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Melk12a.js":"17","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Kategori8b.js":"18","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Kategori7.js":"19","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Kategori6.js":"20","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Kategori4.js":"21","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Melk12b.js":"22","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Melk13b.js":"23","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Melk13a.js":"24","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Melk14a.js":"25","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Melk14b.js":"26","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Kategori18.js":"27","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Kategori17.js":"28","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Melk15a.js":"29","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Melk15b.js":"30","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Kategori16.js":"31","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Kategori19.js":"32","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Kategori21.js":"33","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Kategori20.js":"34","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Kategori22b.js":"35","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Kategori22c.js":"36","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Kategori22d.js":"37","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Kategori23.js":"38","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Kategori24a2.js":"39","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Kategori22a.js":"40","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Kategori24b3.js":"41","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Kategori24b1.js":"42","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Kategori24a1.js":"43","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Kategori24b2.js":"44","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Kategori24b4.js":"45","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Kategori24c1.js":"46","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Kategori24c2.js":"47","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Kategori25b.js":"48","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Kategori27.js":"49","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Kategori25a.js":"50","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Kategori26.js":"51","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Kategori30.js":"52","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Kategori28.js":"53","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Kategori29.js":"54","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Kategori31.js":"55","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Kategori32.js":"56"},{"size":241,"mtime":1650656032000,"results":"57","hashOfConfig":"58"},{"size":449,"mtime":1649944008000,"results":"59","hashOfConfig":"58"},{"size":4912,"mtime":1677687046652,"results":"60","hashOfConfig":"58"},{"size":43183,"mtime":1677709026263,"results":"61","hashOfConfig":"58"},{"size":650,"mtime":1677687090228,"results":"62","hashOfConfig":"58"},{"size":916,"mtime":1677687164465,"results":"63","hashOfConfig":"58"},{"size":34006,"mtime":1683278319883,"results":"64","hashOfConfig":"58"},{"size":28168,"mtime":1683276318431,"results":"65","hashOfConfig":"58"},{"size":49447,"mtime":1689834046108,"results":"66","hashOfConfig":"58"},{"size":34491,"mtime":1683276378494,"results":"67","hashOfConfig":"58"},{"size":37866,"mtime":1683276966908,"results":"68","hashOfConfig":"58"},{"size":34607,"mtime":1683276422867,"results":"69","hashOfConfig":"58"},{"size":37900,"mtime":1683277000858,"results":"70","hashOfConfig":"58"},{"size":35631,"mtime":1683277025746,"results":"71","hashOfConfig":"58"},{"size":34466,"mtime":1683277655134,"results":"72","hashOfConfig":"58"},{"size":37987,"mtime":1683277667644,"results":"73","hashOfConfig":"58"},{"size":34426,"mtime":1683277680562,"results":"74","hashOfConfig":"58"},{"size":37902,"mtime":1683276979959,"results":"75","hashOfConfig":"58"},{"size":37898,"mtime":1683276457670,"results":"76","hashOfConfig":"58"},{"size":39263,"mtime":1683276439733,"results":"77","hashOfConfig":"58"},{"size":34483,"mtime":1683276403503,"results":"78","hashOfConfig":"58"},{"size":37986,"mtime":1683277692502,"results":"79","hashOfConfig":"58"},{"size":37986,"mtime":1683277719928,"results":"80","hashOfConfig":"58"},{"size":36522,"mtime":1683277707508,"results":"81","hashOfConfig":"58"},{"size":34378,"mtime":1683277733796,"results":"82","hashOfConfig":"58"},{"size":37937,"mtime":1683277746912,"results":"83","hashOfConfig":"58"},{"size":37547,"mtime":1683277094535,"results":"84","hashOfConfig":"58"},{"size":36727,"mtime":1683277061313,"results":"85","hashOfConfig":"58"},{"size":36657,"mtime":1683277779221,"results":"86","hashOfConfig":"58"},{"size":37939,"mtime":1683277794682,"results":"87","hashOfConfig":"58"},{"size":35489,"mtime":1683277044558,"results":"88","hashOfConfig":"58"},{"size":36767,"mtime":1683277108275,"results":"89","hashOfConfig":"58"},{"size":34008,"mtime":1683278354983,"results":"90","hashOfConfig":"58"},{"size":35709,"mtime":1683277126653,"results":"91","hashOfConfig":"58"},{"size":36798,"mtime":1683277186598,"results":"92","hashOfConfig":"58"},{"size":36745,"mtime":1683277200477,"results":"93","hashOfConfig":"58"},{"size":36754,"mtime":1683277218675,"results":"94","hashOfConfig":"58"},{"size":34430,"mtime":1683277235774,"results":"95","hashOfConfig":"58"},{"size":36714,"mtime":1683277328097,"results":"96","hashOfConfig":"58"},{"size":36792,"mtime":1683277169712,"results":"97","hashOfConfig":"58"},{"size":37594,"mtime":1683277383899,"results":"98","hashOfConfig":"58"},{"size":37594,"mtime":1683277350228,"results":"99","hashOfConfig":"58"},{"size":36667,"mtime":1683277311902,"results":"100","hashOfConfig":"58"},{"size":37548,"mtime":1683277369163,"results":"101","hashOfConfig":"58"},{"size":36668,"mtime":1683277405164,"results":"102","hashOfConfig":"58"},{"size":37548,"mtime":1683277419777,"results":"103","hashOfConfig":"58"},{"size":37594,"mtime":1683277434993,"results":"104","hashOfConfig":"58"},{"size":38780,"mtime":1683277460759,"results":"105","hashOfConfig":"58"},{"size":37739,"mtime":1683277491968,"results":"106","hashOfConfig":"58"},{"size":38823,"mtime":1683277448470,"results":"107","hashOfConfig":"58"},{"size":37740,"mtime":1683277476206,"results":"108","hashOfConfig":"58"},{"size":37739,"mtime":1683277537118,"results":"109","hashOfConfig":"58"},{"size":37595,"mtime":1683277506340,"results":"110","hashOfConfig":"58"},{"size":37740,"mtime":1683277520706,"results":"111","hashOfConfig":"58"},{"size":36978,"mtime":1683277553130,"results":"112","hashOfConfig":"58"},{"size":37941,"mtime":1683277566560,"results":"113","hashOfConfig":"58"},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},"rlzl85",{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"127","messages":"128","suppressedMessages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"130","messages":"131","suppressedMessages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"133","messages":"134","suppressedMessages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"117"},{"filePath":"137","messages":"138","suppressedMessages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"117"},{"filePath":"141","messages":"142","suppressedMessages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","suppressedMessages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"117"},{"filePath":"148","messages":"149","suppressedMessages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"117"},{"filePath":"152","messages":"153","suppressedMessages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"117"},{"filePath":"156","messages":"157","suppressedMessages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"117"},{"filePath":"160","messages":"161","suppressedMessages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"117"},{"filePath":"164","messages":"165","suppressedMessages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"117"},{"filePath":"168","messages":"169","suppressedMessages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"117"},{"filePath":"172","messages":"173","suppressedMessages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"117"},{"filePath":"176","messages":"177","suppressedMessages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"117"},{"filePath":"180","messages":"181","suppressedMessages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"117"},{"filePath":"184","messages":"185","suppressedMessages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"117"},{"filePath":"188","messages":"189","suppressedMessages":"190","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"117"},{"filePath":"192","messages":"193","suppressedMessages":"194","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"117"},{"filePath":"196","messages":"197","suppressedMessages":"198","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"117"},{"filePath":"200","messages":"201","suppressedMessages":"202","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"117"},{"filePath":"204","messages":"205","suppressedMessages":"206","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"117"},{"filePath":"208","messages":"209","suppressedMessages":"210","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"117"},{"filePath":"212","messages":"213","suppressedMessages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"117"},{"filePath":"216","messages":"217","suppressedMessages":"218","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"117"},{"filePath":"220","messages":"221","suppressedMessages":"222","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"117"},{"filePath":"224","messages":"225","suppressedMessages":"226","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227","usedDeprecatedRules":"117"},{"filePath":"228","messages":"229","suppressedMessages":"230","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"117"},{"filePath":"232","messages":"233","suppressedMessages":"234","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"117"},{"filePath":"236","messages":"237","suppressedMessages":"238","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239","usedDeprecatedRules":"117"},{"filePath":"240","messages":"241","suppressedMessages":"242","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243","usedDeprecatedRules":"117"},{"filePath":"244","messages":"245","suppressedMessages":"246","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"117"},{"filePath":"248","messages":"249","suppressedMessages":"250","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251","usedDeprecatedRules":"117"},{"filePath":"252","messages":"253","suppressedMessages":"254","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"255","usedDeprecatedRules":"117"},{"filePath":"256","messages":"257","suppressedMessages":"258","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"117"},{"filePath":"260","messages":"261","suppressedMessages":"262","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"263","usedDeprecatedRules":"117"},{"filePath":"264","messages":"265","suppressedMessages":"266","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"267","usedDeprecatedRules":"117"},{"filePath":"268","messages":"269","suppressedMessages":"270","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"271","usedDeprecatedRules":"117"},{"filePath":"272","messages":"273","suppressedMessages":"274","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"275","usedDeprecatedRules":"117"},{"filePath":"276","messages":"277","suppressedMessages":"278","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"279","usedDeprecatedRules":"117"},{"filePath":"280","messages":"281","suppressedMessages":"282","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"283","usedDeprecatedRules":"117"},{"filePath":"284","messages":"285","suppressedMessages":"286","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"287","usedDeprecatedRules":"117"},{"filePath":"288","messages":"289","suppressedMessages":"290","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"291","usedDeprecatedRules":"117"},{"filePath":"292","messages":"293","suppressedMessages":"294","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"295","usedDeprecatedRules":"117"},{"filePath":"296","messages":"297","suppressedMessages":"298","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"299","usedDeprecatedRules":"117"},{"filePath":"300","messages":"301","suppressedMessages":"302","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"303","usedDeprecatedRules":"117"},{"filePath":"304","messages":"305","suppressedMessages":"306","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"307","usedDeprecatedRules":"117"},{"filePath":"308","messages":"309","suppressedMessages":"310","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"311","usedDeprecatedRules":"117"},{"filePath":"312","messages":"313","suppressedMessages":"314","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"315","usedDeprecatedRules":"117"},{"filePath":"316","messages":"317","suppressedMessages":"318","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"319","usedDeprecatedRules":"117"},{"filePath":"320","messages":"321","suppressedMessages":"322","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"323","usedDeprecatedRules":"117"},{"filePath":"324","messages":"325","suppressedMessages":"326","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"327","usedDeprecatedRules":"117"},{"filePath":"328","messages":"329","suppressedMessages":"330","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"331","usedDeprecatedRules":"117"},"/Users/annabatzeri/Desktop/Nøkkelhulet/src/index.js",[],[],[],"/Users/annabatzeri/Desktop/Nøkkelhulet/src/RoutesPath.js",[],[],"/Users/annabatzeri/Desktop/Nøkkelhulet/src/App.js",[],[],"/Users/annabatzeri/Desktop/Nøkkelhulet/src/Calculator.js",[],[],"/Users/annabatzeri/Desktop/Nøkkelhulet/src/Header.js",[],[],"/Users/annabatzeri/Desktop/Nøkkelhulet/src/HeaderCalculator.js",[],[],"/Users/annabatzeri/Desktop/Nøkkelhulet/src/Kategori2.js",["332","333","334","335","336","337","338"],[],"import React from \"react\";\nimport { useState, useEffect } from \"react\"; // import the useState and useeffect hook.\nimport { faCircleExclamation } from \"@fortawesome/free-solid-svg-icons\"; // import an icon.\nimport { faBan } from \"@fortawesome/free-solid-svg-icons\";\nimport { faSave, faShare, faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"; // import FontAwesomeIcon component.\nimport Tooltip from \"@mui/material/Tooltip\"; // import Tooltip component.\nimport keyholeLgog from \"./circle-keyhole-logo.png\"; // import an image\nimport { faCircleInfo } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport { faXmarkCircle } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport Select from \"react-select\"; // import Select component\n\n// This component is called Kategori1\nconst Kategori2 = () => {\n  // State variables for showing results and empty result message\n\n  const [showNokkelhulletResults, setShowNokkelhulletResults] = useState(null);\n  const [showErnaeringsResults, setShowErnaeringsResults] = useState(null);\n  const [showHelsepåstander, setShowHelsepåstander] = useState(null);\n  const [showEmptyResult, setShowEmptyResult] = useState(\"\"); // initialize state variable for showing empty result message.\n\n  //state variable to store the user's food type selection (solid or liquid) and the low sugars claim result\n  const [foodType, setFoodType] = useState(\"\");\n  const [lowSugars, setLowSugars] = useState(null);\n\n  //state variable to track whether the product meets the WITH NO ADDED SUGARS claim or not\n  const [withNoAddedSugars, setWithNoAddedSugars] = useState(false);\n\n  // State variable for tracking if the button is clicked\n  const [buttonClicked, setButtonClicked] = useState(false);\n\n  // useEffect hook for checking the condition for the \"WITH NO ADDED SUGARS\" claim when button is clicked\n  useEffect(() => {\n    if (buttonClicked) {\n      if (withNoAddedSugars) {\n        setShowErnaeringsResults(true);\n      } else {\n        setShowErnaeringsResults(false);\n      }\n    }\n  }, [withNoAddedSugars, buttonClicked]);\n\n  //state for controlling the buttons' visibility\n  const [showButtons, setShowButtons] = useState(false);\n\n  // State variables to control the visibility of the information sections\n  const [infoNokkelhullet, setInfoNokkelhullet] = useState(false);\n  const [infoErnaerings, setInfoErnaerings] = useState(false);\n  const [infoHelsepåstander, setInfoHelsepåstander] = useState(false);\n\n  // Function to show an information section based on the container parameter\n  const onClickInfo = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(true);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(true);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(true);\n    }\n  };\n\n  // Function to hide an information section based on the container parameter\n  const onClickClose = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(false);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(false);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(false);\n    }\n  };\n\n  // initialize State variables for handling input fields and validation errors\n  const [energikj, setEnergikj] = useState(false);\n  const [energikcal, setEnergikcal] = useState(false);\n\n  const [fett, setFett] = useState(false);\n\n  const [mettede, setMettede] = useState(false);\n\n  const [karbohydrat, setKarbohydrat] = useState(false);\n\n  const [hvoravSukkerarter, setHvoravSukkerarter] = useState(false);\n\n  const [kostfiber, setKostfiber] = useState(false);\n  const [protein, setProtein] = useState(false);\n  const [salt, setSalt] = useState(false);\n  const [saltNull, setSaltNull] = useState(false);\n\n  // initialize State variable for storing nutrition information entered by user/input values\n  const [nutrition, setNutrition] = useState({\n    energikj: \"\",\n    energikcal: \"\",\n    fett: \"\",\n    mettede: \"\",\n    karbohydrat: \"\",\n    hvoravSukkerarter: \"\",\n    kostfiber: \"\",\n    protein: \"\",\n    salt: \"\",\n  });\n\n  // Handler for updating nutrition state/state variable based on input field changes/input values\n  const changeHandle = (event) => {\n    console.log(\"changeHandle ===\", event.target, event.target.value);\n    setNutrition({\n      ...nutrition,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  // define function to handle form submission\n  const onClick = (e) => {\n    e.preventDefault();\n    setButtonClicked(true);\n    setShowHelsepåstander(true);\n    setShowButtons(true);\n\n    console.log(\"onclick ===\", selectsPart, nutrition);\n\n    // Check if all required fields are filled out and within valid ranges\n    // The if statement checks if all required inputs are non-empty and meet the nutritional requirements\n    if (\n      nutrition.fett !== \"\" &&\n      nutrition.mettede !== \"\" &&\n      nutrition.karbohydrat !== \"\" &&\n      nutrition.hvoravSukkerarter !== \"\" &&\n      nutrition.kostfiber !== \"\" &&\n      nutrition.protein !== \"\" &&\n      nutrition.salt !== \"\"\n    ) {\n      // If all requirements are met, display the nutrition results\n      setShowNokkelhulletResults(true);\n      // Hide any empty result messages or error messages\n      setShowEmptyResult(false);\n\n      // Check if the user selected \"energikj\" and if nutrition input lable of \"energikj\" is not empty\n      if (selectsPart === \"energikj\" && nutrition.energikj !== \"\") {\n        setEnergikj(false);\n      }\n\n      // Check if the user selected \"energikcal\" and if nutrition input lable of \"energikcal\" is not empty\n      if (selectsPart === \"energikcal\" && nutrition.energikcal !== \"\") {\n        setEnergikcal(false);\n      }\n      // Reset all input validation errors\n\n      setFett(false);\n\n      setMettede(false);\n\n      setKarbohydrat(false);\n\n      setHvoravSukkerarter(false);\n\n      setKostfiber(false);\n      setProtein(false);\n      setSalt(false);\n\n      // If any inputs are missing or do not meet the requirements, show appropriate error messages\n    } else {\n      if (selectsPart === \"energikj\") {\n        console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n        if (nutrition.energikj === \"\" || nutrition.energikj < 0) {\n          console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n          setEnergikj(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikj(false);\n        }\n      }\n\n      if (selectsPart === \"energikcal\") {\n        console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n        if (nutrition.energikcal === \"\" || nutrition.energikcal < 0) {\n          console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n          setEnergikcal(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikcal(false);\n        }\n      }\n\n      // repeat for each nutrition value...\n      if (nutrition.fett === \"\" || nutrition.fett < 0) {\n        setFett(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setFett(false);\n      }\n\n      if (nutrition.mettede === \"\" || nutrition.mettede < 0) {\n        setMettede(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setMettede(false);\n      }\n\n      // Check if the 'karbohydrat' input is missing or negative, and display an error message if necessary\n      if (nutrition.karbohydrat === \"\" || nutrition.karbohydrat < 0) {\n        setKarbohydrat(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKarbohydrat(false);\n      }\n\n      if (\n        nutrition.hvoravSukkerarter === \"\" ||\n        nutrition.hvoravSukkerarter < 0\n      ) {\n        setHvoravSukkerarter(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setHvoravSukkerarter(false);\n      }\n\n      if (nutrition.kostfiber === \"\" || nutrition.kostfiber < 0) {\n        setKostfiber(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKostfiber(false);\n      }\n\n      if (nutrition.protein === \"\" || nutrition.protein < 0) {\n        setProtein(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setProtein(false);\n      }\n\n      if (nutrition.salt === \"\" || nutrition.salt < 0) {\n        setSalt(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setSalt(false);\n      }\n    }\n\n    // Check for the \"LOW SUGARS\" claim\n    if (foodType === \"solid\" && parseFloat(nutrition.karbohydrat) <= 5) {\n      setLowSugars(true);\n    } else if (\n      foodType === \"liquid\" &&\n      parseFloat(nutrition.karbohydrat) <= 2.5\n    ) {\n      setLowSugars(true);\n    } else {\n      setLowSugars(false);\n    }\n\n    // Check the condition for the \"WITH NO ADDED SUGARS\" nutrition claim\n    if (nutrition.hvoravSukkerarter === \"0\" && nutrition.karbohydrat > 0) {\n      setWithNoAddedSugars(true);\n    } else {\n      setWithNoAddedSugars(false);\n    }\n  };\n\n  // create an array of energy units to select from\n  const selectUnit = [\n    {\n      value: \"energikj\",\n      label: \"(kj)\",\n    },\n    {\n      value: \"energikcal\",\n      label: \"(kcal)\",\n    },\n  ];\n\n  // Declare a state variable for the select dropdown.\n  const [selectsPart, setSelectPart] = useState(\"\");\n\n  // A function to handle changes to the select dropdown energy unit\n  const handlerPart = (event) => {\n    const inputVal = document.getElementsByName(event.value);\n    console.log(\"handlerPart ===\", event, nutrition, inputVal);\n    setSelectPart(event.value);\n  };\n\n  //create an array of food types to select from\n  const foodTypes = [\n    {\n      value: \"solid\",\n      label: \"Fast form\",\n    },\n    {\n      value: \"liquid\",\n      label: \"Flytende form\",\n    },\n  ];\n\n  return (\n    <div className=\"row\">\n      {/* This div creates a column layout for the left side of the table */}\n      <div className=\"col-md-6\">\n        {/* the selector (dropdown menu) for choosing the food type. */}\n        <div className=\"form-group\">\n          <label htmlFor=\"foodType\">Velg type matvare:</label>\n          <Select\n            className=\"form-control\"\n            id=\"foodType\"\n            options={foodTypes}\n            onChange={(e) => setFoodType(e.value)} // update the onFoodTypeChange function to directly set the food type state\n            placeholder=\"Velg type matvare\"\n          />\n        </div>\n\n        <h5>\n          Næringsinnhold per 100{\" \"}\n          {foodType === \"solid\" ? \"g\" : foodType === \"liquid\" ? \"ml\" : \"g/ml\"}\n        </h5>\n\n        {/* This div adds a light background color to the table */}\n        <div className=\"bg-light\">\n          {/* This table shows the nutritional information */}\n          <table className=\"table table-striped\">\n            {/* The table header */}\n            <thead>\n              <tr>\n                <th scope=\"col\" className=\"table-font\">\n                  Energi eller næringsstoff\n                </th>\n                <th scope=\"col\" className=\"table-font\">\n                  Mengde\n                </th>\n              </tr>\n            </thead>\n\n            {/* The table body */}\n            <tbody>\n              {/* This row shows the energy content */}\n              <tr className={(energikj, energikcal ? \"alert-box\" : null)}>\n                <th scope=\"row\" className=\"table-font\">\n                  {/* If either the energy (kJ) or energy (kcal) value is missing, an exclamation icon is displayed */}\n                  {energikj && energikcal ? (\n                    <Tooltip\n                      title=\"Mangler verdi i energi (kJ/Kcal) parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  {/* This div displays the energy label and unit */}\n                  <div className=\"row\">\n                    <div className=\"col-md-3\">\n                      <label for=\"energiunit\" class=\"form-label\">\n                        Energi\n                      </label>\n                    </div>\n                    {/* This dropdown allows the user to select the unit for energy */}\n                    <div className=\"col-md-6\">\n                      <Select\n                        placeholder={<div>Velg enhet</div>}\n                        className=\"form-select-md mb-3\"\n                        options={selectUnit}\n                        onChange={(e) => handlerPart(e)}\n                      />\n                    </div>\n                  </div>\n                </th>\n                {/* This column allows the user to input the energy value in input field*/}\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name={selectsPart}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* Additional rows for other nutrient selections */}\n              {/* This row shows the fat content */}\n              <tr className={fett ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {fett ? (\n                    <Tooltip\n                      title=\"Mangler verdi i fett parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Fett (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"fett\"\n                    value={nutrition.fett}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the saturated fat content */}\n              <tr className={mettede ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {mettede ? (\n                    <Tooltip\n                      title=\"Mangler verdi i mettede fettsyrer parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Mettede fettsyrer (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"mettede\"\n                    value={nutrition.mettede}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the carbohydrate (total sugars)content */}\n              <tr className={karbohydrat ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {/* If the \"karbohydrat\" value is missing, display an exclamation icon with a tooltip */}\n                  {karbohydrat ? (\n                    <Tooltip\n                      title=\"Mangler verdi i karbohydrat parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Karbohydrat (g)\n                </th>\n                {/* Input field for \"karbohydrat\" value */}\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"karbohydrat\"\n                    value={nutrition.karbohydrat}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows hvorav tilsatte sukkerarter (added sugars)content */}\n              <tr className={hvoravSukkerarter ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {hvoravSukkerarter ? (\n                    <Tooltip\n                      title=\"Mangler verdi i hvorav sukkerarter parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Hvorav tilsatte sukkerarter (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"hvoravSukkerarter\"\n                    value={nutrition.hvoravSukkerarter}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows kostfiber content */}\n              <tr className={kostfiber ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {/* If kostfiber is missing, show a exclamation icon */}\n                  {kostfiber ? (\n                    <Tooltip\n                      title=\"Mangler verdi i kostfiber parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Kostfiber (g)\n                </th>\n                <td>\n                  {/* Input field for kostfiber */}\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"kostfiber\"\n                    value={nutrition.kostfiber}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the protein content */}\n              <tr className={protein ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {/* If the protein value is missing, an exclamation icon is displayed */}\n                  {protein ? (\n                    <Tooltip\n                      title=\"Mangler verdi i protein parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Protein (g)\n                </th>\n                {/* This column allows the user to input the protein value */}\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"protein\"\n                    value={nutrition.protein}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows salt content */}\n              <tr className={salt ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {salt ? (\n                    <Tooltip\n                      title=\"Mangler verdi i salt parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Salt (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"salt\"\n                    value={nutrition.salt}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n\n        {/* Button that submits the form and calls the onClick function when clicked */}\n        <div className=\"col-12 button-div\">\n          <button\n            type=\"submit\"\n            className=\"btn btn-primary btn-lg button-search\"\n            onClick={onClick}\n          >\n            Beregn\n          </button>\n        </div>\n      </div>\n\n      <div className=\"col-md-6\">\n        {/* container for \"Nøkkelhullet\" results  */}\n        {showNokkelhulletResults && (\n          <div className=\"container nøkkelhullet-food-result-container\">\n            {/* An image with class \"keyhole-logo\" and alt text \"keyhole logo\" */}\n            <img\n              src={keyholeLgog}\n              className=\"keyhole-logo img-fluid\"\n              alt=\"keyhole logo\"\n            />\n            {/* A heading with text \"Nøkkelhullet\" */}\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>\n                  Det er ingen vilkår som gjelder for å innfri nøkkelhullet for\n                  denne matvaregruppen.\n                </p>\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  {/* A paragraph with a link to Lovdata's \"Forskrift om frivillig merking a nœringsmidler med Nokkellhullet\" */}\n                  <p>\n                    Les mer om hvilke krav det stilles for merking av\n                    Nokkellhullet på Lovdatas \"Forskrift om frivillig merking a\n                    nœringsmidler med Nokkellhullet\":\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  {/* FontAwesome icon with event listener to hide the \"Nøkkelhullet\" information section */}\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n\n        {/*Negative results nøkkelhullet container\" */}\n        {showNokkelhulletResults === false && (\n          <div className=\"container nøkkelhullet-food-negResult-container\">\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                {showEmptyResult ? (\n                  <p>** Obligatoriske næringsverdier kan ikke være tomme.</p>\n                ) : null}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om frivillig merking av næringsmidler med Nøkkelhullet:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for ernæringspåstander if there are all true results */}\n        {buttonClicked && (\n          <div\n            className={\n              lowSugars && withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-all\"\n                : !lowSugars && !withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-none\"\n                : \"container ernæringspåstander-food-result-container-some\"\n            }\n          >\n            <h5>Ernæringspåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                {/* Low sugars */}\n                {lowSugars ? (\n                  <div>\n                    <p>** Lavt sukkerinnhold:</p>\n                    <p>\n                      Dette produktet inneholder høyst 5 g sukkerarter per 100 g\n                      for næringsmidler i fast form, eller høyst 2,5 g\n                      sukkerarter per 100 ml for næringsmidler i flytende form\n                      og oppfyller kravet for \"Lavt sukkerinnhold\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Lavt sukkerinnhold\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        For faste næringsmidler, sukkerinnholdet må være høyst 5\n                        g per 100 g.\n                      </li>\n                      <li>\n                        For flytende næringsmidler, sukkerinnholdet må være\n                        høyst 2,5 g per 100 ml.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n\n                {/* No added sugars */}\n                {withNoAddedSugars ? (\n                  <div>\n                    <p>** Uten tilsatt sukker:</p>\n                    <p>\n                      Dette produktet er ikke tilsatt monosakkarider,\n                      disakkarider eller andre næringsmidler på grunn av deres\n                      søtende egenskaper og oppfyller kravet for \"Uten tilsatt\n                      sukker\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Uten tilsatt sukker\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        Produktet må ikke være tilsatt monosakkarider,\n                        disakkarider eller andre næringsmidler på grunn av deres\n                        søtende egenskaper.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"ernaerings\")}\n                />\n              </div>\n            </div>\n            {infoErnaerings ? (\n              // Information section for \"Ernæringspåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"ernaerings\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n\n        {/* container for Helsepåstander results  */}\n        {showHelsepåstander && (\n          <div\n            className=\"container helsepåstander-food-result-container\"\n            style={{ background: \"#f2f0b5\" }}\n          >\n            <h5>Helsepåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Under utvikling. </p>\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"helsepåstander\")}\n                />\n              </div>\n            </div>\n            {infoHelsepåstander ? (\n              // Information section for \"Helsepåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"helsepåstander\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n\n        {/* Spacer */}\n        <div style={{ padding: \"15px\" }}></div>\n        {/* conditional rendering for the buttons using showButtons state */}\n        {showButtons && (\n          <div className=\"d-flex justify-content-between\">\n            {/* Save button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-save\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Lagre produkt\n            </button>\n\n            {/* Share button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-share\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Del produkt\n            </button>\n\n            {/* Add a new product button */}\n            <button\n              className=\"btn btn-primary\"\n              onClick={() => window.location.reload()}\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-plus\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Legg til et nytt produkt\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Kategori2;\n","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Kategori0.js",["339","340","341","342","343"],[],"import React from \"react\";\nimport { useState } from \"react\"; // import the useState hook.\nimport { faCircleExclamation } from \"@fortawesome/free-solid-svg-icons\"; // import an icon.\nimport { faBan } from \"@fortawesome/free-solid-svg-icons\";\nimport { faSave, faShare, faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"; // import FontAwesomeIcon component.\nimport Tooltip from \"@mui/material/Tooltip\"; // import Tooltip component.\nimport keyholeLgog from \"./circle-keyhole-logo.png\"; // import an image\nimport { faCircleInfo } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport { faXmarkCircle } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport Select from \"react-select\"; // import Select component\n\n// This component is called Kategori1\nconst Kategori0 = () => {\n  // State variables for showing results and empty result message\n\n  const [showNokkelhulletResults, setShowNokkelhulletResults] = useState(null);\n  const [showErnaeringsResults, setShowErnaeringsResults] = useState(null);\n  const [showHelsepåstander, setShowHelsepåstander] = useState(null);\n  const [showEmptyResult, setShowEmptyResult] = useState(\"\"); // initialize state variable for showing empty result message.\n\n  //state for controlling the buttons' visibility\n  const [showButtons, setShowButtons] = useState(false);\n\n  // State variables to control the visibility of the information sections\n  const [infoNokkelhullet, setInfoNokkelhullet] = useState(false);\n  const [infoErnaerings, setInfoErnaerings] = useState(false);\n  const [infoHelsepåstander, setInfoHelsepåstander] = useState(false);\n\n  // Function to show an information section based on the container parameter\n  const onClickInfo = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(true);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(true);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(true);\n    }\n  };\n\n  // Function to hide an information section based on the container parameter\n  const onClickClose = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(false);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(false);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(false);\n    }\n  };\n\n  // initialize State variables for handling input fields and validation errors\n  const [energikj, setEnergikj] = useState(false);\n  const [energikcal, setEnergikcal] = useState(false);\n  const [fett, setFett] = useState(false);\n  const [mettede, setMettede] = useState(false);\n  const [karbohydrat, setKarbohydrat] = useState(false);\n  const [hvoravSukkerarter, setHvoravSukkerarter] = useState(false);\n  const [kostfiber, setKostfiber] = useState(false);\n  const [protein, setProtein] = useState(false);\n  const [salt, setSalt] = useState(false);\n\n  // State variable for storing nutrition information entered by user/input values\n  const [nutrition, setNutrition] = useState({\n    energikj: \"\",\n    energikcal: \"\",\n    fett: \"\",\n    mettede: \"\",\n    karbohydrat: \"\",\n    hvoravSukkerarter: \"\",\n    kostfiber: \"\",\n    protein: \"\",\n    salt: \"\",\n  });\n\n  // Handler for updating nutrition state/state variable based on input field changes/input values\n  const changeHandle = (event) => {\n    console.log(\"changeHandle ===\", event.target, event.target.value);\n    setNutrition({\n      ...nutrition,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  // define function to handle form submission\n  const onClick = (e) => {\n    e.preventDefault();\n\n    setShowHelsepåstander(true);\n    setShowErnaeringsResults(true);\n    setShowButtons(true);\n\n    console.log(\"onclick ===\", selectsPart, nutrition);\n\n    // Check if all required fields are filled out and within valid ranges\n    // The if statement checks if all required inputs are non-empty and meet the nutritional requirements\n    if (\n      nutrition.energikj !== \"\" &&\n      nutrition.energikcal !== \"\" &&\n      nutrition.fett !== \"\" &&\n      nutrition.mettede !== \"\" &&\n      nutrition.karbohydrat !== \"\" &&\n      nutrition.hvoravSukkerarter !== \"\" &&\n      nutrition.kostfiber !== \"\" &&\n      nutrition.protein !== \"\" &&\n      nutrition.salt !== \"\"\n    ) {\n      // If all requirements are met, display the nutrition results\n      setShowNokkelhulletResults(true);\n      // Hide any empty result messages or error messages\n      setShowEmptyResult(false);\n\n      // Check if the user selected \"energikj\" and if nutrition input lable of \"energikj\" is not empty\n      if (selectsPart === \"energikj\" && nutrition.energikj !== \"\") {\n        setEnergikj(false);\n      }\n\n      // Check if the user selected \"energikcal\" and if nutrition input lable of \"energikcal\" is not empty\n      if (selectsPart === \"energikcal\" && nutrition.energikcal !== \"\") {\n        setEnergikcal(false);\n      }\n      // Reset all input validation errors\n\n      // reset all nutrition input validation errors\n      setEnergikj(false);\n      setEnergikcal(false);\n      setFett(false);\n      setMettede(false);\n      setKarbohydrat(false);\n      setHvoravSukkerarter(false);\n      setKostfiber(false);\n      setProtein(false);\n      setSalt(false);\n      // If any inputs are missing or do not meet the requirements, show appropriate error messages\n    } else {\n      if (selectsPart === \"energikj\") {\n        console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n        if (nutrition.energikj === \"\" || nutrition.energikj < 0) {\n          console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n          setEnergikj(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikj(false);\n        }\n      }\n\n      if (selectsPart === \"energikcal\") {\n        console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n        if (nutrition.energikcal === \"\" || nutrition.energikcal < 0) {\n          console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n          setEnergikcal(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikcal(false);\n        }\n      }\n\n      // repeat for each nutrition value...\n      if (nutrition.fett === \"\" || nutrition.fett < 0) {\n        setFett(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setFett(false);\n      }\n\n      if (nutrition.mettede === \"\" || nutrition.mettede < 0) {\n        setMettede(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setMettede(false);\n      }\n\n      // Check if the 'karbohydrat' input is missing or negative, and display an error message if necessary\n      if (nutrition.karbohydrat === \"\" || nutrition.karbohydrat < 0) {\n        setKarbohydrat(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKarbohydrat(false);\n      }\n\n      if (\n        nutrition.hvoravSukkerarter === \"\" ||\n        nutrition.hvoravSukkerarter < 0\n      ) {\n        setHvoravSukkerarter(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setHvoravSukkerarter(false);\n      }\n\n      if (nutrition.kostfiber === \"\" || nutrition.kostfiber < 0) {\n        setKostfiber(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKostfiber(false);\n      }\n\n      if (nutrition.protein === \"\" || nutrition.protein < 0) {\n        setProtein(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setProtein(false);\n      }\n\n      if (nutrition.salt === \"\" || nutrition.salt < 0) {\n        setSalt(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setSalt(false);\n      }\n    }\n  };\n\n  // create an array of energy units to select from\n  const selectUnit = [\n    {\n      value: \"energikj\",\n      label: \"(kj)\",\n    },\n    {\n      value: \"energikcal\",\n      label: \"(kcal)\",\n    },\n  ];\n\n  // Declare a state variable for the select dropdown.\n  const [selectsPart, setSelectPart] = useState(\"\");\n\n  console.log(\"selectsPart:\", selectsPart);\n\n  // A function to handle changes to the select dropdown energy unit\n  const handlerPart = (event) => {\n    console.log(\"handlerPart ===\", event, nutrition);\n    setSelectPart(event.value);\n  };\n\n  return (\n    <div className=\"row\">\n      <h5>Næringsinnhold per 100 g/ml</h5>\n\n      {/* This div creates a column layout for the left side of the table */}\n      <div className=\"col-md-6\">\n        {/* This div adds a light background color to the table */}\n        <div className=\"bg-light\">\n          {/* This table shows the nutritional information */}\n          <table className=\"table table-striped\">\n            {/* The table header */}\n            <thead>\n              <tr>\n                <th scope=\"col\" className=\"table-font\">\n                  Energi eller næringsstoff\n                </th>\n                <th scope=\"col\" className=\"table-font\">\n                  Mengde\n                </th>\n              </tr>\n            </thead>\n\n            {/* The table body */}\n            <tbody>\n              {/* This row shows the energy content */}\n              <tr className={(energikj, energikcal ? \"alert-box\" : null)}>\n                <th scope=\"row\" className=\"table-font\">\n                  {/* If either the energy (kJ) or energy (kcal) value is missing, an exclamation icon is displayed */}\n                  {energikj && energikcal ? (\n                    <Tooltip\n                      title=\"Mangler verdi i energi (kJ/Kcal) parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  {/* This div displays the energy label and unit */}\n                  <div className=\"row\">\n                    <div className=\"col-md-3\">\n                      <label for=\"energiunit\" class=\"form-label\">\n                        Energi\n                      </label>\n                    </div>\n                    {/* This dropdown allows the user to select the unit for energy */}\n                    <div className=\"col-md-6\">\n                      <Select\n                        placeholder={<div>Velg enhet</div>}\n                        className=\"form-select-md mb-3\"\n                        options={selectUnit}\n                        onChange={(e) => handlerPart(e)}\n                      />\n                    </div>\n                  </div>\n                </th>\n                {/* This column allows the user to input the energy value in the input field */}\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"energikj\"\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* Additional rows for other nutrient selections */}\n\n              {/* This row shows the fat content */}\n              <tr className={fett ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {/* If the fat value is missing, an exclamation icon is displayed */}\n                  {fett ? (\n                    <Tooltip\n                      title=\"Mangler verdi i fett parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Fett (g)\n                </th>\n                {/* This column allows the user to input the fat value */}\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"fett\"\n                    value={nutrition.fett}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the saturated fat content */}\n              <tr className={mettede ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {/* If the saturated fat value is missing, an exclamation icon is displayed */}\n                  {mettede ? (\n                    <Tooltip\n                      title=\"Mangler verdi i mettede fettsyrer parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Mettede fettsyrer (g)\n                </th>\n                {/* This column allows the user to input the saturated fat value */}\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"mettede\"\n                    value={nutrition.mettede}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the carbohydrate content */}\n              <tr className={karbohydrat ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {/* If the carbohydrate value is missing, an exclamation icon is displayed */}\n                  {karbohydrat ? (\n                    <Tooltip\n                      title=\"Mangler verdi i karbohydrat parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Karbohydrat (g)\n                </th>\n                {/* This column allows the user to input the carbohydrate value */}\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"karbohydrat\"\n                    value={nutrition.karbohydrat}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This is a table row for hvorav sukkerarter field */}\n              <tr className={hvoravSukkerarter ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {/* If hvoravSukkerarter is missing, show a exclamation icon */}\n                  {hvoravSukkerarter ? (\n                    <Tooltip\n                      title=\"Mangler verdi i hvorav sukkerarter parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Hvorav tilsatte sukkerarter (g)\n                </th>\n                <td>\n                  {/* Input field for hvoravSukkerarter */}\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"hvoravSukkerarter\"\n                    value={nutrition.hvoravSukkerarter}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This is a table row for kostfiber field */}\n              <tr className={kostfiber ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {/* If kostfiber is missing, show a exclamation icon */}\n                  {kostfiber ? (\n                    <Tooltip\n                      title=\"Mangler verdi i kostfiber parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Kostfiber (g)\n                </th>\n                <td>\n                  {/* Input field for kostfiber */}\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"kostfiber\"\n                    value={nutrition.kostfiber}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the protein content */}\n              <tr className={protein ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {/* If the protein value is missing, an exclamation icon is displayed */}\n                  {protein ? (\n                    <Tooltip\n                      title=\"Mangler verdi i protein parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Protein (g)\n                </th>\n                {/* This column allows the user to input the protein value */}\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"protein\"\n                    value={nutrition.protein}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This is a table row for salt field */}\n              <tr className={salt ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {/* If salt is missing, show a exclamation icon */}\n                  {salt ? (\n                    <Tooltip\n                      title=\"Mangler verdi i salt parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Salt (g)\n                </th>\n                <td>\n                  {/* Input field for salt */}\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"salt\"\n                    value={nutrition.salt}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n\n        <div className=\"col-12 button-div\">\n          {/* Button that submits the form and calls the onClick function when clicked */}\n          <button\n            type=\"submit\"\n            className=\"btn btn-primary btn-lg button-search\"\n            onClick={onClick}\n          >\n            Beregn\n          </button>\n        </div>\n      </div>\n      {/* End of the div with class \"button-div\" */}\n\n      <div className=\"col-md-6\">\n        {/*Negative results nøkkelhullet container\" */}\n        {showNokkelhulletResults === false && (\n          <div className=\"container nøkkelhullet-food-negResult-container\">\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir ikke Nøkkelhullet.</p>\n                {showEmptyResult ? (\n                  <p>** Obligatoriske næringsverdier kan ikke være tomme.</p>\n                ) : null}\n\n                {showEmptyResult ? (\n                  <p>** Velg mat på matkategori velger.</p>\n                ) : null}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om frivillig merking av næringsmidler med Nøkkelhullet:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for Ernaerings results  */}\n        {showErnaeringsResults && (\n          <div className=\"container ernæringspåstander-food-result-container-none\">\n            <h5>Ernæringspåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                {showEmptyResult ? (\n                  <p>** Obligatoriske næringsverdier kan ikke være tomme.</p>\n                ) : null}\n\n                {showEmptyResult ? (\n                  <p>** Velg mat på matkategori velger.</p>\n                ) : null}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"ernaerings\")}\n                />\n              </div>\n            </div>\n            {infoErnaerings ? (\n              // Information section for \"Ernæringspåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"ernaerings\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for Helsepåstander results  */}\n        {showHelsepåstander && (\n          <div\n            className=\"container helsepåstander-food-result-container\"\n            style={{ background: \"#f2f0b5\" }}\n          >\n            <h5>Helsepåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Under utvikling. </p>\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"helsepåstander\")}\n                />\n              </div>\n            </div>\n            {infoHelsepåstander ? (\n              // Information section for \"Helsepåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"helsepåstander\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"15px\" }}></div>\n        {/* conditional rendering for the buttons using showButtons state */}\n        {showButtons && (\n          <div className=\"d-flex justify-content-between\">\n            {/* Save button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-save\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Lagre produkt\n            </button>\n\n            {/* Share button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-share\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Del produkt\n            </button>\n\n            {/* Add a new product button */}\n            <button\n              className=\"btn btn-primary\"\n              onClick={() => window.location.reload()}\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-plus\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Legg til et nytt produkt\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Kategori0;\n","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Kategori1.js",[],[],"/Users/annabatzeri/Desktop/Nøkkelhulet/src/Kategori3.js",["344","345","346","347"],[],"import React from \"react\";\nimport { useState, useEffect } from \"react\"; // import the useState and useeffect hook.\nimport { faCircleExclamation } from \"@fortawesome/free-solid-svg-icons\"; // import an icon.\nimport { faBan } from \"@fortawesome/free-solid-svg-icons\";\nimport { faSave, faShare, faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"; // import FontAwesomeIcon component.\nimport Tooltip from \"@mui/material/Tooltip\"; // import Tooltip component.\nimport keyholeLgog from \"./circle-keyhole-logo.png\"; // import an image\nimport { faCircleInfo } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport { faXmarkCircle } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport Select from \"react-select\"; // import Select component\n\n// This component is called Kategori3\nconst Kategori3 = () => {\n  // State variables for showing results and empty result message\n\n  const [showNokkelhulletResults, setShowNokkelhulletResults] = useState(null);\n  const [showErnaeringsResults, setShowErnaeringsResults] = useState(null);\n  const [showHelsepåstander, setShowHelsepåstander] = useState(null);\n  const [showEmptyResult, setShowEmptyResult] = useState(\"\"); // initialize state variable for showing empty result message.\n\n  //state variable to store the user's food type selection (solid or liquid) and the low sugars claim result\n  const [foodType, setFoodType] = useState(\"\");\n  const [lowSugars, setLowSugars] = useState(null);\n\n  //state variable to track whether the product meets the WITH NO ADDED SUGARS claim or not\n  const [withNoAddedSugars, setWithNoAddedSugars] = useState(false);\n\n  // State variable for tracking if the button is clicked\n  const [buttonClicked, setButtonClicked] = useState(false);\n\n  // useEffect hook for checking the condition for the \"WITH NO ADDED SUGARS\" claim when button is clicked\n  useEffect(() => {\n    if (buttonClicked) {\n      if (withNoAddedSugars) {\n        setShowErnaeringsResults(true);\n      } else {\n        setShowErnaeringsResults(false);\n      }\n    }\n  }, [withNoAddedSugars, buttonClicked]);\n\n  //state for controlling the buttons' visibility\n  const [showButtons, setShowButtons] = useState(false);\n\n  // State variables to control the visibility of the information sections\n  const [infoNokkelhullet, setInfoNokkelhullet] = useState(false);\n  const [infoErnaerings, setInfoErnaerings] = useState(false);\n  const [infoHelsepåstander, setInfoHelsepåstander] = useState(false);\n\n  // Function to show an information section based on the container parameter\n  const onClickInfo = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(true);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(true);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(true);\n    }\n  };\n\n  // Function to hide an information section based on the container parameter\n  const onClickClose = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(false);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(false);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(false);\n    }\n  };\n\n  // State variables for handling input fields and validation errors\n  const [energikj, setEnergikj] = useState(false);\n  const [energikcal, setEnergikcal] = useState(false);\n\n  const [fett, setFett] = useState(false);\n  const [mettede, setMettede] = useState(false);\n  const [mettedeNull, setMettedeNull] = useState(false);\n  const [karbohydrat, setKarbohydrat] = useState(false);\n  const [hvoravSukkerarter, setHvoravSukkerarter] = useState(false);\n  const [kostfiber, setKostfiber] = useState(false);\n  const [protein, setProtein] = useState(false);\n  const [salt, setSalt] = useState(false);\n\n  // State variable for storing nutrition information entered by user\n  const [nutrition, setNutrition] = useState({\n    energikj: \"\",\n    energikcal: \"\",\n    fett: \"\",\n    mettede: \"\",\n    karbohydrat: \"\",\n    hvoravSukkerarter: \"\",\n    kostfiber: \"\",\n    protein: \"\",\n    salt: \"\",\n  });\n\n  // Handler for updating nutrition state/state variable based on input field changes/input values\n  const changeHandle = (event) => {\n    console.log(\"changeHandle ===\", event.target, event.target.value);\n    setNutrition({\n      ...nutrition,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  // define function to handle form submission\n  const onClick = (e) => {\n    e.preventDefault();\n    setButtonClicked(true);\n    setShowHelsepåstander(true);\n    setShowButtons(true);\n\n    console.log(\"onclick ===\", selectsPart, nutrition);\n\n    // Check if all required fields are filled out and within valid ranges\n    // The if statement checks if all required inputs are non-empty and meet the nutritional requirements\n    if (\n      nutrition.fett !== \"\" &&\n      nutrition.mettede !== \"\" &&\n      nutrition.mettede <= 10 &&\n      nutrition.karbohydrat !== \"\" &&\n      nutrition.hvoravSukkerarter !== \"\" &&\n      nutrition.kostfiber !== \"\" &&\n      nutrition.protein !== \"\" &&\n      nutrition.salt !== \"\"\n    ) {\n      // If all requirements are met, display the nutrition results\n      setShowNokkelhulletResults(true);\n      // Hide any empty result messages or error messages\n      setShowEmptyResult(false);\n\n      // Check if the user selected \"energikj\" and if nutrition input lable of \"energikj\" is not empty\n      if (selectsPart === \"energikj\" && nutrition.energikj !== \"\") {\n        setEnergikj(false);\n      }\n\n      // Check if the user selected \"energikcal\" and if nutrition input lable of \"energikcal\" is not empty\n      if (selectsPart === \"energikcal\" && nutrition.energikcal !== \"\") {\n        setEnergikcal(false);\n      }\n      // Reset all input validation errors\n      setFett(false);\n      setMettede(false);\n      setMettedeNull(false);\n      setKarbohydrat(false);\n      setHvoravSukkerarter(false);\n      setKostfiber(false);\n      setProtein(false);\n      setSalt(false);\n\n      // If any inputs are missing or do not meet the requirements, show appropriate error messages\n    } else {\n      if (selectsPart === \"energikj\") {\n        console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n        if (nutrition.energikj === \"\" || nutrition.energikj < 0) {\n          console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n          setEnergikj(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikj(false);\n        }\n      }\n\n      if (selectsPart === \"energikcal\") {\n        console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n        if (nutrition.energikcal === \"\" || nutrition.energikcal < 0) {\n          console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n          setEnergikcal(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikcal(false);\n        }\n      }\n\n      // repeat for each nutrition value...\n\n      if (nutrition.fett === \"\" || nutrition.fett < 0) {\n        setFett(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setFett(false);\n      }\n\n      if (nutrition.mettede === \"\" || nutrition.mettede < 0) {\n        setMettedeNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setMettedeNull(false);\n      }\n      if (nutrition.mettede > 10) {\n        setMettede(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setMettede(false);\n      }\n\n      if (nutrition.karbohydrat === \"\" || nutrition.karbohydrat < 0) {\n        setKarbohydrat(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKarbohydrat(false);\n      }\n\n      if (\n        nutrition.hvoravSukkerarter === \"\" ||\n        nutrition.hvoravSukkerarter < 0\n      ) {\n        setHvoravSukkerarter(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setHvoravSukkerarter(false);\n      }\n\n      if (nutrition.kostfiber === \"\" || nutrition.kostfiber < 0) {\n        setKostfiber(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKostfiber(false);\n      }\n\n      if (nutrition.protein === \"\" || nutrition.protein < 0) {\n        setProtein(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setProtein(false);\n      }\n\n      if (nutrition.salt === \"\" || nutrition.salt < 0) {\n        setSalt(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setSalt(false);\n      }\n    }\n\n    // Check for the \"LOW SUGARS\" claim\n    if (foodType === \"solid\" && parseFloat(nutrition.karbohydrat) <= 5) {\n      setLowSugars(true);\n    } else if (\n      foodType === \"liquid\" &&\n      parseFloat(nutrition.karbohydrat) <= 2.5\n    ) {\n      setLowSugars(true);\n    } else {\n      setLowSugars(false);\n    }\n\n    // Check the condition for the \"WITH NO ADDED SUGARS\" nutrition claim\n    if (nutrition.hvoravSukkerarter === \"0\" && nutrition.karbohydrat > 0) {\n      setWithNoAddedSugars(true);\n    } else {\n      setWithNoAddedSugars(false);\n    }\n  };\n\n  // create an array of energy units to select from\n  const selectUnit = [\n    {\n      value: \"energikj\",\n      label: \"(kj)\",\n    },\n    {\n      value: \"energikcal\",\n      label: \"(kcal)\",\n    },\n  ];\n\n  // Declare a state variable for the select dropdown.\n  const [selectsPart, setSelectPart] = useState(\"\");\n\n  // A function to handle changes to the select dropdown energy unit\n  const handlerPart = (event) => {\n    const inputVal = document.getElementsByName(event.value);\n    console.log(\"handlerPart ===\", event, nutrition, inputVal);\n    setSelectPart(event.value);\n  };\n\n  //create an array of food types to select from\n  const foodTypes = [\n    {\n      value: \"solid\",\n      label: \"Fast form\",\n    },\n    {\n      value: \"liquid\",\n      label: \"Flytende form\",\n    },\n  ];\n\n  return (\n    <div className=\"row\">\n      {/* This div creates a column layout for the left side of the table */}\n      <div className=\"col-md-6\">\n        {/* the selector (dropdown menu) for choosing the food type. */}\n        <div className=\"form-group\">\n          <label htmlFor=\"foodType\">Velg type matvare:</label>\n          <Select\n            className=\"form-control\"\n            id=\"foodType\"\n            options={foodTypes}\n            onChange={(e) => setFoodType(e.value)} // update the onFoodTypeChange function to directly set the food type state\n            placeholder=\"Velg type matvare\"\n          />\n        </div>\n\n        <h5>\n          Næringsinnhold per 100{\" \"}\n          {foodType === \"solid\" ? \"g\" : foodType === \"liquid\" ? \"ml\" : \"g/ml\"}\n        </h5>\n        {/* This div adds a light background color to the table */}\n        <div className=\"bg-light\">\n          {/* This table shows the nutritional information */}\n          <table className=\"table table-striped\">\n            {/* The table header */}\n            <thead>\n              <tr>\n                <th scope=\"col\" className=\"table-font\">\n                  Energi eller næringsstoff\n                </th>\n                <th scope=\"col\" className=\"table-font\">\n                  Mengde\n                </th>\n              </tr>\n            </thead>\n\n            {/* The table body */}\n            <tbody>\n              {/* This row shows the energy content */}\n              <tr className={(energikj, energikcal ? \"alert-box\" : null)}>\n                <th scope=\"row\" className=\"table-font\">\n                  {/* An icon with a tooltip to indicate missing values in energy parameters */}\n                  {energikj && energikcal ? (\n                    <Tooltip\n                      title=\"Mangler verdi i energi (kJ/Kcal) parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  {/* This div displays the energy label and unit */}\n                  <div className=\"row\">\n                    <div className=\"col-md-3\">\n                      <label for=\"energiunit\" class=\"form-label\">\n                        Energi\n                      </label>\n                    </div>\n                    {/* A dropdown menu for selecting the energy unit */}\n                    <div className=\"col-md-6\">\n                      <Select\n                        placeholder={<div>Velg enhet</div>}\n                        className=\"form-select-md mb-3\"\n                        options={selectUnit}\n                        onChange={(e) => handlerPart(e)}\n                      />\n                    </div>\n                  </div>\n                </th>\n                {/* An input field for entering the energy value */}\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name={selectsPart}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* Additional rows for other nutrient selections */}\n              {/* This row shows the fat content */}\n              <tr className={fett ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {fett ? (\n                    <Tooltip\n                      title=\"Mangler verdi i fett parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Fett (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"fett\"\n                    value={nutrition.fett}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the saturated fat content */}\n              <tr\n                className={\n                  mettede\n                    ? \"alert-box\"\n                    : null || mettedeNull\n                    ? \"alert-box\"\n                    : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {mettede ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden mettede fettsyrer. Mengden på mettede fettsyrer må være lavere enn eller lik 10 / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {mettedeNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i mettede fettsyrer parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Mettede fettsyrer (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"mettede\"\n                    value={nutrition.mettede}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the carbohydrate content */}\n              <tr className={karbohydrat ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {karbohydrat ? (\n                    <Tooltip\n                      title=\"Mangler verdi i karbohydrat parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Karbohydrat (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"karbohydrat\"\n                    value={nutrition.karbohydrat}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows hvorav sukkerarter content */}\n              <tr className={hvoravSukkerarter ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {hvoravSukkerarter ? (\n                    <Tooltip\n                      title=\"Mangler verdi i hvorav sukkerarter parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Hvorav tilsatte sukkerarter (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"hvoravSukkerarter\"\n                    value={nutrition.hvoravSukkerarter}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows kostfiber content */}\n              <tr className={kostfiber ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {kostfiber ? (\n                    <Tooltip\n                      title=\"Mangler verdi i kostfiber parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Kostfiber (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"kostfiber\"\n                    value={nutrition.kostfiber}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the protein content */}\n              <tr className={protein ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {protein ? (\n                    <Tooltip\n                      title=\"Mangler verdi i protein parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Protein (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"protein\"\n                    value={nutrition.protein}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows salt content */}\n              <tr className={salt ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {salt ? (\n                    <Tooltip\n                      title=\"Mangler verdi i salt parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Salt (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"salt\"\n                    value={nutrition.salt}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n\n        {/* Button that submits the form and calls the onClick function */}\n        <div className=\"col-12 button-div\">\n          <button\n            type=\"submit\"\n            className=\"btn btn-primary btn-lg button-search\"\n            onClick={onClick}\n          >\n            Beregn\n          </button>\n        </div>\n      </div>\n\n      <div className=\"col-md-6\">\n        {/* positive results nøkkelhullet container\" */}\n        {showNokkelhulletResults ? (\n          <div className=\"container nøkkelhullet-food-result-container\">\n            {/* An image with class \"keyhole-logo\" and alt text \"keyhole logo\" */}\n            <img\n              src={keyholeLgog}\n              className=\"keyhole-logo img-fluid\"\n              alt=\"keyhole logo\"\n            />\n            {/* A heading with text \"Nøkkelhullet\" */}\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir Nøkkelhullet. </p>\n              </div>\n              <div className=\"col-md-2\">\n                {/* FontAwesome icon with event listener to show the \"Nøkkelhullet\" information section */}\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  {/* A paragraph with a link to Lovdata's \"Forskrift om frivillig merking a nœringsmidler med Nokkellhullet\" */}\n                  <p>\n                    Les mer om hvilke krav det stilles for merking av\n                    Nokkellhullet på Lovdatas \"Forskrift om frivillig merking a\n                    nœringsmidler med Nokkellhullet\":\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  {/* FontAwesome icon with event listener to hide the \"Nøkkelhullet\" information section */}\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        ) : null}\n        {/*Negative results nøkkelhullet container\" */}\n        {showNokkelhulletResults === false && (\n          <div className=\"container nøkkelhullet-food-negResult-container\">\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir ikke Nøkkelhullet.</p>\n                {showEmptyResult ? (\n                  <p>** Obligatoriske næringsverdier kan ikke være tomme.</p>\n                ) : null}\n\n                {mettede ? (\n                  <p>** Mettede fettsyrer verdien kan være høyst 10 g/100 g.</p>\n                ) : null}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om frivillig merking av næringsmidler med Nøkkelhullet:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for ernæringspåstander if there are all true results */}\n        {buttonClicked && (\n          <div\n            className={\n              lowSugars && withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-all\"\n                : !lowSugars && !withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-none\"\n                : \"container ernæringspåstander-food-result-container-some\"\n            }\n          >\n            <h5>Ernæringspåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                {/* Low sugars */}\n                {lowSugars ? (\n                  <div>\n                    <p>** Lavt sukkerinnhold:</p>\n                    <p>\n                      Dette produktet inneholder høyst 5 g sukkerarter per 100 g\n                      for næringsmidler i fast form, eller høyst 2,5 g\n                      sukkerarter per 100 ml for næringsmidler i flytende form\n                      og oppfyller kravet for \"Lavt sukkerinnhold\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Lavt sukkerinnhold\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        For faste næringsmidler, sukkerinnholdet må være høyst 5\n                        g per 100 g.\n                      </li>\n                      <li>\n                        For flytende næringsmidler, sukkerinnholdet må være\n                        høyst 2,5 g per 100 ml.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n\n                {/* No added sugars */}\n                {withNoAddedSugars ? (\n                  <div>\n                    <p>** Uten tilsatt sukker:</p>\n                    <p>\n                      Dette produktet er ikke tilsatt monosakkarider,\n                      disakkarider eller andre næringsmidler på grunn av deres\n                      søtende egenskaper og oppfyller kravet for \"Uten tilsatt\n                      sukker\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Uten tilsatt sukker\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        Produktet må ikke være tilsatt monosakkarider,\n                        disakkarider eller andre næringsmidler på grunn av deres\n                        søtende egenskaper.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"ernaerings\")}\n                />\n              </div>\n            </div>\n            {infoErnaerings ? (\n              // Information section for \"Ernæringspåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"ernaerings\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for Helsepåstander results  */}\n        {showHelsepåstander && (\n          <div\n            className=\"container helsepåstander-food-result-container\"\n            style={{ background: \"#f2f0b5\" }}\n          >\n            <h5>Helsepåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Under utvikling. </p>\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"helsepåstander\")}\n                />\n              </div>\n            </div>\n            {infoHelsepåstander ? (\n              // Information section for \"Helsepåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"helsepåstander\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"15px\" }}></div>\n        {/* conditional rendering for the buttons using showButtons state */}\n        {showButtons && (\n          <div className=\"d-flex justify-content-between\">\n            {/* Save button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-save\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Lagre produkt\n            </button>\n\n            {/* Share button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-share\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Del produkt\n            </button>\n\n            {/* Add a new product button */}\n            <button\n              className=\"btn btn-primary\"\n              onClick={() => window.location.reload()}\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-plus\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Legg til et nytt produkt\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Kategori3;\n","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Kategori8a.js",["348","349","350","351"],[],"import React from \"react\";\nimport { useState, useEffect } from \"react\"; // import the useState and useeffect hook.\nimport { faCircleExclamation } from \"@fortawesome/free-solid-svg-icons\"; // import an icon.\nimport { faBan } from \"@fortawesome/free-solid-svg-icons\";\nimport { faSave, faShare, faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"; // import FontAwesomeIcon component.\nimport Tooltip from \"@mui/material/Tooltip\"; // import Tooltip component.\nimport keyholeLgog from \"./circle-keyhole-logo.png\"; // import an image\nimport { faCircleInfo } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport { faXmarkCircle } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport Select from \"react-select\"; // import Select component\n\nconst Kategori8a = () => {\n  // State variables for showing results and empty result message\n  const [showNokkelhulletResults, setShowNokkelhulletResults] = useState(null);\n  const [showErnaeringsResults, setShowErnaeringsResults] = useState(null);\n  const [showHelsepåstander, setShowHelsepåstander] = useState(null);\n  const [showEmptyResult, setShowEmptyResult] = useState(\"\"); // initialize state variable for showing empty result message.\n\n  //state variable to store the user's food type selection (solid or liquid) and the low sugars claim result\n  const [foodType, setFoodType] = useState(\"\");\n  const [lowSugars, setLowSugars] = useState(null);\n\n  //state variable to track whether the product meets the WITH NO ADDED SUGARS claim or not\n  const [withNoAddedSugars, setWithNoAddedSugars] = useState(false);\n\n  // State variable for tracking if the button is clicked\n  const [buttonClicked, setButtonClicked] = useState(false);\n\n  // useEffect hook for checking the condition for the \"WITH NO ADDED SUGARS\" claim when button is clicked\n  useEffect(() => {\n    if (buttonClicked) {\n      if (withNoAddedSugars) {\n        setShowErnaeringsResults(true);\n      } else {\n        setShowErnaeringsResults(false);\n      }\n    }\n  }, [withNoAddedSugars, buttonClicked]);\n\n  //state for controlling the buttons' visibility\n  const [showButtons, setShowButtons] = useState(false);\n\n  // State variables to control the visibility of the information sections\n  const [infoNokkelhullet, setInfoNokkelhullet] = useState(false);\n  const [infoErnaerings, setInfoErnaerings] = useState(false);\n  const [infoHelsepåstander, setInfoHelsepåstander] = useState(false);\n\n  // Function to show an information section based on the container parameter\n  const onClickInfo = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(true);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(true);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(true);\n    }\n  };\n\n  // Function to hide an information section based on the container parameter\n  const onClickClose = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(false);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(false);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(false);\n    }\n  };\n\n  // initialize State variables for handling input fields and validation errors\n  const [energikj, setEnergikj] = useState(false);\n  const [energikcal, setEnergikcal] = useState(false);\n\n  const [fett, setFett] = useState(false);\n  const [fettNull, setFettNull] = useState(false);\n  const [mettede, setMettede] = useState(false);\n  const [karbohydrat, setKarbohydrat] = useState(false);\n  const [karbohydratNull, setKarbohydratNull] = useState(false);\n  const [hvoravSukkerarter, setHvoravSukkerarter] = useState(false);\n  const [kostfiber, setKostfiber] = useState(false);\n  const [kostfiberNull, setKostfiberNull] = useState(false);\n  const [protein, setProtein] = useState(false);\n  const [salt, setSalt] = useState(false);\n  const [saltNull, setSaltNull] = useState(false);\n\n  // State variable for storing nutrition information entered by user\n  const [nutrition, setNutrition] = useState({\n    energikj: \"\",\n    energikcal: \"\",\n    fett: \"\",\n    mettede: \"\",\n    karbohydrat: \"\",\n    hvoravSukkerarter: \"\",\n    kostfiber: \"\",\n    protein: \"\",\n    salt: \"\",\n  });\n\n  // Handler for updating nutrition state/state variable based on input field changes/input values\n  const changeHandle = (event) => {\n    console.log(\"changeHandle ===\", event.target, event.target.value);\n    setNutrition({\n      ...nutrition,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  // define function to handle form submission\n  const onClick = (e) => {\n    e.preventDefault();\n    setButtonClicked(true);\n    setShowHelsepåstander(true);\n    setShowButtons(true);\n\n    console.log(\"onclick ===\", selectsPart, nutrition);\n\n    // Check if all required fields are filled out and within valid ranges\n    // The if statement checks if all required inputs are non-empty and meet the nutritional requirements\n    if (\n      nutrition.fett !== \"\" &&\n      nutrition.fett <= 7 &&\n      nutrition.mettede !== \"\" &&\n      nutrition.karbohydrat !== \"\" &&\n      nutrition.karbohydrat <= 5 &&\n      nutrition.hvoravSukkerarter !== \"\" &&\n      nutrition.kostfiber !== \"\" &&\n      nutrition.kostfiber >= 5 &&\n      nutrition.protein !== \"\" &&\n      nutrition.salt !== \"\" &&\n      nutrition.salt <= 1\n    ) {\n      // If all requirements are met, display the nutrition results\n      setShowNokkelhulletResults(true);\n      // Hide any empty result messages or error messages\n      setShowEmptyResult(false);\n\n      // Check if the user selected \"energikj\" and if nutrition input lable of \"energikj\" is not empty\n      if (selectsPart === \"energikj\" && nutrition.energikj !== \"\") {\n        setEnergikj(false);\n      }\n\n      // Check if the user selected \"energikcal\" and if nutrition input lable of \"energikcal\" is not empty\n      if (selectsPart === \"energikcal\" && nutrition.energikcal !== \"\") {\n        setEnergikcal(false);\n      }\n      // Reset all input validation errors\n      setFett(false);\n      setFettNull(false);\n      setMettede(false);\n      setKarbohydrat(false);\n      setKarbohydratNull(false);\n      setHvoravSukkerarter(false);\n      setKostfiber(false);\n      setKostfiberNull(false);\n      setProtein(false);\n      setSalt(false);\n      setSaltNull(false);\n      // If the user has not selected any nutrients, set errors accordingly\n      // Check each nutrition value to see if it is missing or negative\n      // show input validation errors if any input is missing or negative.\n    } else {\n      if (selectsPart === \"energikj\") {\n        console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n        if (nutrition.energikj === \"\" || nutrition.energikj < 0) {\n          console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n          setEnergikj(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikj(false);\n        }\n      }\n\n      if (selectsPart === \"energikcal\") {\n        console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n        if (nutrition.energikcal === \"\" || nutrition.energikcal < 0) {\n          console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n          setEnergikcal(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikcal(false);\n        }\n      }\n\n      // repeat for each nutrition value...\n      if (nutrition.fett === \"\" || nutrition.fett < 0) {\n        setFettNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setFettNull(false);\n      }\n      if (nutrition.fett > 7) {\n        setFett(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setFett(false);\n      }\n\n      if (nutrition.mettede === \"\" || nutrition.mettede < 0) {\n        setMettede(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setMettede(false);\n      }\n\n      if (nutrition.karbohydrat === \"\" || nutrition.karbohydrat < 0) {\n        setKarbohydratNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKarbohydratNull(false);\n      }\n      if (nutrition.karbohydrat > 5) {\n        setKarbohydrat(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setKarbohydrat(false);\n      }\n\n      if (\n        nutrition.hvoravSukkerarter === \"\" ||\n        nutrition.hvoravSukkerarter < 0\n      ) {\n        setHvoravSukkerarter(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setHvoravSukkerarter(false);\n      }\n\n      if (nutrition.kostfiber === \"\" || nutrition.kostfiber < 0) {\n        setKostfiberNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKostfiberNull(false);\n      }\n      if (nutrition.kostfiber < 5) {\n        setKostfiber(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setKostfiber(false);\n      }\n\n      if (nutrition.protein === \"\" || nutrition.protein < 0) {\n        setProtein(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setProtein(false);\n      }\n\n      if (nutrition.salt === \"\" || nutrition.salt < 0) {\n        setSaltNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setSaltNull(false);\n      }\n      if (nutrition.salt > 1) {\n        setSalt(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setSalt(false);\n      }\n    }\n\n    // Check for the \"LOW SUGARS\" claim\n    if (foodType === \"solid\" && parseFloat(nutrition.karbohydrat) <= 5) {\n      setLowSugars(true);\n    } else if (\n      foodType === \"liquid\" &&\n      parseFloat(nutrition.karbohydrat) <= 2.5\n    ) {\n      setLowSugars(true);\n    } else {\n      setLowSugars(false);\n    }\n\n    // Check the condition for the \"WITH NO ADDED SUGARS\" nutrition claim\n    if (nutrition.hvoravSukkerarter === \"0\" && nutrition.karbohydrat > 0) {\n      setWithNoAddedSugars(true);\n    } else {\n      setWithNoAddedSugars(false);\n    }\n  };\n\n  // create an array of energy units to select from\n  const selectUnit = [\n    {\n      value: \"energikj\",\n      label: \"(kj)\",\n    },\n    {\n      value: \"energikcal\",\n      label: \"(kcal)\",\n    },\n  ];\n\n  // Declare a state variable for the select dropdown.\n  const [selectsPart, setSelectPart] = useState(\"\");\n\n  // A function to handle changes to the select dropdown energy unit\n  const handlerPart = (event) => {\n    const inputVal = document.getElementsByName(event.value);\n    console.log(\"handlerPart ===\", event, nutrition, inputVal);\n    setSelectPart(event.value);\n  };\n\n  //create an array of food types to select from\n  const foodTypes = [\n    {\n      value: \"solid\",\n      label: \"Fast form\",\n    },\n    {\n      value: \"liquid\",\n      label: \"Flytende form\",\n    },\n  ];\n\n  return (\n    <div className=\"row\">\n      {/* This div creates a column layout for the left side of the table */}\n      <div className=\"col-md-6\">\n        {/* the selector (dropdown menu) for choosing the food type. */}\n        <div className=\"form-group\">\n          <label htmlFor=\"foodType\">Velg type matvare:</label>\n          <Select\n            className=\"form-control\"\n            id=\"foodType\"\n            options={foodTypes}\n            onChange={(e) => setFoodType(e.value)} // update the onFoodTypeChange function to directly set the food type state\n            placeholder=\"Velg type matvare\"\n          />\n        </div>\n        <h5>\n          Næringsinnhold per 100{\" \"}\n          {foodType === \"solid\" ? \"g\" : foodType === \"liquid\" ? \"ml\" : \"g/ml\"}\n        </h5>\n\n        {/* This div adds a light background color to the table */}\n        <div className=\"bg-light\">\n          {/* This table shows the nutritional information */}\n          <table className=\"table table-striped\">\n            {/* The table header */}\n            <thead>\n              <tr>\n                <th scope=\"col\" className=\"table-font\">\n                  Energi eller næringsstoff\n                </th>\n                <th scope=\"col\" className=\"table-font\">\n                  Mengde\n                </th>\n              </tr>\n            </thead>\n\n            {/* The table body */}\n            <tbody>\n              {/* This row shows the energy content */}\n              <tr className={(energikj, energikcal ? \"alert-box\" : null)}>\n                <th scope=\"row\" className=\"table-font\">\n                  {/* An icon with a tooltip to indicate missing values in energy parameters */}\n                  {energikj && energikcal ? (\n                    <Tooltip\n                      title=\"Mangler verdi i energi (kJ/Kcal) parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  {/* This div displays the energy label and unit */}\n                  <div className=\"row\">\n                    <div className=\"col-md-3\">\n                      <label for=\"energiunit\" class=\"form-label\">\n                        Energi\n                      </label>\n                    </div>\n                    {/* A dropdown menu for selecting the energy unit */}\n                    <div className=\"col-md-6\">\n                      <Select\n                        placeholder={<div>Velg enhet</div>}\n                        className=\"form-select-md mb-3\"\n                        options={selectUnit}\n                        onChange={(e) => handlerPart(e)}\n                      />\n                    </div>\n                  </div>\n                </th>\n                {/* An input field for entering the energy value */}\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name={selectsPart}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* Additional rows for other nutrient selections */}\n              {/* This row shows the fat content */}\n              <tr\n                className={\n                  fett ? \"alert-box\" : null || fettNull ? \"alert-box\" : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {fett ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden fett. Mengden på fett må være lavere enn eller lik 7 g/ 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {fettNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i fett parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Fett (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"fett\"\n                    value={nutrition.fett}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the saturated fat content */}\n              <tr className={mettede ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {mettede ? (\n                    <Tooltip\n                      title=\"Mangler verdi i mettede fettsyrer parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Mettede fettsyrer (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"mettede\"\n                    value={nutrition.mettede}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the carbohydrate content */}\n              <tr\n                className={\n                  karbohydrat\n                    ? \"alert-box\"\n                    : null || karbohydratNull\n                    ? \"alert-box\"\n                    : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {karbohydrat ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden sukkerarter. Mengden på sukkerarter må være lavere enn eller lik 5 g / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {karbohydratNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i karbohydrat parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Karbohydrat (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"karbohydrat\"\n                    value={nutrition.karbohydrat}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows hvorav sukkerarter content */}\n              <tr className={hvoravSukkerarter ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {hvoravSukkerarter ? (\n                    <Tooltip\n                      title=\"Mangler verdi i hvorav sukkerarter parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Hvorav tilsatte sukkerarter (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"hvoravSukkerarter\"\n                    value={nutrition.hvoravSukkerarter}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows kostfiber content */}\n              <tr\n                className={\n                  kostfiber\n                    ? \"alert-box\"\n                    : null || kostfiberNull\n                    ? \"alert-box\"\n                    : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {kostfiber ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden kostfiber. Mengden på kostfiber må være høyst enn eller lik 5 g / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {kostfiberNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i kostfiber parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Kostfiber (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"kostfiber\"\n                    value={nutrition.kostfiber}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the protein content */}\n              <tr className={protein ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {protein ? (\n                    <Tooltip\n                      title=\"Mangler verdi i protein parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Protein (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"protein\"\n                    value={nutrition.protein}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows salt content */}\n              <tr\n                className={\n                  salt ? \"alert-box\" : null || saltNull ? \"alert-box\" : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {salt ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden salt. Mengden på salt må være lavere enn eller lik 1 g/ 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {saltNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i salt parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Salt (g)\n                </th>\n                <td colSpan=\"2\">\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"salt\"\n                    value={nutrition.salt}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n        {/* Button that submits the form and calls the onClick function */}\n        <div className=\"col-12 button-div\">\n          <button\n            type=\"submit\"\n            className=\"btn btn-primary btn-lg button-search\"\n            onClick={onClick}\n          >\n            Beregn\n          </button>\n        </div>\n      </div>\n\n      <div className=\"col-md-6\">\n        {/* positive results nøkkelhullet container\" */}\n        {showNokkelhulletResults ? (\n          <div className=\"container nøkkelhullet-food-result-container\">\n            {/* An image with class \"keyhole-logo\" and alt text \"keyhole logo\" */}\n            <img\n              src={keyholeLgog}\n              className=\"keyhole-logo img-fluid\"\n              alt=\"keyhole logo\"\n            />\n            {/* A heading with text \"Nøkkelhullet\" */}\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir Nøkkelhullet. </p>\n              </div>\n              <div className=\"col-md-2\">\n                {/* FontAwesome icon with event listener to show the \"Nøkkelhullet\" information section */}\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  {/* A paragraph with a link to Lovdata's \"Forskrift om frivillig merking a nœringsmidler med Nokkellhullet\" */}\n                  <p>\n                    Les mer om hvilke krav det stilles for merking av\n                    Nokkellhullet på Lovdatas \"Forskrift om frivillig merking a\n                    nœringsmidler med Nokkellhullet\":\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  {/* FontAwesome icon with event listener to hide the \"Nøkkelhullet\" information section */}\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        ) : null}\n        {/*Negative results nøkkelhullet container\" */}\n        {showNokkelhulletResults === false && (\n          <div className=\"container nøkkelhullet-food-negResult-container\">\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir ikke Nøkkelhullet.</p>\n                {showEmptyResult ? (\n                  <p>** Obligatoriske næringsverdier kan ikke være tomme.</p>\n                ) : null}\n\n                {fett ? <p>** Fett verdien kan være høyst 7 g/100 g.</p> : null}\n\n                {karbohydrat ? (\n                  <p>\n                    ** Tilsatte sukkerarter verdien kan være høyst 5 g/100 g.\n                  </p>\n                ) : null}\n                {kostfiber ? (\n                  <p>** Kostfiber verdien kan være minst 5 g/100 g.</p>\n                ) : null}\n\n                {salt ? <p>** Salt verdien kan være høyst 1 g/100 g.</p> : null}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om frivillig merking av næringsmidler med Nøkkelhullet:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for ernæringspåstander if there are all true results */}\n        {buttonClicked && (\n          <div\n            className={\n              lowSugars && withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-all\"\n                : !lowSugars && !withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-none\"\n                : \"container ernæringspåstander-food-result-container-some\"\n            }\n          >\n            <h5>Ernæringspåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                {/* Low sugars */}\n                {lowSugars ? (\n                  <div>\n                    <p>** Lavt sukkerinnhold:</p>\n                    <p>\n                      Dette produktet inneholder høyst 5 g sukkerarter per 100 g\n                      for næringsmidler i fast form, eller høyst 2,5 g\n                      sukkerarter per 100 ml for næringsmidler i flytende form\n                      og oppfyller kravet for \"Lavt sukkerinnhold\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Lavt sukkerinnhold\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        For faste næringsmidler, sukkerinnholdet må være høyst 5\n                        g per 100 g.\n                      </li>\n                      <li>\n                        For flytende næringsmidler, sukkerinnholdet må være\n                        høyst 2,5 g per 100 ml.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n\n                {/* No added sugars */}\n                {withNoAddedSugars ? (\n                  <div>\n                    <p>** Uten tilsatt sukker:</p>\n                    <p>\n                      Dette produktet er ikke tilsatt monosakkarider,\n                      disakkarider eller andre næringsmidler på grunn av deres\n                      søtende egenskaper og oppfyller kravet for \"Uten tilsatt\n                      sukker\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Uten tilsatt sukker\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        Produktet må ikke være tilsatt monosakkarider,\n                        disakkarider eller andre næringsmidler på grunn av deres\n                        søtende egenskaper.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"ernaerings\")}\n                />\n              </div>\n            </div>\n            {infoErnaerings ? (\n              // Information section for \"Ernæringspåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"ernaerings\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for Helsepåstander results  */}\n        {showHelsepåstander && (\n          <div\n            className=\"container helsepåstander-food-result-container\"\n            style={{ background: \"#f2f0b5\" }}\n          >\n            <h5>Helsepåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Under utvikling. </p>\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"helsepåstander\")}\n                />\n              </div>\n            </div>\n            {infoHelsepåstander ? (\n              // Information section for \"Helsepåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"helsepåstander\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"15px\" }}></div>\n        {/* conditional rendering for the buttons using showButtons state */}\n        {showButtons && (\n          <div className=\"d-flex justify-content-between\">\n            {/* Save button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-save\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Lagre produkt\n            </button>\n\n            {/* Share button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-share\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Del produkt\n            </button>\n\n            {/* Add a new product button */}\n            <button\n              className=\"btn btn-primary\"\n              onClick={() => window.location.reload()}\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-plus\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Legg til et nytt produkt\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Kategori8a;\n","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Kategori5.js",["352","353","354","355"],[],"import React from \"react\";\nimport { useState, useEffect } from \"react\"; // import the useState and useeffect hook.\nimport { faCircleExclamation } from \"@fortawesome/free-solid-svg-icons\"; // import an icon.\nimport { faBan } from \"@fortawesome/free-solid-svg-icons\";\nimport { faSave, faShare, faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"; // import FontAwesomeIcon component.\nimport Tooltip from \"@mui/material/Tooltip\"; // import Tooltip component.\nimport keyholeLgog from \"./circle-keyhole-logo.png\"; // import an image\nimport { faCircleInfo } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport { faXmarkCircle } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport Select from \"react-select\"; // import Select component\n\n// This component is called Kategori5\nconst Kategori5 = () => {\n  // State variables for showing results and empty result message\n\n  const [showNokkelhulletResults, setShowNokkelhulletResults] = useState(null);\n  const [showErnaeringsResults, setShowErnaeringsResults] = useState(null);\n  const [showHelsepåstander, setShowHelsepåstander] = useState(null);\n  const [showEmptyResult, setShowEmptyResult] = useState(\"\"); // initialize state variable for showing empty result message.\n\n  //state variable to store the user's food type selection (solid or liquid) and the low sugars claim result\n  const [foodType, setFoodType] = useState(\"\");\n  const [lowSugars, setLowSugars] = useState(null);\n\n  //state variable to track whether the product meets the WITH NO ADDED SUGARS claim or not\n  const [withNoAddedSugars, setWithNoAddedSugars] = useState(false);\n\n  // State variable for tracking if the button is clicked\n  const [buttonClicked, setButtonClicked] = useState(false);\n\n  // useEffect hook for checking the condition for the \"WITH NO ADDED SUGARS\" claim when button is clicked\n  useEffect(() => {\n    if (buttonClicked) {\n      if (withNoAddedSugars) {\n        setShowErnaeringsResults(true);\n      } else {\n        setShowErnaeringsResults(false);\n      }\n    }\n  }, [withNoAddedSugars, buttonClicked]);\n\n  //state for controlling the buttons' visibility\n  const [showButtons, setShowButtons] = useState(false);\n\n  // State variables to control the visibility of the information sections\n  const [infoNokkelhullet, setInfoNokkelhullet] = useState(false);\n  const [infoErnaerings, setInfoErnaerings] = useState(false);\n  const [infoHelsepåstander, setInfoHelsepåstander] = useState(false);\n\n  // Function to show an information section based on the container parameter\n  const onClickInfo = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(true);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(true);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(true);\n    }\n  };\n\n  // Function to hide an information section based on the container parameter\n  const onClickClose = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(false);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(false);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(false);\n    }\n  };\n\n  // State variables for handling input fields and validation errors\n  const [energikj, setEnergikj] = useState(false);\n  const [energikcal, setEnergikcal] = useState(false);\n\n  const [fett, setFett] = useState(false);\n  const [mettede, setMettede] = useState(false);\n  const [karbohydrat, setKarbohydrat] = useState(false);\n  const [hvoravSukkerarter, setHvoravSukkerarter] = useState(false);\n  const [kostfiber, setKostfiber] = useState(false);\n  const [kostfiberNull, setKostfiberNull] = useState(false);\n  const [protein, setProtein] = useState(false);\n  const [salt, setSalt] = useState(false);\n\n  // State variable for storing nutrition information entered by user\n  const [nutrition, setNutrition] = useState({\n    energikj: \"\",\n    energikcal: \"\",\n    fett: \"\",\n    mettede: \"\",\n    karbohydrat: \"\",\n    hvoravSukkerarter: \"\",\n    kostfiber: \"\",\n    protein: \"\",\n    salt: \"\",\n  });\n\n  // Handler for updating nutrition state/state variable based on input field changes/input values\n  const changeHandle = (event) => {\n    console.log(\"changeHandle ===\", event.target, event.target.value);\n    setNutrition({\n      ...nutrition,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  // define function to handle form submission\n  const onClick = (e) => {\n    e.preventDefault();\n    setButtonClicked(true);\n    setShowHelsepåstander(true);\n    setShowButtons(true);\n\n    console.log(\"onclick ===\", selectsPart, nutrition);\n\n    // Check if all required fields are filled out and within valid ranges\n    // The if statement checks if all required inputs are non-empty and meet the nutritional requirements\n    if (\n      nutrition.fett !== \"\" &&\n      nutrition.mettede !== \"\" &&\n      nutrition.karbohydrat !== \"\" &&\n      nutrition.hvoravSukkerarter !== \"\" &&\n      nutrition.kostfiber !== \"\" &&\n      nutrition.kostfiber >= 3 &&\n      nutrition.protein !== \"\" &&\n      nutrition.salt !== \"\"\n    ) {\n      // If all requirements are met, display the nutrition results\n      setShowNokkelhulletResults(true);\n      // Hide any empty result messages or error messages\n      setShowEmptyResult(false);\n\n      // Check if the user selected \"energikj\" and if nutrition input lable of \"energikj\" is not empty\n      if (selectsPart === \"energikj\" && nutrition.energikj !== \"\") {\n        setEnergikj(false);\n      }\n\n      // Check if the user selected \"energikcal\" and if nutrition input lable of \"energikcal\" is not empty\n      if (selectsPart === \"energikcal\" && nutrition.energikcal !== \"\") {\n        setEnergikcal(false);\n      }\n      // Reset all input validation errors\n\n      setFett(false);\n      setMettede(false);\n      setKarbohydrat(false);\n      setHvoravSukkerarter(false);\n      setKostfiber(false);\n      setKostfiberNull(false);\n      setProtein(false);\n      setSalt(false);\n      // If the user has not selected any nutrients, set errors accordingly\n      // Check each nutrition value to see if it is missing or negative\n      // show input validation errors if any input is missing or negative.\n    } else {\n      if (selectsPart === \"energikj\") {\n        console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n        if (nutrition.energikj === \"\" || nutrition.energikj < 0) {\n          console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n          setEnergikj(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikj(false);\n        }\n      }\n\n      if (selectsPart === \"energikcal\") {\n        console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n        if (nutrition.energikcal === \"\" || nutrition.energikcal < 0) {\n          console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n          setEnergikcal(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikcal(false);\n        }\n      }\n\n      // repeat for each nutrition value...\n      if (nutrition.fett === \"\" || nutrition.fett < 0) {\n        setFett(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setFett(false);\n      }\n\n      if (nutrition.mettede === \"\" || nutrition.mettede < 0) {\n        setMettede(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setMettede(false);\n      }\n\n      if (nutrition.karbohydrat === \"\" || nutrition.karbohydrat < 0) {\n        setKarbohydrat(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKarbohydrat(false);\n      }\n\n      if (\n        nutrition.hvoravSukkerarter === \"\" ||\n        nutrition.hvoravSukkerarter < 0\n      ) {\n        setHvoravSukkerarter(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setHvoravSukkerarter(false);\n      }\n\n      if (nutrition.kostfiber === \"\" || nutrition.kostfiber < 0) {\n        setKostfiberNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKostfiberNull(false);\n      }\n      if (nutrition.kostfiber < 3) {\n        setKostfiber(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setKostfiber(false);\n      }\n\n      if (nutrition.protein === \"\" || nutrition.protein < 0) {\n        setProtein(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setProtein(false);\n      }\n\n      if (nutrition.salt === \"\" || nutrition.salt < 0) {\n        setSalt(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setSalt(false);\n      }\n    }\n\n    // Check for the \"LOW SUGARS\" claim\n    if (foodType === \"solid\" && parseFloat(nutrition.karbohydrat) <= 5) {\n      setLowSugars(true);\n    } else if (\n      foodType === \"liquid\" &&\n      parseFloat(nutrition.karbohydrat) <= 2.5\n    ) {\n      setLowSugars(true);\n    } else {\n      setLowSugars(false);\n    }\n\n    // Check the condition for the \"WITH NO ADDED SUGARS\" nutrition claim\n    if (nutrition.hvoravSukkerarter === \"0\" && nutrition.karbohydrat > 0) {\n      setWithNoAddedSugars(true);\n    } else {\n      setWithNoAddedSugars(false);\n    }\n  };\n\n  // create an array of energy units to select from\n  const selectUnit = [\n    {\n      value: \"energikj\",\n      label: \"(kj)\",\n    },\n    {\n      value: \"energikcal\",\n      label: \"(kcal)\",\n    },\n  ];\n\n  // Declare a state variable for the select dropdown.\n  const [selectsPart, setSelectPart] = useState(\"\");\n\n  // A function to handle changes to the select dropdown energy unit\n  const handlerPart = (event) => {\n    const inputVal = document.getElementsByName(event.value);\n    console.log(\"handlerPart ===\", event, nutrition, inputVal);\n    setSelectPart(event.value);\n  };\n\n  //create an array of food types to select from\n  const foodTypes = [\n    {\n      value: \"solid\",\n      label: \"Fast form\",\n    },\n    {\n      value: \"liquid\",\n      label: \"Flytende form\",\n    },\n  ];\n\n  return (\n    <div className=\"row\">\n      {/* This div creates a column layout for the left side of the table */}\n      <div className=\"col-md-6\">\n        {/* the selector (dropdown menu) for choosing the food type. */}\n        <div className=\"form-group\">\n          <label htmlFor=\"foodType\">Velg type matvare:</label>\n          <Select\n            className=\"form-control\"\n            id=\"foodType\"\n            options={foodTypes}\n            onChange={(e) => setFoodType(e.value)} // update the onFoodTypeChange function to directly set the food type state\n            placeholder=\"Velg type matvare\"\n          />\n        </div>\n\n        <h5>\n          Næringsinnhold per 100{\" \"}\n          {foodType === \"solid\" ? \"g\" : foodType === \"liquid\" ? \"ml\" : \"g/ml\"}\n        </h5>\n\n        {/* This div adds a light background color to the table */}\n        <div className=\"bg-light\">\n          {/* This table shows the nutritional information */}\n          <table className=\"table table-striped\">\n            {/* The table header */}\n            <thead>\n              <tr>\n                <th scope=\"col\" className=\"table-font\">\n                  Energi eller næringsstoff\n                </th>\n                <th scope=\"col\" className=\"table-font\">\n                  Mengde\n                </th>\n              </tr>\n            </thead>\n\n            {/* The table body */}\n            <tbody>\n              {/* This row shows the energy content */}\n              <tr className={(energikj, energikcal ? \"alert-box\" : null)}>\n                <th scope=\"row\" className=\"table-font\">\n                  {/* An icon with a tooltip to indicate missing values in energy parameters */}\n                  {energikj && energikcal ? (\n                    <Tooltip\n                      title=\"Mangler verdi i energi (kJ/Kcal) parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  {/* This div displays the energy label and unit */}\n                  <div className=\"row\">\n                    <div className=\"col-md-3\">\n                      <label for=\"energiunit\" class=\"form-label\">\n                        Energi\n                      </label>\n                    </div>\n                    {/* A dropdown menu for selecting the energy unit */}\n                    <div className=\"col-md-6\">\n                      <Select\n                        placeholder={<div>Velg enhet</div>}\n                        className=\"form-select-md mb-3\"\n                        options={selectUnit}\n                        onChange={(e) => handlerPart(e)}\n                      />\n                    </div>\n                  </div>\n                </th>\n                {/* An input field for entering the energy value */}\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name={selectsPart}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* Additional rows for other nutrient selections */}\n              {/* This row shows the fat content */}\n              <tr className={fett ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {fett ? (\n                    <Tooltip\n                      title=\"Mangler verdi i fett parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Fett (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"fett\"\n                    value={nutrition.fett}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the saturated fat content */}\n              <tr className={mettede ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {mettede ? (\n                    <Tooltip\n                      title=\"Mangler verdi i mettede fettsyrer parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Mettede fettsyrer (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"mettede\"\n                    value={nutrition.mettede}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the carbohydrate content */}\n              <tr className={karbohydrat ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {karbohydrat ? (\n                    <Tooltip\n                      title=\"Mangler verdi i karbohydrat parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Karbohydrat (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"karbohydrat\"\n                    value={nutrition.karbohydrat}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows hvorav sukkerarter content */}\n              <tr className={hvoravSukkerarter ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {hvoravSukkerarter ? (\n                    <Tooltip\n                      title=\"Mangler verdi i hvorav sukkerarter parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Hvorav tilsatte sukkerarter (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"hvoravSukkerarter\"\n                    value={nutrition.hvoravSukkerarter}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows kostfiber content */}\n              <tr\n                className={\n                  kostfiber\n                    ? \"alert-box\"\n                    : null || kostfiberNull\n                    ? \"alert-box\"\n                    : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {kostfiber ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden kostfiber. Mengden på kostfiber må være høyst enn eller lik 3 g / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {kostfiberNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i kostfiber parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Kostfiber (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"kostfiber\"\n                    value={nutrition.kostfiber}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the protein content */}\n              <tr className={protein ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {protein ? (\n                    <Tooltip\n                      title=\"Mangler verdi i protein parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Protein (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"protein\"\n                    value={nutrition.protein}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows salt content */}\n              <tr className={salt ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {salt ? (\n                    <Tooltip\n                      title=\"Mangler verdi i salt parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Salt (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"salt\"\n                    value={nutrition.salt}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n\n        {/* Button that submits the form and calls the onClick function */}\n        <div className=\"col-12 button-div\">\n          <button\n            type=\"submit\"\n            className=\"btn btn-primary btn-lg button-search\"\n            onClick={onClick}\n          >\n            Beregn\n          </button>\n        </div>\n      </div>\n\n      <div className=\"col-md-6\">\n        {/* positive results nøkkelhullet container\" */}\n        {showNokkelhulletResults ? (\n          <div className=\"container nøkkelhullet-food-result-container\">\n            {/* An image with class \"keyhole-logo\" and alt text \"keyhole logo\" */}\n            <img\n              src={keyholeLgog}\n              className=\"keyhole-logo img-fluid\"\n              alt=\"keyhole logo\"\n            />\n            {/* A heading with text \"Nøkkelhullet\" */}\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir Nøkkelhullet. </p>\n              </div>\n              <div className=\"col-md-2\">\n                {/* FontAwesome icon with event listener to show the \"Nøkkelhullet\" information section */}\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  {/* A paragraph with a link to Lovdata's \"Forskrift om frivillig merking a nœringsmidler med Nokkellhullet\" */}\n                  <p>\n                    Les mer om hvilke krav det stilles for merking av\n                    Nokkellhullet på Lovdatas \"Forskrift om frivillig merking a\n                    nœringsmidler med Nokkellhullet\":\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  {/* FontAwesome icon with event listener to hide the \"Nøkkelhullet\" information section */}\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        ) : null}\n        {/*Negative results nøkkelhullet container\" */}\n        {showNokkelhulletResults === false && (\n          <div className=\"container nøkkelhullet-food-negResult-container\">\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir ikke Nøkkelhullet.</p>\n                {showEmptyResult ? (\n                  <p>** Obligatoriske næringsverdier kan ikke være tomme.</p>\n                ) : null}\n\n                {kostfiber ? (\n                  <p>** Kostfiber verdien kan være minst 3 g/100 g.</p>\n                ) : null}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om frivillig merking av næringsmidler med Nøkkelhullet:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for ernæringspåstander if there are all true results */}\n        {buttonClicked && (\n          <div\n            className={\n              lowSugars && withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-all\"\n                : !lowSugars && !withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-none\"\n                : \"container ernæringspåstander-food-result-container-some\"\n            }\n          >\n            <h5>Ernæringspåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                {/* Low sugars */}\n                {lowSugars ? (\n                  <div>\n                    <p>** Lavt sukkerinnhold:</p>\n                    <p>\n                      Dette produktet inneholder høyst 5 g sukkerarter per 100 g\n                      for næringsmidler i fast form, eller høyst 2,5 g\n                      sukkerarter per 100 ml for næringsmidler i flytende form\n                      og oppfyller kravet for \"Lavt sukkerinnhold\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Lavt sukkerinnhold\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        For faste næringsmidler, sukkerinnholdet må være høyst 5\n                        g per 100 g.\n                      </li>\n                      <li>\n                        For flytende næringsmidler, sukkerinnholdet må være\n                        høyst 2,5 g per 100 ml.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n\n                {/* No added sugars */}\n                {withNoAddedSugars ? (\n                  <div>\n                    <p>** Uten tilsatt sukker:</p>\n                    <p>\n                      Dette produktet er ikke tilsatt monosakkarider,\n                      disakkarider eller andre næringsmidler på grunn av deres\n                      søtende egenskaper og oppfyller kravet for \"Uten tilsatt\n                      sukker\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Uten tilsatt sukker\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        Produktet må ikke være tilsatt monosakkarider,\n                        disakkarider eller andre næringsmidler på grunn av deres\n                        søtende egenskaper.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"ernaerings\")}\n                />\n              </div>\n            </div>\n            {infoErnaerings ? (\n              // Information section for \"Ernæringspåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"ernaerings\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for Helsepåstander results  */}\n        {showHelsepåstander && (\n          <div\n            className=\"container helsepåstander-food-result-container\"\n            style={{ background: \"#f2f0b5\" }}\n          >\n            <h5>Helsepåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Under utvikling. </p>\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"helsepåstander\")}\n                />\n              </div>\n            </div>\n            {infoHelsepåstander ? (\n              // Information section for \"Helsepåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"helsepåstander\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"15px\" }}></div>\n        {/* conditional rendering for the buttons using showButtons state */}\n        {showButtons && (\n          <div className=\"d-flex justify-content-between\">\n            {/* Save button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-save\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Lagre produkt\n            </button>\n\n            {/* Share button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-share\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Del produkt\n            </button>\n\n            {/* Add a new product button */}\n            <button\n              className=\"btn btn-primary\"\n              onClick={() => window.location.reload()}\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-plus\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Legg til et nytt produkt\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Kategori5;\n","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Kategori9.js",["356","357","358","359"],[],"import React from \"react\";\nimport { useState, useEffect } from \"react\"; // import the useState and useeffect hook.\nimport { faCircleExclamation } from \"@fortawesome/free-solid-svg-icons\"; // import an icon.\nimport { faBan } from \"@fortawesome/free-solid-svg-icons\";\nimport { faSave, faShare, faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"; // import FontAwesomeIcon component.\nimport Tooltip from \"@mui/material/Tooltip\"; // import Tooltip component.\nimport keyholeLgog from \"./circle-keyhole-logo.png\"; // import an image\nimport { faCircleInfo } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport { faXmarkCircle } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport Select from \"react-select\"; // import Select component\n\nconst Kategori9 = () => {\n  // State variables for showing results and empty result message\n  const [showNokkelhulletResults, setShowNokkelhulletResults] = useState(null);\n  const [showErnaeringsResults, setShowErnaeringsResults] = useState(null);\n  const [showHelsepåstander, setShowHelsepåstander] = useState(null);\n  const [showEmptyResult, setShowEmptyResult] = useState(\"\"); // initialize state variable for showing empty result message.\n\n  //state variable to store the user's food type selection (solid or liquid) and the low sugars claim result\n  const [foodType, setFoodType] = useState(\"\");\n  const [lowSugars, setLowSugars] = useState(null);\n\n  //state variable to track whether the product meets the WITH NO ADDED SUGARS claim or not\n  const [withNoAddedSugars, setWithNoAddedSugars] = useState(false);\n\n  // State variable for tracking if the button is clicked\n  const [buttonClicked, setButtonClicked] = useState(false);\n\n  // useEffect hook for checking the condition for the \"WITH NO ADDED SUGARS\" claim when button is clicked\n  useEffect(() => {\n    if (buttonClicked) {\n      if (withNoAddedSugars) {\n        setShowErnaeringsResults(true);\n      } else {\n        setShowErnaeringsResults(false);\n      }\n    }\n  }, [withNoAddedSugars, buttonClicked]);\n\n  //state for controlling the buttons' visibility\n  const [showButtons, setShowButtons] = useState(false);\n\n  // State variables to control the visibility of the information sections\n  const [infoNokkelhullet, setInfoNokkelhullet] = useState(false);\n  const [infoErnaerings, setInfoErnaerings] = useState(false);\n  const [infoHelsepåstander, setInfoHelsepåstander] = useState(false);\n\n  // Function to show an information section based on the container parameter\n  const onClickInfo = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(true);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(true);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(true);\n    }\n  };\n\n  // Function to hide an information section based on the container parameter\n  const onClickClose = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(false);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(false);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(false);\n    }\n  };\n\n  // State variables for handling input fields and validation errors\n  const [energikj, setEnergikj] = useState(false);\n  const [energikcal, setEnergikcal] = useState(false);\n\n  const [fett, setFett] = useState(false);\n  const [fettNull, setFettNull] = useState(false);\n  const [mettede, setMettede] = useState(false);\n  const [karbohydrat, setKarbohydrat] = useState(false);\n  const [karbohydratNull, setKarbohydratNull] = useState(false);\n  const [hvoravSukkerarter, setHvoravSukkerarter] = useState(false);\n  const [kostfiber, setKostfiber] = useState(false);\n  const [kostfiberNull, setKostfiberNull] = useState(false);\n  const [protein, setProtein] = useState(false);\n  const [salt, setSalt] = useState(false);\n  const [saltNull, setSaltNull] = useState(false);\n\n  // State variable for storing nutrition information entered by user\n  const [nutrition, setNutrition] = useState({\n    energikj: \"\",\n    energikcal: \"\",\n    fett: \"\",\n    mettede: \"\",\n    karbohydrat: \"\",\n    hvoravSukkerarter: \"\",\n    kostfiber: \"\",\n    protein: \"\",\n    salt: \"\",\n  });\n\n  // Handler for updating nutrition state/state variable based on input field changes/input values\n  const changeHandle = (event) => {\n    console.log(\"changeHandle ===\", event.target, event.target.value);\n    setNutrition({\n      ...nutrition,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  // define function to handle form submission\n  const onClick = (e) => {\n    e.preventDefault();\n    setButtonClicked(true);\n    setShowHelsepåstander(true);\n    setShowButtons(true);\n\n    console.log(\"onclick ===\", selectsPart, nutrition);\n\n    // Check if all required fields are filled out and within valid ranges\n    // The if statement checks if all required inputs are non-empty and meet the nutritional requirements\n    if (\n      nutrition.mettede !== \"\" &&\n      nutrition.fett !== \"\" &&\n      nutrition.fett <= 7 &&\n      nutrition.protein !== \"\" &&\n      nutrition.karbohydrat !== \"\" &&\n      nutrition.karbohydrat <= 5 &&\n      nutrition.hvoravSukkerarter !== \"\" &&\n      nutrition.kostfiber !== \"\" &&\n      nutrition.kostfiber >= 6 &&\n      nutrition.salt !== \"\" &&\n      nutrition.salt <= 1.3\n    ) {\n      // If all requirements are met, display the nutrition results\n      setShowNokkelhulletResults(true);\n      // Hide any empty result messages or error messages\n      setShowEmptyResult(false);\n\n      // Check if the user selected \"energikj\" and if nutrition input lable of \"energikj\" is not empty\n      if (selectsPart === \"energikj\" && nutrition.energikj !== \"\") {\n        setEnergikj(false);\n      }\n\n      // Check if the user selected \"energikcal\" and if nutrition input lable of \"energikcal\" is not empty\n      if (selectsPart === \"energikcal\" && nutrition.energikcal !== \"\") {\n        setEnergikcal(false);\n      }\n      // Reset all input validation errors\n      setFett(false);\n      setFettNull(false);\n      setMettede(false);\n      setKarbohydrat(false);\n      setKarbohydratNull(false);\n      setHvoravSukkerarter(false);\n      setKostfiber(false);\n      setKostfiberNull(false);\n      setProtein(false);\n      setSalt(false);\n      setSaltNull(false);\n\n      // If the user has not selected any nutrients, set errors accordingly\n      // Check each nutrition value to see if it is missing or negative\n      // show input validation errors if any input is missing or negative.\n    } else {\n      if (selectsPart === \"energikj\") {\n        console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n        if (nutrition.energikj === \"\" || nutrition.energikj < 0) {\n          console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n          setEnergikj(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikj(false);\n        }\n      }\n\n      if (selectsPart === \"energikcal\") {\n        console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n        if (nutrition.energikcal === \"\" || nutrition.energikcal < 0) {\n          console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n          setEnergikcal(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikcal(false);\n        }\n      }\n\n      // repeat for each nutrition value...\n      if (nutrition.fett === \"\" || nutrition.fett < 0) {\n        setFettNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setFettNull(false);\n      }\n      if (nutrition.fett > 7) {\n        setFett(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setFett(false);\n      }\n\n      if (nutrition.mettede === \"\" || nutrition.mettede < 0) {\n        setMettede(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setMettede(false);\n      }\n\n      if (nutrition.karbohydrat === \"\" || nutrition.karbohydrat < 0) {\n        setKarbohydratNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKarbohydratNull(false);\n      }\n      if (nutrition.karbohydrat > 5) {\n        setKarbohydrat(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setKarbohydrat(false);\n      }\n\n      if (\n        nutrition.hvoravSukkerarter === \"\" ||\n        nutrition.hvoravSukkerarter < 0\n      ) {\n        setHvoravSukkerarter(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setHvoravSukkerarter(false);\n      }\n\n      if (nutrition.kostfiber === \"\" || nutrition.kostfiber < 0) {\n        setKostfiberNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKostfiberNull(false);\n      }\n      if (nutrition.kostfiber < 6) {\n        setKostfiber(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setKostfiber(false);\n      }\n\n      if (nutrition.protein === \"\" || nutrition.protein < 0) {\n        setProtein(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setProtein(false);\n      }\n\n      if (nutrition.salt === \"\" || nutrition.salt < 0) {\n        setSaltNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setSaltNull(false);\n      }\n      if (nutrition.salt > 1.3) {\n        setSalt(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setSalt(false);\n      }\n    }\n\n    // Check for the \"LOW SUGARS\" claim\n    if (foodType === \"solid\" && parseFloat(nutrition.karbohydrat) <= 5) {\n      setLowSugars(true);\n    } else if (\n      foodType === \"liquid\" &&\n      parseFloat(nutrition.karbohydrat) <= 2.5\n    ) {\n      setLowSugars(true);\n    } else {\n      setLowSugars(false);\n    }\n\n    // Check the condition for the \"WITH NO ADDED SUGARS\" nutrition claim\n    if (nutrition.hvoravSukkerarter === \"0\" && nutrition.karbohydrat > 0) {\n      setWithNoAddedSugars(true);\n    } else {\n      setWithNoAddedSugars(false);\n    }\n  };\n\n  // create an array of energy units to select from\n  const selectUnit = [\n    {\n      value: \"energikj\",\n      label: \"(kj)\",\n    },\n    {\n      value: \"energikcal\",\n      label: \"(kcal)\",\n    },\n  ];\n\n  // Declare a state variable for the select dropdown.\n  const [selectsPart, setSelectPart] = useState(\"\");\n\n  // A function to handle changes to the select dropdown energy unit\n  const handlerPart = (event) => {\n    const inputVal = document.getElementsByName(event.value);\n    console.log(\"handlerPart ===\", event, nutrition, inputVal);\n    setSelectPart(event.value);\n  };\n\n  //create an array of food types to select from\n  const foodTypes = [\n    {\n      value: \"solid\",\n      label: \"Fast form\",\n    },\n    {\n      value: \"liquid\",\n      label: \"Flytende form\",\n    },\n  ];\n\n  return (\n    <div className=\"row\">\n      {/* This div creates a column layout for the left side of the table */}\n      <div className=\"col-md-6\">\n        {/* the selector (dropdown menu) for choosing the food type. */}\n        <div className=\"form-group\">\n          <label htmlFor=\"foodType\">Velg type matvare:</label>\n          <Select\n            className=\"form-control\"\n            id=\"foodType\"\n            options={foodTypes}\n            onChange={(e) => setFoodType(e.value)} // update the onFoodTypeChange function to directly set the food type state\n            placeholder=\"Velg type matvare\"\n          />\n        </div>\n        <h5>\n          Næringsinnhold per 100{\" \"}\n          {foodType === \"solid\" ? \"g\" : foodType === \"liquid\" ? \"ml\" : \"g/ml\"}\n        </h5>\n\n        {/* This div adds a light background color to the table */}\n        <div className=\"bg-light\">\n          {/* This table shows the nutritional information */}\n          <table className=\"table table-striped\">\n            {/* The table header */}\n            <thead>\n              <tr>\n                <th scope=\"col\" className=\"table-font\">\n                  Energi eller næringsstoff\n                </th>\n                <th scope=\"col\" className=\"table-font\">\n                  Mengde\n                </th>\n              </tr>\n            </thead>\n\n            {/* The table body */}\n            <tbody>\n              {/* This row shows the energy content */}\n              <tr className={(energikj, energikcal ? \"alert-box\" : null)}>\n                <th scope=\"row\" className=\"table-font\">\n                  {/* An icon with a tooltip to indicate missing values in energy parameters */}\n                  {energikj && energikcal ? (\n                    <Tooltip\n                      title=\"Mangler verdi i energi (kJ/Kcal) parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  {/* This div displays the energy label and unit */}\n                  <div className=\"row\">\n                    <div className=\"col-md-3\">\n                      <label for=\"energiunit\" class=\"form-label\">\n                        Energi\n                      </label>\n                    </div>\n                    {/* A dropdown menu for selecting the energy unit */}\n                    <div className=\"col-md-6\">\n                      <Select\n                        placeholder={<div>Velg enhet</div>}\n                        className=\"form-select-md mb-3\"\n                        options={selectUnit}\n                        onChange={(e) => handlerPart(e)}\n                      />\n                    </div>\n                  </div>\n                </th>\n                {/* An input field for entering the energy value */}\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name={selectsPart}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* Additional rows for other nutrient selections */}\n              {/* This row shows the fat content */}\n              <tr\n                className={\n                  fett ? \"alert-box\" : null || fettNull ? \"alert-box\" : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {fett ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden fett. Mengden på fett må være lavere enn eller lik 7 g/ 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {fettNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i fett parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Fett (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"fett\"\n                    value={nutrition.fett}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the saturated fat content */}\n              <tr className={mettede ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {mettede ? (\n                    <Tooltip\n                      title=\"Mangler verdi i mettede fettsyrer parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Mettede fettsyrer (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"mettede\"\n                    value={nutrition.mettede}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the carbohydrate content */}\n              <tr\n                className={\n                  karbohydrat\n                    ? \"alert-box\"\n                    : null || karbohydratNull\n                    ? \"alert-box\"\n                    : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {karbohydrat ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden sukkerarter. Mengden på sukkerarter må være lavere enn eller lik 5 g / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {karbohydratNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i karbohydrat parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Karbohydrat (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"karbohydrat\"\n                    value={nutrition.karbohydrat}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows hvorav sukkerarter content */}\n              <tr className={hvoravSukkerarter ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {hvoravSukkerarter ? (\n                    <Tooltip\n                      title=\"Mangler verdi i hvorav sukkerarter parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Hvorav tilsatte sukkerarter (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"hvoravSukkerarter\"\n                    value={nutrition.hvoravSukkerarter}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows kostfiber content */}\n              <tr\n                className={\n                  kostfiber\n                    ? \"alert-box\"\n                    : null || kostfiberNull\n                    ? \"alert-box\"\n                    : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {kostfiber ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden kostfiber. Mengden på kostfiber må være høyst enn eller lik 6 g / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {kostfiberNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i kostfiber parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Kostfiber (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"kostfiber\"\n                    value={nutrition.kostfiber}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the protein content */}\n              <tr className={protein ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {protein ? (\n                    <Tooltip\n                      title=\"Mangler verdi i protein parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Protein (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"protein\"\n                    value={nutrition.protein}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows salt content */}\n              <tr\n                className={\n                  salt ? \"alert-box\" : null || saltNull ? \"alert-box\" : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {salt ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden salt. Mengden på salt må være lavere enn eller lik 1.3 g/ 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {saltNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i salt parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Salt (g)\n                </th>\n                <td colSpan=\"2\">\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"salt\"\n                    value={nutrition.salt}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n        {/* Button that submits the form and calls the onClick function */}\n        <div className=\"col-12 button-div\">\n          <button\n            type=\"submit\"\n            className=\"btn btn-primary btn-lg button-search\"\n            onClick={onClick}\n          >\n            Beregn\n          </button>\n        </div>\n      </div>\n\n      <div className=\"col-md-6\">\n        {/* positive results nøkkelhullet container\" */}\n        {showNokkelhulletResults ? (\n          <div className=\"container nøkkelhullet-food-result-container\">\n            {/* An image with class \"keyhole-logo\" and alt text \"keyhole logo\" */}\n            <img\n              src={keyholeLgog}\n              className=\"keyhole-logo img-fluid\"\n              alt=\"keyhole logo\"\n            />\n            {/* A heading with text \"Nøkkelhullet\" */}\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir Nøkkelhullet. </p>\n              </div>\n              <div className=\"col-md-2\">\n                {/* FontAwesome icon with event listener to show the \"Nøkkelhullet\" information section */}\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  {/* A paragraph with a link to Lovdata's \"Forskrift om frivillig merking a nœringsmidler med Nokkellhullet\" */}\n                  <p>\n                    Les mer om hvilke krav det stilles for merking av\n                    Nokkellhullet på Lovdatas \"Forskrift om frivillig merking a\n                    nœringsmidler med Nokkellhullet\":\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  {/* FontAwesome icon with event listener to hide the \"Nøkkelhullet\" information section */}\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        ) : null}\n        {/*Negative results nøkkelhullet container\" */}\n        {showNokkelhulletResults === false && (\n          <div className=\"container nøkkelhullet-food-negResult-container\">\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir ikke Nøkkelhullet.</p>\n                {showEmptyResult ? (\n                  <p>** Obligatoriske næringsverdier kan ikke være tomme.</p>\n                ) : null}\n\n                {fett ? <p>** Fett verdien kan være høyst 7 g/100 g.</p> : null}\n\n                {karbohydrat ? (\n                  <p>\n                    ** Tilsatte sukkerarter verdien kan være høyst 5 g/100 g.\n                  </p>\n                ) : null}\n                {kostfiber ? (\n                  <p>** Kostfiber verdien kan være minst 6 g/100 g.</p>\n                ) : null}\n\n                {salt ? (\n                  <p>** Salt verdien kan være høyst 1.3 g/100 g.</p>\n                ) : null}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om frivillig merking av næringsmidler med Nøkkelhullet:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for ernæringspåstander if there are all true results */}\n        {buttonClicked && (\n          <div\n            className={\n              lowSugars && withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-all\"\n                : !lowSugars && !withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-none\"\n                : \"container ernæringspåstander-food-result-container-some\"\n            }\n          >\n            <h5>Ernæringspåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                {/* Low sugars */}\n                {lowSugars ? (\n                  <div>\n                    <p>** Lavt sukkerinnhold:</p>\n                    <p>\n                      Dette produktet inneholder høyst 5 g sukkerarter per 100 g\n                      for næringsmidler i fast form, eller høyst 2,5 g\n                      sukkerarter per 100 ml for næringsmidler i flytende form\n                      og oppfyller kravet for \"Lavt sukkerinnhold\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Lavt sukkerinnhold\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        For faste næringsmidler, sukkerinnholdet må være høyst 5\n                        g per 100 g.\n                      </li>\n                      <li>\n                        For flytende næringsmidler, sukkerinnholdet må være\n                        høyst 2,5 g per 100 ml.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n\n                {/* No added sugars */}\n                {withNoAddedSugars ? (\n                  <div>\n                    <p>** Uten tilsatt sukker:</p>\n                    <p>\n                      Dette produktet er ikke tilsatt monosakkarider,\n                      disakkarider eller andre næringsmidler på grunn av deres\n                      søtende egenskaper og oppfyller kravet for \"Uten tilsatt\n                      sukker\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Uten tilsatt sukker\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        Produktet må ikke være tilsatt monosakkarider,\n                        disakkarider eller andre næringsmidler på grunn av deres\n                        søtende egenskaper.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"ernaerings\")}\n                />\n              </div>\n            </div>\n            {infoErnaerings ? (\n              // Information section for \"Ernæringspåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"ernaerings\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for Helsepåstander results  */}\n        {showHelsepåstander && (\n          <div\n            className=\"container helsepåstander-food-result-container\"\n            style={{ background: \"#f2f0b5\" }}\n          >\n            <h5>Helsepåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Under utvikling. </p>\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"helsepåstander\")}\n                />\n              </div>\n            </div>\n            {infoHelsepåstander ? (\n              // Information section for \"Helsepåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"helsepåstander\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"15px\" }}></div>\n        {/* conditional rendering for the buttons using showButtons state */}\n        {showButtons && (\n          <div className=\"d-flex justify-content-between\">\n            {/* Save button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-save\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Lagre produkt\n            </button>\n\n            {/* Share button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-share\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Del produkt\n            </button>\n\n            {/* Add a new product button */}\n            <button\n              className=\"btn btn-primary\"\n              onClick={() => window.location.reload()}\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-plus\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Legg til et nytt produkt\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Kategori9;\n","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Kategori10.js",["360","361","362","363"],[],"import React from \"react\";\nimport { useState, useEffect } from \"react\"; // import the useState and useeffect hook.\nimport { faCircleExclamation } from \"@fortawesome/free-solid-svg-icons\"; // import an icon.\nimport { faBan } from \"@fortawesome/free-solid-svg-icons\";\nimport { faSave, faShare, faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"; // import FontAwesomeIcon component.\nimport Tooltip from \"@mui/material/Tooltip\"; // import Tooltip component.\nimport keyholeLgog from \"./circle-keyhole-logo.png\"; // import an image\nimport { faCircleInfo } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport { faXmarkCircle } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport Select from \"react-select\"; // import Select component\n\nconst Kategori10 = () => {\n  // State variables for showing results and empty result message\n  const [showNokkelhulletResults, setShowNokkelhulletResults] = useState(null);\n  const [showErnaeringsResults, setShowErnaeringsResults] = useState(null);\n  const [showHelsepåstander, setShowHelsepåstander] = useState(null);\n  const [showEmptyResult, setShowEmptyResult] = useState(\"\"); // initialize state variable for showing empty result message.\n\n  //state variable to store the user's food type selection (solid or liquid) and the low sugars claim result\n  const [foodType, setFoodType] = useState(\"\");\n  const [lowSugars, setLowSugars] = useState(null);\n\n  //state variable to track whether the product meets the WITH NO ADDED SUGARS claim or not\n  const [withNoAddedSugars, setWithNoAddedSugars] = useState(false);\n\n  // State variable for tracking if the button is clicked\n  const [buttonClicked, setButtonClicked] = useState(false);\n\n  // useEffect hook for checking the condition for the \"WITH NO ADDED SUGARS\" claim when button is clicked\n  useEffect(() => {\n    if (buttonClicked) {\n      if (withNoAddedSugars) {\n        setShowErnaeringsResults(true);\n      } else {\n        setShowErnaeringsResults(false);\n      }\n    }\n  }, [withNoAddedSugars, buttonClicked]);\n\n  //state for controlling the buttons' visibility\n  const [showButtons, setShowButtons] = useState(false);\n\n  // State variables to control the visibility of the information sections\n  const [infoNokkelhullet, setInfoNokkelhullet] = useState(false);\n  const [infoErnaerings, setInfoErnaerings] = useState(false);\n  const [infoHelsepåstander, setInfoHelsepåstander] = useState(false);\n\n  // Function to show an information section based on the container parameter\n  const onClickInfo = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(true);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(true);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(true);\n    }\n  };\n\n  // Function to hide an information section based on the container parameter\n  const onClickClose = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(false);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(false);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(false);\n    }\n  };\n\n  // State variables for handling input fields and validation errors\n  const [energikj, setEnergikj] = useState(false);\n  const [energikcal, setEnergikcal] = useState(false);\n\n  const [fett, setFett] = useState(false);\n  const [mettede, setMettede] = useState(false);\n  const [karbohydrat, setKarbohydrat] = useState(false);\n  const [hvoravSukkerarter, setHvoravSukkerarter] = useState(false);\n  const [kostfiber, setKostfiber] = useState(false);\n  const [kostfiberNull, setKostfiberNull] = useState(false);\n  const [protein, setProtein] = useState(false);\n  const [salt, setSalt] = useState(false);\n  const [saltNull, setSaltNull] = useState(false);\n\n  // State variable for storing nutrition information entered by user\n  const [nutrition, setNutrition] = useState({\n    energikj: \"\",\n    energikcal: \"\",\n    fett: \"\",\n    mettede: \"\",\n    karbohydrat: \"\",\n    hvoravSukkerarter: \"\",\n    kostfiber: \"\",\n    protein: \"\",\n    salt: \"\",\n  });\n\n  // Handler for updating nutrition state/state variable based on input field changes/input values\n  const changeHandle = (event) => {\n    console.log(\"changeHandle ===\", event.target, event.target.value);\n    setNutrition({\n      ...nutrition,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  // define function to handle form submission\n  const onClick = (e) => {\n    e.preventDefault();\n    setButtonClicked(true);\n    setShowHelsepåstander(true);\n    setShowButtons(true);\n\n    console.log(\"onclick ===\", selectsPart, nutrition);\n\n    // Check if all required fields are filled out and within valid ranges\n    // The if statement checks if all required inputs are non-empty and meet the nutritional requirements\n    if (\n      nutrition.fett !== \"\" &&\n      nutrition.mettede !== \"\" &&\n      nutrition.karbohydrat !== \"\" &&\n      nutrition.hvoravSukkerarter !== \"\" &&\n      nutrition.kostfiber !== \"\" &&\n      nutrition.kostfiber >= 6 &&\n      nutrition.protein !== \"\" &&\n      nutrition.salt !== \"\" &&\n      nutrition.salt <= 0.1\n    ) {\n      // If all requirements are met, display the nutrition results\n      setShowNokkelhulletResults(true);\n      // Hide any empty result messages or error messages\n      setShowEmptyResult(false);\n\n      // Check if the user selected \"energikj\" and if nutrition input lable of \"energikj\" is not empty\n      if (selectsPart === \"energikj\" && nutrition.energikj !== \"\") {\n        setEnergikj(false);\n      }\n\n      // Check if the user selected \"energikcal\" and if nutrition input lable of \"energikcal\" is not empty\n      if (selectsPart === \"energikcal\" && nutrition.energikcal !== \"\") {\n        setEnergikcal(false);\n      }\n      // Reset all input validation errors\n      setFett(false);\n      setMettede(false);\n      setKarbohydrat(false);\n      setHvoravSukkerarter(false);\n      setKostfiber(false);\n      setKostfiberNull(false);\n      setProtein(false);\n      setSalt(false);\n      setSaltNull(false);\n      // If the user has not selected any nutrients, set errors accordingly\n      // Check each nutrition value to see if it is missing or negative\n      // show input validation errors if any input is missing or negative.\n    } else {\n      if (selectsPart === \"energikj\") {\n        console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n        if (nutrition.energikj === \"\" || nutrition.energikj < 0) {\n          console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n          setEnergikj(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikj(false);\n        }\n      }\n\n      if (selectsPart === \"energikcal\") {\n        console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n        if (nutrition.energikcal === \"\" || nutrition.energikcal < 0) {\n          console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n          setEnergikcal(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikcal(false);\n        }\n      }\n\n      // repeat for each nutrition value...\n      if (nutrition.fett === \"\" || nutrition.fett < 0) {\n        setFett(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setFett(false);\n      }\n\n      if (nutrition.mettede === \"\" || nutrition.mettede < 0) {\n        setMettede(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setMettede(false);\n      }\n\n      if (nutrition.karbohydrat === \"\" || nutrition.karbohydrat < 0) {\n        setKarbohydrat(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKarbohydrat(false);\n      }\n\n      if (\n        nutrition.hvoravSukkerarter === \"\" ||\n        nutrition.hvoravSukkerarter < 0\n      ) {\n        setHvoravSukkerarter(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setHvoravSukkerarter(false);\n      }\n\n      if (nutrition.kostfiber === \"\" || nutrition.kostfiber < 0) {\n        setKostfiberNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKostfiberNull(false);\n      }\n      if (nutrition.kostfiber < 6) {\n        setKostfiber(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setKostfiber(false);\n      }\n\n      if (nutrition.protein === \"\" || nutrition.protein < 0) {\n        setProtein(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setProtein(false);\n      }\n\n      if (nutrition.salt === \"\" || nutrition.salt < 0) {\n        setSaltNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setSaltNull(false);\n      }\n      if (nutrition.salt > 0.1) {\n        setSalt(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setSalt(false);\n      }\n    }\n\n    // Check for the \"LOW SUGARS\" claim\n    if (foodType === \"solid\" && parseFloat(nutrition.karbohydrat) <= 5) {\n      setLowSugars(true);\n    } else if (\n      foodType === \"liquid\" &&\n      parseFloat(nutrition.karbohydrat) <= 2.5\n    ) {\n      setLowSugars(true);\n    } else {\n      setLowSugars(false);\n    }\n\n    // Check the condition for the \"WITH NO ADDED SUGARS\" nutrition claim\n    if (nutrition.hvoravSukkerarter === \"0\" && nutrition.karbohydrat > 0) {\n      setWithNoAddedSugars(true);\n    } else {\n      setWithNoAddedSugars(false);\n    }\n  };\n\n  // create an array of energy units to select from\n  const selectUnit = [\n    {\n      value: \"energikj\",\n      label: \"(kj)\",\n    },\n    {\n      value: \"energikcal\",\n      label: \"(kcal)\",\n    },\n  ];\n\n  // Declare a state variable for the select dropdown.\n  const [selectsPart, setSelectPart] = useState(\"\");\n\n  // A function to handle changes to the select dropdown energy unit\n  const handlerPart = (event) => {\n    const inputVal = document.getElementsByName(event.value);\n    console.log(\"handlerPart ===\", event, nutrition, inputVal);\n    setSelectPart(event.value);\n  };\n\n  //create an array of food types to select from\n  const foodTypes = [\n    {\n      value: \"solid\",\n      label: \"Fast form\",\n    },\n    {\n      value: \"liquid\",\n      label: \"Flytende form\",\n    },\n  ];\n\n  return (\n    <div className=\"row\">\n      {/* This div creates a column layout for the left side of the table */}\n      <div className=\"col-md-6\">\n        {/* the selector (dropdown menu) for choosing the food type. */}\n        <div className=\"form-group\">\n          <label htmlFor=\"foodType\">Velg type matvare:</label>\n          <Select\n            className=\"form-control\"\n            id=\"foodType\"\n            options={foodTypes}\n            onChange={(e) => setFoodType(e.value)} // update the onFoodTypeChange function to directly set the food type state\n            placeholder=\"Velg type matvare\"\n          />\n        </div>\n        <h5>\n          Næringsinnhold per 100{\" \"}\n          {foodType === \"solid\" ? \"g\" : foodType === \"liquid\" ? \"ml\" : \"g/ml\"}\n        </h5>\n\n        {/* This div adds a light background color to the table */}\n        <div className=\"bg-light\">\n          {/* This table shows the nutritional information */}\n          <table className=\"table table-striped\">\n            {/* The table header */}\n            <thead>\n              <tr>\n                <th scope=\"col\" className=\"table-font\">\n                  Energi eller næringsstoff\n                </th>\n                <th scope=\"col\" className=\"table-font\">\n                  Mengde\n                </th>\n              </tr>\n            </thead>\n\n            {/* The table body */}\n            <tbody>\n              {/* This row shows the energy content */}\n              <tr className={(energikj, energikcal ? \"alert-box\" : null)}>\n                <th scope=\"row\" className=\"table-font\">\n                  {/* An icon with a tooltip to indicate missing values in energy parameters */}\n                  {energikj && energikcal ? (\n                    <Tooltip\n                      title=\"Mangler verdi i energi (kJ/Kcal) parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  {/* This div displays the energy label and unit */}\n                  <div className=\"row\">\n                    <div className=\"col-md-3\">\n                      <label for=\"energiunit\" class=\"form-label\">\n                        Energi\n                      </label>\n                    </div>\n                    {/* A dropdown menu for selecting the energy unit */}\n                    <div className=\"col-md-6\">\n                      <Select\n                        placeholder={<div>Velg enhet</div>}\n                        className=\"form-select-md mb-3\"\n                        options={selectUnit}\n                        onChange={(e) => handlerPart(e)}\n                      />\n                    </div>\n                  </div>\n                </th>\n                {/* An input field for entering the energy value */}\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name={selectsPart}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* Additional rows for other nutrient selections */}\n              {/* This row shows the fat content */}\n              <tr className={fett ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {fett ? (\n                    <Tooltip\n                      title=\"Mangler verdi i fett parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Fett (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"fett\"\n                    value={nutrition.fett}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the saturated fat content */}\n              <tr className={mettede ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {mettede ? (\n                    <Tooltip\n                      title=\"Mangler verdi i mettede fettsyrer parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Mettede fettsyrer (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"mettede\"\n                    value={nutrition.mettede}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the carbohydrate content */}\n              <tr className={karbohydrat ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {karbohydrat ? (\n                    <Tooltip\n                      title=\"Mangler verdi i karbohydrat parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Karbohydrat (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"karbohydrat\"\n                    value={nutrition.karbohydrat}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows hvorav sukkerarter content */}\n              <tr className={hvoravSukkerarter ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {hvoravSukkerarter ? (\n                    <Tooltip\n                      title=\"Mangler verdi i hvorav sukkerarter parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Hvorav tilsatte sukkerarter (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"hvoravSukkerarter\"\n                    value={nutrition.hvoravSukkerarter}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows kostfiber content */}\n              <tr\n                className={\n                  kostfiber\n                    ? \"alert-box\"\n                    : null || kostfiberNull\n                    ? \"alert-box\"\n                    : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {kostfiber ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden kostfiber. Mengden på kostfiber må være høyst enn eller lik 6 g / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {kostfiberNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i kostfiber parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Kostfiber (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"kostfiber\"\n                    value={nutrition.kostfiber}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the protein content */}\n              <tr className={protein ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {protein ? (\n                    <Tooltip\n                      title=\"Mangler verdi i protein parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Protein (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"protein\"\n                    value={nutrition.protein}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows salt content */}\n              <tr\n                className={\n                  salt ? \"alert-box\" : null || saltNull ? \"alert-box\" : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {salt ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden salt. Mengden på salt må være lavere enn eller lik 0.1 g/ 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {saltNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i salt parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Salt (g)\n                </th>\n                <td colSpan=\"2\">\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"salt\"\n                    value={nutrition.salt}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n        {/* Button that submits the form and calls the onClick function */}\n        <div className=\"col-12 button-div\">\n          <button\n            type=\"submit\"\n            className=\"btn btn-primary btn-lg button-search\"\n            onClick={onClick}\n          >\n            Beregn\n          </button>\n        </div>\n      </div>\n\n      <div className=\"col-md-6\">\n        {/* positive results nøkkelhullet container\" */}\n        {showNokkelhulletResults ? (\n          <div className=\"container nøkkelhullet-food-result-container\">\n            {/* An image with class \"keyhole-logo\" and alt text \"keyhole logo\" */}\n            <img\n              src={keyholeLgog}\n              className=\"keyhole-logo img-fluid\"\n              alt=\"keyhole logo\"\n            />\n            {/* A heading with text \"Nøkkelhullet\" */}\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir Nøkkelhullet. </p>\n              </div>\n              <div className=\"col-md-2\">\n                {/* FontAwesome icon with event listener to show the \"Nøkkelhullet\" information section */}\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  {/* A paragraph with a link to Lovdata's \"Forskrift om frivillig merking a nœringsmidler med Nokkellhullet\" */}\n                  <p>\n                    Les mer om hvilke krav det stilles for merking av\n                    Nokkellhullet på Lovdatas \"Forskrift om frivillig merking a\n                    nœringsmidler med Nokkellhullet\":\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  {/* FontAwesome icon with event listener to hide the \"Nøkkelhullet\" information section */}\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        ) : null}\n        {/*Negative results nøkkelhullet container\" */}\n        {showNokkelhulletResults === false && (\n          <div className=\"container nøkkelhullet-food-negResult-container\">\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir ikke Nøkkelhullet.</p>\n                {showEmptyResult ? (\n                  <p>** Obligatoriske næringsverdier kan ikke være tomme.</p>\n                ) : null}\n\n                {kostfiber ? (\n                  <p>** Kostfiber verdien kan være minst 6 g/100 g.</p>\n                ) : null}\n\n                {salt ? (\n                  <p>** Salt verdien kan være høyst 0.1 g/100 g.</p>\n                ) : null}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om frivillig merking av næringsmidler med Nøkkelhullet:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for ernæringspåstander if there are all true results */}\n        {buttonClicked && (\n          <div\n            className={\n              lowSugars && withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-all\"\n                : !lowSugars && !withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-none\"\n                : \"container ernæringspåstander-food-result-container-some\"\n            }\n          >\n            <h5>Ernæringspåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                {/* Low sugars */}\n                {lowSugars ? (\n                  <div>\n                    <p>** Lavt sukkerinnhold:</p>\n                    <p>\n                      Dette produktet inneholder høyst 5 g sukkerarter per 100 g\n                      for næringsmidler i fast form, eller høyst 2,5 g\n                      sukkerarter per 100 ml for næringsmidler i flytende form\n                      og oppfyller kravet for \"Lavt sukkerinnhold\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Lavt sukkerinnhold\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        For faste næringsmidler, sukkerinnholdet må være høyst 5\n                        g per 100 g.\n                      </li>\n                      <li>\n                        For flytende næringsmidler, sukkerinnholdet må være\n                        høyst 2,5 g per 100 ml.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n\n                {/* No added sugars */}\n                {withNoAddedSugars ? (\n                  <div>\n                    <p>** Uten tilsatt sukker:</p>\n                    <p>\n                      Dette produktet er ikke tilsatt monosakkarider,\n                      disakkarider eller andre næringsmidler på grunn av deres\n                      søtende egenskaper og oppfyller kravet for \"Uten tilsatt\n                      sukker\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Uten tilsatt sukker\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        Produktet må ikke være tilsatt monosakkarider,\n                        disakkarider eller andre næringsmidler på grunn av deres\n                        søtende egenskaper.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"ernaerings\")}\n                />\n              </div>\n            </div>\n            {infoErnaerings ? (\n              // Information section for \"Ernæringspåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"ernaerings\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for Helsepåstander results  */}\n        {showHelsepåstander && (\n          <div\n            className=\"container helsepåstander-food-result-container\"\n            style={{ background: \"#f2f0b5\" }}\n          >\n            <h5>Helsepåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Under utvikling. </p>\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"helsepåstander\")}\n                />\n              </div>\n            </div>\n            {infoHelsepåstander ? (\n              // Information section for \"Helsepåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"helsepåstander\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"15px\" }}></div>\n        {/* conditional rendering for the buttons using showButtons state */}\n        {showButtons && (\n          <div className=\"d-flex justify-content-between\">\n            {/* Save button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-save\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Lagre produkt\n            </button>\n\n            {/* Share button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-share\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Del produkt\n            </button>\n\n            {/* Add a new product button */}\n            <button\n              className=\"btn btn-primary\"\n              onClick={() => window.location.reload()}\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-plus\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Legg til et nytt produkt\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Kategori10;\n","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Melk11a.js",["364","365","366","367"],[],"import React from \"react\";\nimport { useState, useEffect } from \"react\"; // import the useState and useeffect hook.\nimport { faCircleExclamation } from \"@fortawesome/free-solid-svg-icons\"; // import an icon.\nimport { faBan } from \"@fortawesome/free-solid-svg-icons\";\nimport { faSave, faShare, faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"; // import FontAwesomeIcon component.\nimport Tooltip from \"@mui/material/Tooltip\"; // import Tooltip component.\nimport keyholeLgog from \"./circle-keyhole-logo.png\"; // import an image\nimport { faCircleInfo } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport { faXmarkCircle } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport Select from \"react-select\"; // import Select component\n\n// This component is called Kategori11a\nconst Melk11a = () => {\n  // State variables for showing results and empty result message\n  const [showNokkelhulletResults, setShowNokkelhulletResults] = useState(null);\n  const [showErnaeringsResults, setShowErnaeringsResults] = useState(null);\n  const [showHelsepåstander, setShowHelsepåstander] = useState(null);\n  const [showEmptyResult, setShowEmptyResult] = useState(\"\"); // initialize state variable for showing empty result message.\n\n  //state variable to store the user's food type selection (solid or liquid) and the low sugars claim result\n  const [foodType, setFoodType] = useState(\"\");\n  const [lowSugars, setLowSugars] = useState(null);\n\n  //state variable to track whether the product meets the WITH NO ADDED SUGARS claim or not\n  const [withNoAddedSugars, setWithNoAddedSugars] = useState(false);\n\n  // State variable for tracking if the button is clicked\n  const [buttonClicked, setButtonClicked] = useState(false);\n\n  // useEffect hook for checking the condition for the \"WITH NO ADDED SUGARS\" claim when button is clicked\n  useEffect(() => {\n    if (buttonClicked) {\n      if (withNoAddedSugars) {\n        setShowErnaeringsResults(true);\n      } else {\n        setShowErnaeringsResults(false);\n      }\n    }\n  }, [withNoAddedSugars, buttonClicked]);\n\n  //state for controlling the buttons' visibility\n  const [showButtons, setShowButtons] = useState(false);\n\n  // State variables to control the visibility of the information sections\n  const [infoNokkelhullet, setInfoNokkelhullet] = useState(false);\n  const [infoErnaerings, setInfoErnaerings] = useState(false);\n  const [infoHelsepåstander, setInfoHelsepåstander] = useState(false);\n\n  // Function to show an information section based on the container parameter\n  const onClickInfo = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(true);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(true);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(true);\n    }\n  };\n\n  // Function to hide an information section based on the container parameter\n  const onClickClose = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(false);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(false);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(false);\n    }\n  };\n\n  // State variables for handling input fields and validation errors\n  const [energikj, setEnergikj] = useState(false);\n  const [energikcal, setEnergikcal] = useState(false);\n\n  const [fett, setFett] = useState(false);\n  const [fettNull, setFettNull] = useState(false);\n  const [mettede, setMettede] = useState(false);\n  const [karbohydrat, setKarbohydrat] = useState(false);\n  const [hvoravSukkerarter, setHvoravSukkerarter] = useState(false);\n  const [kostfiber, setKostfiber] = useState(false);\n  const [protein, setProtein] = useState(false);\n  const [salt, setSalt] = useState(false);\n\n  // State variable for storing nutrition information entered by user\n  const [nutrition, setNutrition] = useState({\n    energikj: \"\",\n    energikcal: \"\",\n    fett: \"\",\n    mettede: \"\",\n    karbohydrat: \"\",\n    hvoravSukkerarter: \"\",\n    kostfiber: \"\",\n    protein: \"\",\n    salt: \"\",\n  });\n\n  // Handler for updating nutrition state/state variable based on input field changes/input values\n  const changeHandle = (event) => {\n    console.log(\"changeHandle ===\", event.target, event.target.value);\n    setNutrition({\n      ...nutrition,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  // define function to handle form submission\n  const onClick = (e) => {\n    e.preventDefault();\n    setButtonClicked(true);\n    setShowHelsepåstander(true);\n    setShowButtons(true);\n\n    console.log(\"onclick ===\", selectsPart, nutrition);\n\n    // Check if all required fields are filled out and within valid ranges\n    // The if statement checks if all required inputs are non-empty and meet the nutritional requirements\n    if (\n      nutrition.fett !== \"\" &&\n      nutrition.fett <= 0.7 &&\n      nutrition.mettede !== \"\" &&\n      nutrition.karbohydrat !== \"\" &&\n      nutrition.hvoravSukkerarter !== \"\" &&\n      nutrition.kostfiber !== \"\" &&\n      nutrition.protein !== \"\" &&\n      nutrition.salt !== \"\"\n    ) {\n      // If all requirements are met, display the nutrition results\n      setShowNokkelhulletResults(true);\n      // Hide any empty result messages or error messages\n      setShowEmptyResult(false);\n\n      // Check if the user selected \"energikj\" and if nutrition input lable of \"energikj\" is not empty\n      if (selectsPart === \"energikj\" && nutrition.energikj !== \"\") {\n        setEnergikj(false);\n      }\n\n      // Check if the user selected \"energikcal\" and if nutrition input lable of \"energikcal\" is not empty\n      if (selectsPart === \"energikcal\" && nutrition.energikcal !== \"\") {\n        setEnergikcal(false);\n      }\n      // Reset all input validation errors\n      setFett(false);\n      setFettNull(false);\n      setMettede(false);\n      setKarbohydrat(false);\n      setHvoravSukkerarter(false);\n      setKostfiber(false);\n      setProtein(false);\n      setSalt(false);\n\n      // If the user has not selected any nutrients, set errors accordingly\n      // Check each nutrition value to see if it is missing or negative\n      // show input validation errors if any input is missing or negative.\n    } else {\n      if (selectsPart === \"energikj\") {\n        console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n        if (nutrition.energikj === \"\" || nutrition.energikj < 0) {\n          console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n          setEnergikj(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikj(false);\n        }\n      }\n\n      if (selectsPart === \"energikcal\") {\n        console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n        if (nutrition.energikcal === \"\" || nutrition.energikcal < 0) {\n          console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n          setEnergikcal(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikcal(false);\n        }\n      }\n\n      // repeat for each nutrition value...\n      if (nutrition.fett === \"\" || nutrition.fett < 0) {\n        setFettNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setFettNull(false);\n      }\n      if (nutrition.fett > 0.7) {\n        setFett(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setFett(false);\n      }\n\n      if (nutrition.mettede === \"\" || nutrition.mettede < 0) {\n        setMettede(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setMettede(false);\n      }\n\n      if (nutrition.karbohydrat === \"\" || nutrition.karbohydrat < 0) {\n        setKarbohydrat(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKarbohydrat(false);\n      }\n\n      if (\n        nutrition.hvoravSukkerarter === \"\" ||\n        nutrition.hvoravSukkerarter < 0\n      ) {\n        setHvoravSukkerarter(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setHvoravSukkerarter(false);\n      }\n\n      if (nutrition.kostfiber === \"\" || nutrition.kostfiber < 0) {\n        setKostfiber(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKostfiber(false);\n      }\n\n      if (nutrition.protein === \"\" || nutrition.protein < 0) {\n        setProtein(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setProtein(false);\n      }\n\n      if (nutrition.salt === \"\" || nutrition.salt < 0) {\n        setSalt(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setSalt(false);\n      }\n    }\n\n    // Check for the \"LOW SUGARS\" claim\n    if (foodType === \"solid\" && parseFloat(nutrition.karbohydrat) <= 5) {\n      setLowSugars(true);\n    } else if (\n      foodType === \"liquid\" &&\n      parseFloat(nutrition.karbohydrat) <= 2.5\n    ) {\n      setLowSugars(true);\n    } else {\n      setLowSugars(false);\n    }\n\n    // Check the condition for the \"WITH NO ADDED SUGARS\" nutrition claim\n    if (nutrition.hvoravSukkerarter === \"0\" && nutrition.karbohydrat > 0) {\n      setWithNoAddedSugars(true);\n    } else {\n      setWithNoAddedSugars(false);\n    }\n  };\n\n  // create an array of energy units to select from\n  const selectUnit = [\n    {\n      value: \"energikj\",\n      label: \"(kj)\",\n    },\n    {\n      value: \"energikcal\",\n      label: \"(kcal)\",\n    },\n  ];\n\n  // Declare a state variable for the select dropdown.\n  const [selectsPart, setSelectPart] = useState(\"\");\n\n  // A function to handle changes to the select dropdown energy unit\n  const handlerPart = (event) => {\n    const inputVal = document.getElementsByName(event.value);\n    console.log(\"handlerPart ===\", event, nutrition, inputVal);\n    setSelectPart(event.value);\n  };\n\n  //create an array of food types to select from\n  const foodTypes = [\n    {\n      value: \"solid\",\n      label: \"Fast form\",\n    },\n    {\n      value: \"liquid\",\n      label: \"Flytende form\",\n    },\n  ];\n\n  return (\n    <div className=\"row\">\n      {/* This div creates a column layout for the left side of the table */}\n      <div className=\"col-md-6\">\n        {/* the selector (dropdown menu) for choosing the food type. */}\n        <div className=\"form-group\">\n          <label htmlFor=\"foodType\">Velg type matvare:</label>\n          <Select\n            className=\"form-control\"\n            id=\"foodType\"\n            options={foodTypes}\n            onChange={(e) => setFoodType(e.value)} // update the onFoodTypeChange function to directly set the food type state\n            placeholder=\"Velg type matvare\"\n          />\n        </div>\n\n        <h5>\n          Næringsinnhold per 100{\" \"}\n          {foodType === \"solid\" ? \"g\" : foodType === \"liquid\" ? \"ml\" : \"g/ml\"}\n        </h5>\n\n        {/* This div adds a light background color to the table */}\n        <div className=\"bg-light\">\n          {/* This table shows the nutritional information */}\n          <table className=\"table table-striped\">\n            {/* The table header */}\n            <thead>\n              <tr>\n                <th scope=\"col\" className=\"table-font\">\n                  Energi eller næringsstoff\n                </th>\n                <th scope=\"col\" className=\"table-font\">\n                  Mengde\n                </th>\n              </tr>\n            </thead>\n\n            {/* The table body */}\n            <tbody>\n              {/* This row shows the energy content */}\n              <tr className={(energikj, energikcal ? \"alert-box\" : null)}>\n                <th scope=\"row\" className=\"table-font\">\n                  {/* An icon with a tooltip to indicate missing values in energy parameters */}\n                  {energikj && energikcal ? (\n                    <Tooltip\n                      title=\"Mangler verdi i energi (kJ/Kcal) parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  {/* This div displays the energy label and unit */}\n                  <div className=\"row\">\n                    <div className=\"col-md-3\">\n                      <label for=\"energiunit\" class=\"form-label\">\n                        Energi\n                      </label>\n                    </div>\n                    {/* A dropdown menu for selecting the energy unit */}\n                    <div className=\"col-md-6\">\n                      <Select\n                        placeholder={<div>Velg enhet</div>}\n                        className=\"form-select-md mb-3\"\n                        options={selectUnit}\n                        onChange={(e) => handlerPart(e)}\n                      />\n                    </div>\n                  </div>\n                </th>\n                {/* An input field for entering the energy value */}\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name={selectsPart}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* Additional rows for other nutrient selections */}\n              {/* This row shows the fat content */}\n              <tr\n                className={\n                  fett ? \"alert-box\" : null || fettNull ? \"alert-box\" : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {fett ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden fett. Mengden på fett må være lavere enn eller lik 0.7 / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {fettNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i fett parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Fett (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"fett\"\n                    value={nutrition.fett}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the saturated fat content */}\n              <tr className={mettede ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {mettede ? (\n                    <Tooltip\n                      title=\"Mangler verdi i mettede fettsyrer parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Mettede fettsyrer (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"mettede\"\n                    value={nutrition.mettede}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the carbohydrate content */}\n              <tr className={karbohydrat ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {karbohydrat ? (\n                    <Tooltip\n                      title=\"Mangler verdi i karbohydrat parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Karbohydrat (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"karbohydrat\"\n                    value={nutrition.karbohydrat}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows hvorav sukkerarter content */}\n              <tr className={hvoravSukkerarter ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {hvoravSukkerarter ? (\n                    <Tooltip\n                      title=\"Mangler verdi i hvorav sukkerarter parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Hvorav tilsatte sukkerarter (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"hvoravSukkerarter\"\n                    value={nutrition.hvoravSukkerarter}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows kostfiber content */}\n              <tr className={kostfiber ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {kostfiber ? (\n                    <Tooltip\n                      title=\"Mangler verdi i kostfiber parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Kostfiber (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"kostfiber\"\n                    value={nutrition.kostfiber}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the protein content */}\n              <tr className={protein ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {protein ? (\n                    <Tooltip\n                      title=\"Mangler verdi i protein parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Protein (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"protein\"\n                    value={nutrition.protein}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows salt content */}\n              <tr className={salt ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {salt ? (\n                    <Tooltip\n                      title=\"Mangler verdi i salt parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Salt (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"salt\"\n                    value={nutrition.salt}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n\n        {/* Button that submits the form and calls the onClick function */}\n        <div className=\"col-12 button-div\">\n          <button\n            type=\"submit\"\n            className=\"btn btn-primary btn-lg button-search\"\n            onClick={onClick}\n          >\n            Beregn\n          </button>\n        </div>\n      </div>\n\n      <div className=\"col-md-6\">\n        {/* positive results nøkkelhullet container\" */}\n        {showNokkelhulletResults ? (\n          <div className=\"container nøkkelhullet-food-result-container\">\n            {/* An image with class \"keyhole-logo\" and alt text \"keyhole logo\" */}\n            <img\n              src={keyholeLgog}\n              className=\"keyhole-logo img-fluid\"\n              alt=\"keyhole logo\"\n            />\n            {/* A heading with text \"Nøkkelhullet\" */}\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir Nøkkelhullet. </p>\n              </div>\n              <div className=\"col-md-2\">\n                {/* FontAwesome icon with event listener to show the \"Nøkkelhullet\" information section */}\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  {/* A paragraph with a link to Lovdata's \"Forskrift om frivillig merking a nœringsmidler med Nokkellhullet\" */}\n                  <p>\n                    Les mer om hvilke krav det stilles for merking av\n                    Nokkellhullet på Lovdatas \"Forskrift om frivillig merking a\n                    nœringsmidler med Nokkellhullet\":\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  {/* FontAwesome icon with event listener to hide the \"Nøkkelhullet\" information section */}\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        ) : null}\n        {/*Negative results nøkkelhullet container\" */}\n        {showNokkelhulletResults === false && (\n          <div className=\"container nøkkelhullet-food-negResult-container\">\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir ikke Nøkkelhullet.</p>\n                {showEmptyResult ? (\n                  <p>** Obligatoriske næringsverdier kan ikke være tomme.</p>\n                ) : null}\n\n                {fett ? (\n                  <p>** Fett verdien kan være høyst 0.7 g/100 g.</p>\n                ) : null}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om frivillig merking av næringsmidler med Nøkkelhullet:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for ernæringspåstander if there are all true results */}\n        {buttonClicked && (\n          <div\n            className={\n              lowSugars && withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-all\"\n                : !lowSugars && !withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-none\"\n                : \"container ernæringspåstander-food-result-container-some\"\n            }\n          >\n            <h5>Ernæringspåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                {/* Low sugars */}\n                {lowSugars ? (\n                  <div>\n                    <p>** Lavt sukkerinnhold:</p>\n                    <p>\n                      Dette produktet inneholder høyst 5 g sukkerarter per 100 g\n                      for næringsmidler i fast form, eller høyst 2,5 g\n                      sukkerarter per 100 ml for næringsmidler i flytende form\n                      og oppfyller kravet for \"Lavt sukkerinnhold\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Lavt sukkerinnhold\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        For faste næringsmidler, sukkerinnholdet må være høyst 5\n                        g per 100 g.\n                      </li>\n                      <li>\n                        For flytende næringsmidler, sukkerinnholdet må være\n                        høyst 2,5 g per 100 ml.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n\n                {/* No added sugars */}\n                {withNoAddedSugars ? (\n                  <div>\n                    <p>** Uten tilsatt sukker:</p>\n                    <p>\n                      Dette produktet er ikke tilsatt monosakkarider,\n                      disakkarider eller andre næringsmidler på grunn av deres\n                      søtende egenskaper og oppfyller kravet for \"Uten tilsatt\n                      sukker\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Uten tilsatt sukker\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        Produktet må ikke være tilsatt monosakkarider,\n                        disakkarider eller andre næringsmidler på grunn av deres\n                        søtende egenskaper.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"ernaerings\")}\n                />\n              </div>\n            </div>\n            {infoErnaerings ? (\n              // Information section for \"Ernæringspåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"ernaerings\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for Helsepåstander results  */}\n        {showHelsepåstander && (\n          <div\n            className=\"container helsepåstander-food-result-container\"\n            style={{ background: \"#f2f0b5\" }}\n          >\n            <h5>Helsepåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Under utvikling. </p>\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"helsepåstander\")}\n                />\n              </div>\n            </div>\n            {infoHelsepåstander ? (\n              // Information section for \"Helsepåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"helsepåstander\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"15px\" }}></div>\n        {/* conditional rendering for the buttons using showButtons state */}\n        {showButtons && (\n          <div className=\"d-flex justify-content-between\">\n            {/* Save button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-save\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Lagre produkt\n            </button>\n\n            {/* Share button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-share\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Del produkt\n            </button>\n\n            {/* Add a new product button */}\n            <button\n              className=\"btn btn-primary\"\n              onClick={() => window.location.reload()}\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-plus\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Legg til et nytt produkt\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Melk11a;\n","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Melk11b.js",["368","369","370","371"],[],"import React from \"react\";\nimport { useState, useEffect } from \"react\"; // import the useState and useeffect hook.\nimport { faCircleExclamation } from \"@fortawesome/free-solid-svg-icons\"; // import an icon.\nimport { faBan } from \"@fortawesome/free-solid-svg-icons\";\nimport { faSave, faShare, faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"; // import FontAwesomeIcon component.\nimport Tooltip from \"@mui/material/Tooltip\"; // import Tooltip component.\nimport keyholeLgog from \"./circle-keyhole-logo.png\"; // import an image\nimport { faCircleInfo } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport { faXmarkCircle } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport Select from \"react-select\"; // import Select component\n\nconst Melk11b = () => {\n  // State variables for showing results and empty result message\n  const [showNokkelhulletResults, setShowNokkelhulletResults] = useState(null);\n  const [showErnaeringsResults, setShowErnaeringsResults] = useState(null);\n  const [showHelsepåstander, setShowHelsepåstander] = useState(null);\n  const [showEmptyResult, setShowEmptyResult] = useState(\"\"); // initialize state variable for showing empty result message.\n\n  //state variable to store the user's food type selection (solid or liquid) and the low sugars claim result\n  const [foodType, setFoodType] = useState(\"\");\n  const [lowSugars, setLowSugars] = useState(null);\n\n  //state variable to track whether the product meets the WITH NO ADDED SUGARS claim or not\n  const [withNoAddedSugars, setWithNoAddedSugars] = useState(false);\n\n  // State variable for tracking if the button is clicked\n  const [buttonClicked, setButtonClicked] = useState(false);\n\n  // useEffect hook for checking the condition for the \"WITH NO ADDED SUGARS\" claim when button is clicked\n  useEffect(() => {\n    if (buttonClicked) {\n      if (withNoAddedSugars) {\n        setShowErnaeringsResults(true);\n      } else {\n        setShowErnaeringsResults(false);\n      }\n    }\n  }, [withNoAddedSugars, buttonClicked]);\n\n  //state for controlling the buttons' visibility\n  const [showButtons, setShowButtons] = useState(false);\n\n  // State variables to control the visibility of the information sections\n  const [infoNokkelhullet, setInfoNokkelhullet] = useState(false);\n  const [infoErnaerings, setInfoErnaerings] = useState(false);\n  const [infoHelsepåstander, setInfoHelsepåstander] = useState(false);\n\n  // Function to show an information section based on the container parameter\n  const onClickInfo = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(true);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(true);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(true);\n    }\n  };\n\n  // Function to hide an information section based on the container parameter\n  const onClickClose = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(false);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(false);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(false);\n    }\n  };\n\n  // State variables for handling input fields and validation errors\n  const [energikj, setEnergikj] = useState(false);\n  const [energikcal, setEnergikcal] = useState(false);\n\n  const [fett, setFett] = useState(false);\n  const [fettNull, setFettNull] = useState(false);\n  const [mettede, setMettede] = useState(false);\n  const [mettedeNull, setMettedeNull] = useState(false);\n  const [karbohydrat, setKarbohydrat] = useState(false);\n  const [karbohydratNull, setKarbohydratNull] = useState(false);\n  const [hvoravSukkerarter, setHvoravSukkerarter] = useState(false);\n  const [kostfiber, setKostfiber] = useState(false);\n  const [protein, setProtein] = useState(false);\n  const [salt, setSalt] = useState(false);\n  const [saltNull, setSaltNull] = useState(false);\n\n  // State variable for storing nutrition information entered by user\n  const [nutrition, setNutrition] = useState({\n    energikj: \"\",\n    energikcal: \"\",\n    fett: \"\",\n    mettede: \"\",\n    karbohydrat: \"\",\n    hvoravSukkerarter: \"\",\n    kostfiber: \"\",\n    protein: \"\",\n    salt: \"\",\n  });\n\n  // Handler for updating nutrition state/state variable based on input field changes/input values\n  const changeHandle = (event) => {\n    console.log(\"changeHandle ===\", event.target, event.target.value);\n    setNutrition({\n      ...nutrition,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  // define function to handle form submission\n  const onClick = (e) => {\n    e.preventDefault();\n    setButtonClicked(true);\n    setShowHelsepåstander(true);\n    setShowButtons(true);\n\n    console.log(\"onclick ===\", selectsPart, nutrition);\n\n    // Check if all required fields are filled out and within valid ranges\n    // The if statement checks if all required inputs are non-empty and meet the nutritional requirements\n    if (\n      nutrition.fett !== \"\" &&\n      nutrition.fett <= 1.5 &&\n      nutrition.mettede !== \"\" &&\n      nutrition.mettede <= 0.495 &&\n      nutrition.karbohydrat !== \"\" &&\n      nutrition.karbohydrat <= 5 &&\n      nutrition.hvoravSukkerarter !== \"\" &&\n      nutrition.kostfiber !== \"\" &&\n      nutrition.protein !== \"\" &&\n      nutrition.salt !== \"\" &&\n      nutrition.salt <= 0.1\n    ) {\n      // If all requirements are met, display the nutrition results\n      setShowNokkelhulletResults(true);\n      // Hide any empty result messages or error messages\n      setShowEmptyResult(false);\n\n      // Check if the user selected \"energikj\" and if nutrition input lable of \"energikj\" is not empty\n      if (selectsPart === \"energikj\" && nutrition.energikj !== \"\") {\n        setEnergikj(false);\n      }\n\n      // Check if the user selected \"energikcal\" and if nutrition input lable of \"energikcal\" is not empty\n      if (selectsPart === \"energikcal\" && nutrition.energikcal !== \"\") {\n        setEnergikcal(false);\n      }\n      // Reset all input validation errors\n      setFett(false);\n      setFettNull(false);\n      setMettede(false);\n      setMettedeNull(false);\n      setKarbohydrat(false);\n      setKarbohydratNull(false);\n      setHvoravSukkerarter(false);\n      setKostfiber(false);\n      setProtein(false);\n      setSalt(false);\n      setSaltNull(false);\n\n      // If the user has not selected any nutrients, set errors accordingly\n      // Check each nutrition value to see if it is missing or negative\n      // show input validation errors if any input is missing or negative.\n    } else {\n      if (selectsPart === \"energikj\") {\n        console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n        if (nutrition.energikj === \"\" || nutrition.energikj < 0) {\n          console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n          setEnergikj(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikj(false);\n        }\n      }\n\n      if (selectsPart === \"energikcal\") {\n        console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n        if (nutrition.energikcal === \"\" || nutrition.energikcal < 0) {\n          console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n          setEnergikcal(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikcal(false);\n        }\n      }\n\n      // repeat for each nutrition value...\n      if (nutrition.fett === \"\" || nutrition.fett < 0) {\n        setFettNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setFettNull(false);\n      }\n      if (nutrition.fett > 1.5) {\n        setFett(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setFett(false);\n      }\n\n      if (nutrition.mettede === \"\" || nutrition.mettede < 0) {\n        setMettedeNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setMettedeNull(false);\n      }\n      if (nutrition.mettede > 0.495) {\n        setMettede(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setMettede(false);\n      }\n\n      if (nutrition.karbohydrat === \"\" || nutrition.karbohydrat < 0) {\n        setKarbohydratNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKarbohydratNull(false);\n      }\n      if (nutrition.karbohydrat > 5) {\n        setKarbohydrat(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setKarbohydrat(false);\n      }\n\n      if (\n        nutrition.hvoravSukkerarter === \"\" ||\n        nutrition.hvoravSukkerarter < 0\n      ) {\n        setHvoravSukkerarter(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setHvoravSukkerarter(false);\n      }\n\n      if (nutrition.kostfiber === \"\" || nutrition.kostfiber < 0) {\n        setKostfiber(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKostfiber(false);\n      }\n\n      if (nutrition.protein === \"\" || nutrition.protein < 0) {\n        setProtein(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setProtein(false);\n      }\n\n      if (nutrition.salt === \"\" || nutrition.salt < 0) {\n        setSaltNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setSaltNull(false);\n      }\n      if (nutrition.salt > 0.1) {\n        setSalt(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setSalt(false);\n      }\n    }\n\n    // Check for the \"LOW SUGARS\" claim\n    if (foodType === \"solid\" && parseFloat(nutrition.karbohydrat) <= 5) {\n      setLowSugars(true);\n    } else if (\n      foodType === \"liquid\" &&\n      parseFloat(nutrition.karbohydrat) <= 2.5\n    ) {\n      setLowSugars(true);\n    } else {\n      setLowSugars(false);\n    }\n\n    // Check the condition for the \"WITH NO ADDED SUGARS\" nutrition claim\n    if (nutrition.hvoravSukkerarter === \"0\" && nutrition.karbohydrat > 0) {\n      setWithNoAddedSugars(true);\n    } else {\n      setWithNoAddedSugars(false);\n    }\n  };\n\n  // create an array of energy units to select from\n  const selectUnit = [\n    {\n      value: \"energikj\",\n      label: \"(kj)\",\n    },\n    {\n      value: \"energikcal\",\n      label: \"(kcal)\",\n    },\n  ];\n\n  // Declare a state variable for the select dropdown.\n  const [selectsPart, setSelectPart] = useState(\"\");\n\n  // A function to handle changes to the select dropdown energy unit\n  const handlerPart = (event) => {\n    const inputVal = document.getElementsByName(event.value);\n    console.log(\"handlerPart ===\", event, nutrition, inputVal);\n    setSelectPart(event.value);\n  };\n\n  //create an array of food types to select from\n  const foodTypes = [\n    {\n      value: \"solid\",\n      label: \"Fast form\",\n    },\n    {\n      value: \"liquid\",\n      label: \"Flytende form\",\n    },\n  ];\n\n  return (\n    <div className=\"row\">\n      {/* This div creates a column layout for the left side of the table */}\n      <div className=\"col-md-6\">\n        {/* the selector (dropdown menu) for choosing the food type. */}\n        <div className=\"form-group\">\n          <label htmlFor=\"foodType\">Velg type matvare:</label>\n          <Select\n            className=\"form-control\"\n            id=\"foodType\"\n            options={foodTypes}\n            onChange={(e) => setFoodType(e.value)} // update the onFoodTypeChange function to directly set the food type state\n            placeholder=\"Velg type matvare\"\n          />\n        </div>\n\n        <h5>\n          Næringsinnhold per 100{\" \"}\n          {foodType === \"solid\" ? \"g\" : foodType === \"liquid\" ? \"ml\" : \"g/ml\"}\n        </h5>\n\n        {/* This div adds a light background color to the table */}\n        <div className=\"bg-light\">\n          {/* This table shows the nutritional information */}\n          <table className=\"table table-striped\">\n            {/* The table header */}\n            <thead>\n              <tr>\n                <th scope=\"col\" className=\"table-font\">\n                  Energi eller næringsstoff\n                </th>\n                <th scope=\"col\" className=\"table-font\">\n                  Mengde\n                </th>\n              </tr>\n            </thead>\n\n            {/* The table body */}\n            <tbody>\n              {/* This row shows the energy content */}\n              <tr className={(energikj, energikcal ? \"alert-box\" : null)}>\n                <th scope=\"row\" className=\"table-font\">\n                  {/* An icon with a tooltip to indicate missing values in energy parameters */}\n                  {energikj && energikcal ? (\n                    <Tooltip\n                      title=\"Mangler verdi i energi (kJ/Kcal) parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  {/* This div displays the energy label and unit */}\n                  <div className=\"row\">\n                    <div className=\"col-md-3\">\n                      <label for=\"energiunit\" class=\"form-label\">\n                        Energi\n                      </label>\n                    </div>\n                    {/* A dropdown menu for selecting the energy unit */}\n                    <div className=\"col-md-6\">\n                      <Select\n                        placeholder={<div>Velg enhet</div>}\n                        className=\"form-select-md mb-3\"\n                        options={selectUnit}\n                        onChange={(e) => handlerPart(e)}\n                      />\n                    </div>\n                  </div>\n                </th>\n                {/* An input field for entering the energy value */}\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name={selectsPart}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* Additional rows for other nutrient selections */}\n              {/* This row shows the fat content */}\n              <tr\n                className={\n                  fett ? \"alert-box\" : null || fettNull ? \"alert-box\" : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {fett ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden fett. Mengden på fett må være lavere enn eller lik 1.5/ 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {fettNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i fett parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Fett (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"fett\"\n                    value={nutrition.fett}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the saturated fat content */}\n              <tr\n                className={\n                  mettede\n                    ? \"alert-box\"\n                    : null || mettedeNull\n                    ? \"alert-box\"\n                    : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {mettede ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden mettede fettsyrer. Mengden på mettede fettsyrer må være lavere enn eller lik 0.495 / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {mettedeNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i mettede fettsyrer parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Mettede fettsyrer (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"mettede\"\n                    value={nutrition.mettede}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the carbohydrate content */}\n              <tr\n                className={\n                  karbohydrat\n                    ? \"alert-box\"\n                    : null || karbohydratNull\n                    ? \"alert-box\"\n                    : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {karbohydrat ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden sukkerarter. Mengden på sukkerarter må være lavere enn eller lik 5 g / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {karbohydratNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i karbohydrat parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Karbohydrat (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"karbohydrat\"\n                    value={nutrition.karbohydrat}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows hvorav sukkerarter content */}\n              <tr className={hvoravSukkerarter ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {hvoravSukkerarter ? (\n                    <Tooltip\n                      title=\"Mangler verdi i hvorav sukkerarter parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Hvorav tilsatte sukkerarter (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"hvoravSukkerarter\"\n                    value={nutrition.hvoravSukkerarter}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows kostfiber content */}\n              <tr className={kostfiber ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {kostfiber ? (\n                    <Tooltip\n                      title=\"Mangler verdi i kostfiber parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Kostfiber (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"kostfiber\"\n                    value={nutrition.kostfiber}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the protein content */}\n              <tr className={protein ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {protein ? (\n                    <Tooltip\n                      title=\"Mangler verdi i protein parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Protein (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"protein\"\n                    value={nutrition.protein}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows salt content */}\n              <tr\n                className={\n                  salt ? \"alert-box\" : null || saltNull ? \"alert-box\" : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {salt ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden salt. Mengden på salt må være lavere enn eller lik 0.1 / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {saltNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i salt parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Salt (g)\n                </th>\n                <td colSpan=\"2\">\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"salt\"\n                    value={nutrition.salt}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n\n        {/* Button that submits the form and calls the onClick function */}\n        <div className=\"col-12 button-div\">\n          <button\n            type=\"submit\"\n            className=\"btn btn-primary btn-lg button-search\"\n            onClick={onClick}\n          >\n            Beregn\n          </button>\n        </div>\n      </div>\n\n      <div className=\"col-md-6\">\n        {/* positive results nøkkelhullet container\" */}\n        {showNokkelhulletResults ? (\n          <div className=\"container nøkkelhullet-food-result-container\">\n            {/* An image with class \"keyhole-logo\" and alt text \"keyhole logo\" */}\n            <img\n              src={keyholeLgog}\n              className=\"keyhole-logo img-fluid\"\n              alt=\"keyhole logo\"\n            />\n            {/* A heading with text \"Nøkkelhullet\" */}\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir Nøkkelhullet. </p>\n              </div>\n              <div className=\"col-md-2\">\n                {/* FontAwesome icon with event listener to show the \"Nøkkelhullet\" information section */}\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  {/* A paragraph with a link to Lovdata's \"Forskrift om frivillig merking a nœringsmidler med Nokkellhullet\" */}\n                  <p>\n                    Les mer om hvilke krav det stilles for merking av\n                    Nokkellhullet på Lovdatas \"Forskrift om frivillig merking a\n                    nœringsmidler med Nokkellhullet\":\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  {/* FontAwesome icon with event listener to hide the \"Nøkkelhullet\" information section */}\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        ) : null}\n        {/*Negative results nøkkelhullet container\" */}\n        {showNokkelhulletResults === false && (\n          <div className=\"container nøkkelhullet-food-negResult-container\">\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir ikke Nøkkelhullet.</p>\n                {showEmptyResult ? (\n                  <p>** Obligatoriske næringsverdier kan ikke være tomme.</p>\n                ) : null}\n\n                {mettede ? (\n                  <p>\n                    ** Mettede fettsyrer verdien kan være høyst 33 % av\n                    fettinnholdet /100 g.\n                  </p>\n                ) : null}\n\n                {fett ? (\n                  <p>** Fett verdien kan være høyst 1.5 g/100 g.</p>\n                ) : null}\n\n                {karbohydrat ? (\n                  <p>** Sukkerarter verdien kan være høyst 5 g/100 g.</p>\n                ) : null}\n\n                {salt ? (\n                  <p>** Salt verdien kan være høyst 0.1 g/100 g.</p>\n                ) : null}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om frivillig merking av næringsmidler med Nøkkelhullet:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for ernæringspåstander if there are all true results */}\n        {buttonClicked && (\n          <div\n            className={\n              lowSugars && withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-all\"\n                : !lowSugars && !withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-none\"\n                : \"container ernæringspåstander-food-result-container-some\"\n            }\n          >\n            <h5>Ernæringspåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                {/* Low sugars */}\n                {lowSugars ? (\n                  <div>\n                    <p>** Lavt sukkerinnhold:</p>\n                    <p>\n                      Dette produktet inneholder høyst 5 g sukkerarter per 100 g\n                      for næringsmidler i fast form, eller høyst 2,5 g\n                      sukkerarter per 100 ml for næringsmidler i flytende form\n                      og oppfyller kravet for \"Lavt sukkerinnhold\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Lavt sukkerinnhold\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        For faste næringsmidler, sukkerinnholdet må være høyst 5\n                        g per 100 g.\n                      </li>\n                      <li>\n                        For flytende næringsmidler, sukkerinnholdet må være\n                        høyst 2,5 g per 100 ml.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n\n                {/* No added sugars */}\n                {withNoAddedSugars ? (\n                  <div>\n                    <p>** Uten tilsatt sukker:</p>\n                    <p>\n                      Dette produktet er ikke tilsatt monosakkarider,\n                      disakkarider eller andre næringsmidler på grunn av deres\n                      søtende egenskaper og oppfyller kravet for \"Uten tilsatt\n                      sukker\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Uten tilsatt sukker\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        Produktet må ikke være tilsatt monosakkarider,\n                        disakkarider eller andre næringsmidler på grunn av deres\n                        søtende egenskaper.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"ernaerings\")}\n                />\n              </div>\n            </div>\n            {infoErnaerings ? (\n              // Information section for \"Ernæringspåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"ernaerings\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for Helsepåstander results  */}\n        {showHelsepåstander && (\n          <div\n            className=\"container helsepåstander-food-result-container\"\n            style={{ background: \"#f2f0b5\" }}\n          >\n            <h5>Helsepåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Under utvikling. </p>\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"helsepåstander\")}\n                />\n              </div>\n            </div>\n            {infoHelsepåstander ? (\n              // Information section for \"Helsepåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"helsepåstander\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"15px\" }}></div>\n        {/* conditional rendering for the buttons using showButtons state */}\n        {showButtons && (\n          <div className=\"d-flex justify-content-between\">\n            {/* Save button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-save\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Lagre produkt\n            </button>\n\n            {/* Share button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-share\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Del produkt\n            </button>\n\n            {/* Add a new product button */}\n            <button\n              className=\"btn btn-primary\"\n              onClick={() => window.location.reload()}\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-plus\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Legg til et nytt produkt\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Melk11b;\n","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Melk12a.js",["372","373","374","375"],[],"import React from \"react\";\nimport { useState, useEffect } from \"react\"; // import the useState and useeffect hook.\nimport { faCircleExclamation } from \"@fortawesome/free-solid-svg-icons\"; // import an icon.\nimport { faBan } from \"@fortawesome/free-solid-svg-icons\";\nimport { faSave, faShare, faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"; // import FontAwesomeIcon component.\nimport Tooltip from \"@mui/material/Tooltip\"; // import Tooltip component.\nimport keyholeLgog from \"./circle-keyhole-logo.png\"; // import an image\nimport { faCircleInfo } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport { faXmarkCircle } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport Select from \"react-select\"; // import Select component\n\nconst Melk12a = () => {\n  // State variables for showing results and empty result message\n  const [showNokkelhulletResults, setShowNokkelhulletResults] = useState(null);\n  const [showErnaeringsResults, setShowErnaeringsResults] = useState(null);\n  const [showHelsepåstander, setShowHelsepåstander] = useState(null);\n  const [showEmptyResult, setShowEmptyResult] = useState(\"\"); // initialize state variable for showing empty result message.\n\n  //state variable to store the user's food type selection (solid or liquid) and the low sugars claim result\n  const [foodType, setFoodType] = useState(\"\");\n  const [lowSugars, setLowSugars] = useState(null);\n\n  //state variable to track whether the product meets the WITH NO ADDED SUGARS claim or not\n  const [withNoAddedSugars, setWithNoAddedSugars] = useState(false);\n\n  // State variable for tracking if the button is clicked\n  const [buttonClicked, setButtonClicked] = useState(false);\n\n  // useEffect hook for checking the condition for the \"WITH NO ADDED SUGARS\" claim when button is clicked\n  useEffect(() => {\n    if (buttonClicked) {\n      if (withNoAddedSugars) {\n        setShowErnaeringsResults(true);\n      } else {\n        setShowErnaeringsResults(false);\n      }\n    }\n  }, [withNoAddedSugars, buttonClicked]);\n\n  //state for controlling the buttons' visibility\n  const [showButtons, setShowButtons] = useState(false);\n\n  // State variables to control the visibility of the information sections\n  const [infoNokkelhullet, setInfoNokkelhullet] = useState(false);\n  const [infoErnaerings, setInfoErnaerings] = useState(false);\n  const [infoHelsepåstander, setInfoHelsepåstander] = useState(false);\n\n  // Function to show an information section based on the container parameter\n  const onClickInfo = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(true);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(true);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(true);\n    }\n  };\n\n  // Function to hide an information section based on the container parameter\n  const onClickClose = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(false);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(false);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(false);\n    }\n  };\n\n  // State variables for handling input fields and validation errors\n  const [energikj, setEnergikj] = useState(false);\n  const [energikcal, setEnergikcal] = useState(false);\n\n  const [fett, setFett] = useState(false);\n  const [fettNull, setFettNull] = useState(false);\n  const [mettede, setMettede] = useState(false);\n  const [karbohydrat, setKarbohydrat] = useState(false);\n  const [hvoravSukkerarter, setHvoravSukkerarter] = useState(false);\n  const [kostfiber, setKostfiber] = useState(false);\n  const [protein, setProtein] = useState(false);\n  const [salt, setSalt] = useState(false);\n\n  // State variable for storing nutrition information entered by user\n  const [nutrition, setNutrition] = useState({\n    energikj: \"\",\n    energikcal: \"\",\n    fett: \"\",\n    mettede: \"\",\n    karbohydrat: \"\",\n    hvoravSukkerarter: \"\",\n    kostfiber: \"\",\n    protein: \"\",\n    salt: \"\",\n  });\n\n  // Handler for updating nutrition state/state variable based on input field changes/input values\n  const changeHandle = (event) => {\n    console.log(\"changeHandle ===\", event.target, event.target.value);\n    setNutrition({\n      ...nutrition,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  // define function to handle form submission\n  const onClick = (e) => {\n    e.preventDefault();\n    setButtonClicked(true);\n    setShowHelsepåstander(true);\n    setShowButtons(true);\n\n    console.log(\"onclick ===\", selectsPart, nutrition);\n\n    // Check if all required fields are filled out and within valid ranges\n    // The if statement checks if all required inputs are non-empty and meet the nutritional requirements\n    if (\n      nutrition.fett !== \"\" &&\n      nutrition.fett <= 1.5 &&\n      nutrition.mettede !== \"\" &&\n      nutrition.karbohydrat !== \"\" &&\n      nutrition.hvoravSukkerarter !== \"\" &&\n      nutrition.kostfiber !== \"\" &&\n      nutrition.protein !== \"\" &&\n      nutrition.salt !== \"\"\n    ) {\n      // If all requirements are met, display the nutrition results\n      setShowNokkelhulletResults(true);\n      // Hide any empty result messages or error messages\n      setShowEmptyResult(false);\n\n      // Check if the user selected \"energikj\" and if nutrition input lable of \"energikj\" is not empty\n      if (selectsPart === \"energikj\" && nutrition.energikj !== \"\") {\n        setEnergikj(false);\n      }\n\n      // Check if the user selected \"energikcal\" and if nutrition input lable of \"energikcal\" is not empty\n      if (selectsPart === \"energikcal\" && nutrition.energikcal !== \"\") {\n        setEnergikcal(false);\n      }\n      // Reset all input validation errors\n      setFett(false);\n      setFettNull(false);\n      setMettede(false);\n      setKarbohydrat(false);\n      setHvoravSukkerarter(false);\n      setKostfiber(false);\n      setProtein(false);\n      setSalt(false);\n\n      // If the user has not selected any nutrients, set errors accordingly\n      // Check each nutrition value to see if it is missing or negative\n      // show input validation errors if any input is missing or negative.\n    } else {\n      if (selectsPart === \"energikj\") {\n        console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n        if (nutrition.energikj === \"\" || nutrition.energikj < 0) {\n          console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n          setEnergikj(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikj(false);\n        }\n      }\n\n      if (selectsPart === \"energikcal\") {\n        console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n        if (nutrition.energikcal === \"\" || nutrition.energikcal < 0) {\n          console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n          setEnergikcal(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikcal(false);\n        }\n      }\n\n      // repeat for each nutrition value...\n      if (nutrition.fett === \"\" || nutrition.fett < 0) {\n        setFettNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setFettNull(false);\n      }\n      if (nutrition.fett > 1.5) {\n        setFett(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setFett(false);\n      }\n\n      if (nutrition.mettede === \"\" || nutrition.mettede < 0) {\n        setMettede(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setMettede(false);\n      }\n\n      if (nutrition.karbohydrat === \"\" || nutrition.karbohydrat < 0) {\n        setKarbohydrat(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKarbohydrat(false);\n      }\n\n      if (\n        nutrition.hvoravSukkerarter === \"\" ||\n        nutrition.hvoravSukkerarter < 0\n      ) {\n        setHvoravSukkerarter(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setHvoravSukkerarter(false);\n      }\n\n      if (nutrition.kostfiber === \"\" || nutrition.kostfiber < 0) {\n        setKostfiber(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKostfiber(false);\n      }\n\n      if (nutrition.protein === \"\" || nutrition.protein < 0) {\n        setProtein(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setProtein(false);\n      }\n\n      if (nutrition.salt === \"\" || nutrition.salt < 0) {\n        setSalt(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setSalt(false);\n      }\n    }\n\n    // Check for the \"LOW SUGARS\" claim\n    if (foodType === \"solid\" && parseFloat(nutrition.karbohydrat) <= 5) {\n      setLowSugars(true);\n    } else if (\n      foodType === \"liquid\" &&\n      parseFloat(nutrition.karbohydrat) <= 2.5\n    ) {\n      setLowSugars(true);\n    } else {\n      setLowSugars(false);\n    }\n\n    // Check the condition for the \"WITH NO ADDED SUGARS\" nutrition claim\n    if (nutrition.hvoravSukkerarter === \"0\" && nutrition.karbohydrat > 0) {\n      setWithNoAddedSugars(true);\n    } else {\n      setWithNoAddedSugars(false);\n    }\n  };\n\n  // create an array of energy units to select from\n  const selectUnit = [\n    {\n      value: \"energikj\",\n      label: \"(kj)\",\n    },\n    {\n      value: \"energikcal\",\n      label: \"(kcal)\",\n    },\n  ];\n\n  // Declare a state variable for the select dropdown.\n  const [selectsPart, setSelectPart] = useState(\"\");\n\n  // A function to handle changes to the select dropdown energy unit\n  const handlerPart = (event) => {\n    const inputVal = document.getElementsByName(event.value);\n    console.log(\"handlerPart ===\", event, nutrition, inputVal);\n    setSelectPart(event.value);\n  };\n\n  //create an array of food types to select from\n  const foodTypes = [\n    {\n      value: \"solid\",\n      label: \"Fast form\",\n    },\n    {\n      value: \"liquid\",\n      label: \"Flytende form\",\n    },\n  ];\n\n  return (\n    <div className=\"row\">\n      {/* This div creates a column layout for the left side of the table */}\n      <div className=\"col-md-6\">\n        {/* the selector (dropdown menu) for choosing the food type. */}\n        <div className=\"form-group\">\n          <label htmlFor=\"foodType\">Velg type matvare:</label>\n          <Select\n            className=\"form-control\"\n            id=\"foodType\"\n            options={foodTypes}\n            onChange={(e) => setFoodType(e.value)} // update the onFoodTypeChange function to directly set the food type state\n            placeholder=\"Velg type matvare\"\n          />\n        </div>\n\n        <h5>\n          Næringsinnhold per 100{\" \"}\n          {foodType === \"solid\" ? \"g\" : foodType === \"liquid\" ? \"ml\" : \"g/ml\"}\n        </h5>\n\n        {/* This div adds a light background color to the table */}\n        <div className=\"bg-light\">\n          {/* This table shows the nutritional information */}\n          <table className=\"table table-striped\">\n            {/* The table header */}\n            <thead>\n              <tr>\n                <th scope=\"col\" className=\"table-font\">\n                  Energi eller næringsstoff\n                </th>\n                <th scope=\"col\" className=\"table-font\">\n                  Mengde\n                </th>\n              </tr>\n            </thead>\n\n            {/* The table body */}\n            <tbody>\n              {/* This row shows the energy content */}\n              <tr className={(energikj, energikcal ? \"alert-box\" : null)}>\n                <th scope=\"row\" className=\"table-font\">\n                  {/* An icon with a tooltip to indicate missing values in energy parameters */}\n                  {energikj && energikcal ? (\n                    <Tooltip\n                      title=\"Mangler verdi i energi (kJ/Kcal) parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  {/* This div displays the energy label and unit */}\n                  <div className=\"row\">\n                    <div className=\"col-md-3\">\n                      <label for=\"energiunit\" class=\"form-label\">\n                        Energi\n                      </label>\n                    </div>\n                    {/* A dropdown menu for selecting the energy unit */}\n                    <div className=\"col-md-6\">\n                      <Select\n                        placeholder={<div>Velg enhet</div>}\n                        className=\"form-select-md mb-3\"\n                        options={selectUnit}\n                        onChange={(e) => handlerPart(e)}\n                      />\n                    </div>\n                  </div>\n                </th>\n                {/* An input field for entering the energy value */}\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name={selectsPart}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* Additional rows for other nutrient selections */}\n              {/* This row shows the fat content */}\n              <tr\n                className={\n                  fett ? \"alert-box\" : null || fettNull ? \"alert-box\" : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {fett ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden fett. Mengden på fett må være lavere enn eller lik 1.5 / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {fettNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i fett parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Fett (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"fett\"\n                    value={nutrition.fett}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the saturated fat content */}\n              <tr className={mettede ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {mettede ? (\n                    <Tooltip\n                      title=\"Mangler verdi i mettede fettsyrer parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Mettede fettsyrer (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"mettede\"\n                    value={nutrition.mettede}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the carbohydrate content */}\n              <tr className={karbohydrat ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {karbohydrat ? (\n                    <Tooltip\n                      title=\"Mangler verdi i karbohydrat parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Karbohydrat (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"karbohydrat\"\n                    value={nutrition.karbohydrat}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows hvorav sukkerarter content */}\n              <tr className={hvoravSukkerarter ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {hvoravSukkerarter ? (\n                    <Tooltip\n                      title=\"Mangler verdi i hvorav sukkerarter parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Hvorav tilsatte sukkerarter (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"hvoravSukkerarter\"\n                    value={nutrition.hvoravSukkerarter}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows kostfiber content */}\n              <tr className={kostfiber ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {kostfiber ? (\n                    <Tooltip\n                      title=\"Mangler verdi i kostfiber parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Kostfiber (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"kostfiber\"\n                    value={nutrition.kostfiber}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the protein content */}\n              <tr className={protein ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {protein ? (\n                    <Tooltip\n                      title=\"Mangler verdi i protein parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Protein (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"protein\"\n                    value={nutrition.protein}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows salt content */}\n              <tr className={salt ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {salt ? (\n                    <Tooltip\n                      title=\"Mangler verdi i salt parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Salt (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"salt\"\n                    value={nutrition.salt}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n\n        {/* Button that submits the form and calls the onClick function */}\n        <div className=\"col-12 button-div\">\n          <button\n            type=\"submit\"\n            className=\"btn btn-primary btn-lg button-search\"\n            onClick={onClick}\n          >\n            Beregn\n          </button>\n        </div>\n      </div>\n\n      <div className=\"col-md-6\">\n        {/* positive results nøkkelhullet container\" */}\n        {showNokkelhulletResults ? (\n          <div className=\"container nøkkelhullet-food-result-container\">\n            {/* An image with class \"keyhole-logo\" and alt text \"keyhole logo\" */}\n            <img\n              src={keyholeLgog}\n              className=\"keyhole-logo img-fluid\"\n              alt=\"keyhole logo\"\n            />\n            {/* A heading with text \"Nøkkelhullet\" */}\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir Nøkkelhullet. </p>\n              </div>\n              <div className=\"col-md-2\">\n                {/* FontAwesome icon with event listener to show the \"Nøkkelhullet\" information section */}\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  {/* A paragraph with a link to Lovdata's \"Forskrift om frivillig merking a nœringsmidler med Nokkellhullet\" */}\n                  <p>\n                    Les mer om hvilke krav det stilles for merking av\n                    Nokkellhullet på Lovdatas \"Forskrift om frivillig merking a\n                    nœringsmidler med Nokkellhullet\":\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  {/* FontAwesome icon with event listener to hide the \"Nøkkelhullet\" information section */}\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        ) : null}\n        {/*Negative results nøkkelhullet container\" */}\n        {showNokkelhulletResults === false && (\n          <div className=\"container nøkkelhullet-food-negResult-container\">\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir ikke Nøkkelhullet.</p>\n                {showEmptyResult ? (\n                  <p>** Obligatoriske næringsverdier kan ikke være tomme.</p>\n                ) : null}\n\n                {fett ? (\n                  <p>** Fett verdien kan være høyst 1.5 g/100 g.</p>\n                ) : null}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om frivillig merking av næringsmidler med Nøkkelhullet:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for ernæringspåstander if there are all true results */}\n        {buttonClicked && (\n          <div\n            className={\n              lowSugars && withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-all\"\n                : !lowSugars && !withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-none\"\n                : \"container ernæringspåstander-food-result-container-some\"\n            }\n          >\n            <h5>Ernæringspåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                {/* Low sugars */}\n                {lowSugars ? (\n                  <div>\n                    <p>** Lavt sukkerinnhold:</p>\n                    <p>\n                      Dette produktet inneholder høyst 5 g sukkerarter per 100 g\n                      for næringsmidler i fast form, eller høyst 2,5 g\n                      sukkerarter per 100 ml for næringsmidler i flytende form\n                      og oppfyller kravet for \"Lavt sukkerinnhold\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Lavt sukkerinnhold\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        For faste næringsmidler, sukkerinnholdet må være høyst 5\n                        g per 100 g.\n                      </li>\n                      <li>\n                        For flytende næringsmidler, sukkerinnholdet må være\n                        høyst 2,5 g per 100 ml.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n\n                {/* No added sugars */}\n                {withNoAddedSugars ? (\n                  <div>\n                    <p>** Uten tilsatt sukker:</p>\n                    <p>\n                      Dette produktet er ikke tilsatt monosakkarider,\n                      disakkarider eller andre næringsmidler på grunn av deres\n                      søtende egenskaper og oppfyller kravet for \"Uten tilsatt\n                      sukker\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Uten tilsatt sukker\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        Produktet må ikke være tilsatt monosakkarider,\n                        disakkarider eller andre næringsmidler på grunn av deres\n                        søtende egenskaper.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"ernaerings\")}\n                />\n              </div>\n            </div>\n            {infoErnaerings ? (\n              // Information section for \"Ernæringspåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"ernaerings\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for Helsepåstander results  */}\n        {showHelsepåstander && (\n          <div\n            className=\"container helsepåstander-food-result-container\"\n            style={{ background: \"#f2f0b5\" }}\n          >\n            <h5>Helsepåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Under utvikling. </p>\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"helsepåstander\")}\n                />\n              </div>\n            </div>\n            {infoHelsepåstander ? (\n              // Information section for \"Helsepåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"helsepåstander\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"15px\" }}></div>\n        {/* conditional rendering for the buttons using showButtons state */}\n        {showButtons && (\n          <div className=\"d-flex justify-content-between\">\n            {/* Save button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-save\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Lagre produkt\n            </button>\n\n            {/* Share button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-share\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Del produkt\n            </button>\n\n            {/* Add a new product button */}\n            <button\n              className=\"btn btn-primary\"\n              onClick={() => window.location.reload()}\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-plus\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Legg til et nytt produkt\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Melk12a;\n","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Kategori8b.js",["376","377","378","379"],[],"import React from \"react\";\nimport { useState, useEffect } from \"react\"; // import the useState and useeffect hook.\nimport { faCircleExclamation } from \"@fortawesome/free-solid-svg-icons\"; // import an icon.\nimport { faBan } from \"@fortawesome/free-solid-svg-icons\";\nimport { faSave, faShare, faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"; // import FontAwesomeIcon component.\nimport Tooltip from \"@mui/material/Tooltip\"; // import Tooltip component.\nimport keyholeLgog from \"./circle-keyhole-logo.png\"; // import an image\nimport { faCircleInfo } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport { faXmarkCircle } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport Select from \"react-select\"; // import Select component\n\nconst Kategori8b = () => {\n  // State variables for showing results and empty result message\n  const [showNokkelhulletResults, setShowNokkelhulletResults] = useState(null);\n  const [showErnaeringsResults, setShowErnaeringsResults] = useState(null);\n  const [showHelsepåstander, setShowHelsepåstander] = useState(null);\n  const [showEmptyResult, setShowEmptyResult] = useState(\"\"); // initialize state variable for showing empty result message.\n\n  //state variable to store the user's food type selection (solid or liquid) and the low sugars claim result\n  const [foodType, setFoodType] = useState(\"\");\n  const [lowSugars, setLowSugars] = useState(null);\n\n  //state variable to track whether the product meets the WITH NO ADDED SUGARS claim or not\n  const [withNoAddedSugars, setWithNoAddedSugars] = useState(false);\n\n  // State variable for tracking if the button is clicked\n  const [buttonClicked, setButtonClicked] = useState(false);\n\n  // useEffect hook for checking the condition for the \"WITH NO ADDED SUGARS\" claim when button is clicked\n  useEffect(() => {\n    if (buttonClicked) {\n      if (withNoAddedSugars) {\n        setShowErnaeringsResults(true);\n      } else {\n        setShowErnaeringsResults(false);\n      }\n    }\n  }, [withNoAddedSugars, buttonClicked]);\n\n  //state for controlling the buttons' visibility\n  const [showButtons, setShowButtons] = useState(false);\n\n  // State variables to control the visibility of the information sections\n  const [infoNokkelhullet, setInfoNokkelhullet] = useState(false);\n  const [infoErnaerings, setInfoErnaerings] = useState(false);\n  const [infoHelsepåstander, setInfoHelsepåstander] = useState(false);\n\n  // Function to show an information section based on the container parameter\n  const onClickInfo = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(true);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(true);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(true);\n    }\n  };\n\n  // Function to hide an information section based on the container parameter\n  const onClickClose = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(false);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(false);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(false);\n    }\n  };\n\n  // State variables for handling input fields and validation errors\n  const [energikj, setEnergikj] = useState(false);\n  const [energikcal, setEnergikcal] = useState(false);\n\n  const [fett, setFett] = useState(false);\n  const [fettNull, setFettNull] = useState(false);\n  const [mettede, setMettede] = useState(false);\n  const [karbohydrat, setKarbohydrat] = useState(false);\n  const [karbohydratNull, setKarbohydratNull] = useState(false);\n  const [hvoravSukkerarter, setHvoravSukkerarter] = useState(false);\n  const [kostfiber, setKostfiber] = useState(false);\n  const [kostfiberNull, setKostfiberNull] = useState(false);\n  const [protein, setProtein] = useState(false);\n  const [salt, setSalt] = useState(false);\n  const [saltNull, setSaltNull] = useState(false);\n\n  // State variable for storing nutrition information entered by user\n  const [nutrition, setNutrition] = useState({\n    energikj: \"\",\n    energikcal: \"\",\n    fett: \"\",\n    mettede: \"\",\n    karbohydrat: \"\",\n    hvoravSukkerarter: \"\",\n    kostfiber: \"\",\n    protein: \"\",\n    salt: \"\",\n  });\n\n  // Handler for updating nutrition state/state variable based on input field changes/input values\n  const changeHandle = (event) => {\n    console.log(\"changeHandle ===\", event.target, event.target.value);\n    setNutrition({\n      ...nutrition,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  // define function to handle form submission\n  const onClick = (e) => {\n    e.preventDefault();\n    setButtonClicked(true);\n    setShowHelsepåstander(true);\n    setShowButtons(true);\n\n    console.log(\"onclick ===\", selectsPart, nutrition);\n\n    // Check if all required fields are filled out and within valid ranges\n    // The if statement checks if all required inputs are non-empty and meet the nutritional requirements\n    if (\n      nutrition.fett !== \"\" &&\n      nutrition.fett <= 7 &&\n      nutrition.mettede !== \"\" &&\n      nutrition.karbohydrat !== \"\" &&\n      nutrition.karbohydrat <= 5 &&\n      nutrition.hvoravSukkerarter !== \"\" &&\n      nutrition.kostfiber !== \"\" &&\n      nutrition.kostfiber >= 6 &&\n      nutrition.protein !== \"\" &&\n      nutrition.salt !== \"\" &&\n      nutrition.salt <= 1.2\n    ) {\n      // If all requirements are met, display the nutrition results\n      setShowNokkelhulletResults(true);\n      // Hide any empty result messages or error messages\n      setShowEmptyResult(false);\n\n      // Check if the user selected \"energikj\" and if nutrition input lable of \"energikj\" is not empty\n      if (selectsPart === \"energikj\" && nutrition.energikj !== \"\") {\n        setEnergikj(false);\n      }\n\n      // Check if the user selected \"energikcal\" and if nutrition input lable of \"energikcal\" is not empty\n      if (selectsPart === \"energikcal\" && nutrition.energikcal !== \"\") {\n        setEnergikcal(false);\n      }\n      // Reset all input validation errors\n\n      setMettede(false);\n      setFett(false);\n      setFettNull(false);\n      setProtein(false);\n      setKarbohydrat(false);\n      setKarbohydratNull(false);\n      setHvoravSukkerarter(false);\n      setKostfiber(false);\n      setKostfiberNull(false);\n      setSalt(false);\n      setSaltNull(false);\n      // If the user has not selected any nutrients, set errors accordingly\n      // Check each nutrition value to see if it is missing or negative\n      // show input validation errors if any input is missing or negative.\n    } else {\n      if (selectsPart === \"energikj\") {\n        console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n        if (nutrition.energikj === \"\" || nutrition.energikj < 0) {\n          console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n          setEnergikj(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikj(false);\n        }\n      }\n\n      if (selectsPart === \"energikcal\") {\n        console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n        if (nutrition.energikcal === \"\" || nutrition.energikcal < 0) {\n          console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n          setEnergikcal(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikcal(false);\n        }\n      }\n\n      // repeat for each nutrition value...\n      if (nutrition.fett === \"\" || nutrition.fett < 0) {\n        setFettNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setFettNull(false);\n      }\n      if (nutrition.fett > 7) {\n        setFett(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setFett(false);\n      }\n\n      if (nutrition.mettede === \"\" || nutrition.mettede < 0) {\n        setMettede(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setMettede(false);\n      }\n\n      if (nutrition.karbohydrat === \"\" || nutrition.karbohydrat < 0) {\n        setKarbohydratNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKarbohydratNull(false);\n      }\n      if (nutrition.karbohydrat > 5) {\n        setKarbohydrat(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setKarbohydrat(false);\n      }\n\n      if (\n        nutrition.hvoravSukkerarter === \"\" ||\n        nutrition.hvoravSukkerarter < 0\n      ) {\n        setHvoravSukkerarter(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setHvoravSukkerarter(false);\n      }\n\n      if (nutrition.kostfiber === \"\" || nutrition.kostfiber < 0) {\n        setKostfiberNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKostfiberNull(false);\n      }\n      if (nutrition.kostfiber < 6) {\n        setKostfiber(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setKostfiber(false);\n      }\n\n      if (nutrition.protein === \"\" || nutrition.protein < 0) {\n        setProtein(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setProtein(false);\n      }\n\n      if (nutrition.salt === \"\" || nutrition.salt < 0) {\n        setSaltNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setSaltNull(false);\n      }\n      if (nutrition.salt > 1.2) {\n        setSalt(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setSalt(false);\n      }\n    }\n\n    // Check for the \"LOW SUGARS\" claim\n    if (foodType === \"solid\" && parseFloat(nutrition.karbohydrat) <= 5) {\n      setLowSugars(true);\n    } else if (\n      foodType === \"liquid\" &&\n      parseFloat(nutrition.karbohydrat) <= 2.5\n    ) {\n      setLowSugars(true);\n    } else {\n      setLowSugars(false);\n    }\n\n    // Check the condition for the \"WITH NO ADDED SUGARS\" nutrition claim\n    if (nutrition.hvoravSukkerarter === \"0\" && nutrition.karbohydrat > 0) {\n      setWithNoAddedSugars(true);\n    } else {\n      setWithNoAddedSugars(false);\n    }\n  };\n\n  // create an array of energy units to select from\n  const selectUnit = [\n    {\n      value: \"energikj\",\n      label: \"(kj)\",\n    },\n    {\n      value: \"energikcal\",\n      label: \"(kcal)\",\n    },\n  ];\n\n  // Declare a state variable for the select dropdown.\n  const [selectsPart, setSelectPart] = useState(\"\");\n\n  // A function to handle changes to the select dropdown energy unit\n  const handlerPart = (event) => {\n    const inputVal = document.getElementsByName(event.value);\n    console.log(\"handlerPart ===\", event, nutrition, inputVal);\n    setSelectPart(event.value);\n  };\n\n  //create an array of food types to select from\n  const foodTypes = [\n    {\n      value: \"solid\",\n      label: \"Fast form\",\n    },\n    {\n      value: \"liquid\",\n      label: \"Flytende form\",\n    },\n  ];\n\n  return (\n    <div className=\"row\">\n      {/* This div creates a column layout for the left side of the table */}\n      <div className=\"col-md-6\">\n        {/* the selector (dropdown menu) for choosing the food type. */}\n        <div className=\"form-group\">\n          <label htmlFor=\"foodType\">Velg type matvare:</label>\n          <Select\n            className=\"form-control\"\n            id=\"foodType\"\n            options={foodTypes}\n            onChange={(e) => setFoodType(e.value)} // update the onFoodTypeChange function to directly set the food type state\n            placeholder=\"Velg type matvare\"\n          />\n        </div>\n        <h5>\n          Næringsinnhold per 100{\" \"}\n          {foodType === \"solid\" ? \"g\" : foodType === \"liquid\" ? \"ml\" : \"g/ml\"}\n        </h5>\n\n        {/* This div adds a light background color to the table */}\n        <div className=\"bg-light\">\n          {/* This table shows the nutritional information */}\n          <table className=\"table table-striped\">\n            {/* The table header */}\n            <thead>\n              <tr>\n                <th scope=\"col\" className=\"table-font\">\n                  Energi eller næringsstoff\n                </th>\n                <th scope=\"col\" className=\"table-font\">\n                  Mengde\n                </th>\n              </tr>\n            </thead>\n\n            {/* The table body */}\n            <tbody>\n              {/* This row shows the energy content */}\n              <tr className={(energikj, energikcal ? \"alert-box\" : null)}>\n                <th scope=\"row\" className=\"table-font\">\n                  {/* An icon with a tooltip to indicate missing values in energy parameters */}\n                  {energikj && energikcal ? (\n                    <Tooltip\n                      title=\"Mangler verdi i energi (kJ/Kcal) parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  {/* This div displays the energy label and unit */}\n                  <div className=\"row\">\n                    <div className=\"col-md-3\">\n                      <label for=\"energiunit\" class=\"form-label\">\n                        Energi\n                      </label>\n                    </div>\n                    {/* A dropdown menu for selecting the energy unit */}\n                    <div className=\"col-md-6\">\n                      <Select\n                        placeholder={<div>Velg enhet</div>}\n                        className=\"form-select-md mb-3\"\n                        options={selectUnit}\n                        onChange={(e) => handlerPart(e)}\n                      />\n                    </div>\n                  </div>\n                </th>\n                {/* An input field for entering the energy value */}\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name={selectsPart}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* Additional rows for other nutrient selections */}\n              {/* This row shows the fat content */}\n              <tr\n                className={\n                  fett ? \"alert-box\" : null || fettNull ? \"alert-box\" : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {fett ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden fett. Mengden på fett må være lavere enn eller lik 7 g/ 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {fettNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i fett parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Fett (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"fett\"\n                    value={nutrition.fett}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the saturated fat content */}\n              <tr className={mettede ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {mettede ? (\n                    <Tooltip\n                      title=\"Mangler verdi i mettede fettsyrer parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Mettede fettsyrer (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"mettede\"\n                    value={nutrition.mettede}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the carbohydrate content */}\n              <tr\n                className={\n                  karbohydrat\n                    ? \"alert-box\"\n                    : null || karbohydratNull\n                    ? \"alert-box\"\n                    : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {karbohydrat ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden sukkerarter. Mengden på sukkerarter må være lavere enn eller lik 5 g / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {karbohydratNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i karbohydrat parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Karbohydrat (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"karbohydrat\"\n                    value={nutrition.karbohydrat}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows hvorav sukkerarter content */}\n              <tr className={hvoravSukkerarter ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {hvoravSukkerarter ? (\n                    <Tooltip\n                      title=\"Mangler verdi i hvorav sukkerarter parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Hvorav tilsatte sukkerarter (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"hvoravSukkerarter\"\n                    value={nutrition.hvoravSukkerarter}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows kostfiber content */}\n              <tr\n                className={\n                  kostfiber\n                    ? \"alert-box\"\n                    : null || kostfiberNull\n                    ? \"alert-box\"\n                    : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {kostfiber ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden kostfiber. Mengden på kostfiber må være høyst enn eller lik 6 g / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {kostfiberNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i kostfiber parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Kostfiber (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"kostfiber\"\n                    value={nutrition.kostfiber}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the protein content */}\n              <tr className={protein ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {protein ? (\n                    <Tooltip\n                      title=\"Mangler verdi i protein parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Protein (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"protein\"\n                    value={nutrition.protein}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows salt content */}\n              <tr\n                className={\n                  salt ? \"alert-box\" : null || saltNull ? \"alert-box\" : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {salt ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden salt. Mengden på salt må være lavere enn eller lik 1.2 g/ 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {saltNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i salt parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Salt (g)\n                </th>\n                <td colSpan=\"2\">\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"salt\"\n                    value={nutrition.salt}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n        {/* Button that submits the form and calls the onClick function */}\n        <div className=\"col-12 button-div\">\n          <button\n            type=\"submit\"\n            className=\"btn btn-primary btn-lg button-search\"\n            onClick={onClick}\n          >\n            Beregn\n          </button>\n        </div>\n      </div>\n\n      <div className=\"col-md-6\">\n        {/* positive results nøkkelhullet container\" */}\n        {showNokkelhulletResults ? (\n          <div className=\"container nøkkelhullet-food-result-container\">\n            {/* An image with class \"keyhole-logo\" and alt text \"keyhole logo\" */}\n            <img\n              src={keyholeLgog}\n              className=\"keyhole-logo img-fluid\"\n              alt=\"keyhole logo\"\n            />\n            {/* A heading with text \"Nøkkelhullet\" */}\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir Nøkkelhullet. </p>\n              </div>\n              <div className=\"col-md-2\">\n                {/* FontAwesome icon with event listener to show the \"Nøkkelhullet\" information section */}\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  {/* A paragraph with a link to Lovdata's \"Forskrift om frivillig merking a nœringsmidler med Nokkellhullet\" */}\n                  <p>\n                    Les mer om hvilke krav det stilles for merking av\n                    Nokkellhullet på Lovdatas \"Forskrift om frivillig merking a\n                    nœringsmidler med Nokkellhullet\":\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  {/* FontAwesome icon with event listener to hide the \"Nøkkelhullet\" information section */}\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        ) : null}\n        {/*Negative results nøkkelhullet container\" */}\n        {showNokkelhulletResults === false && (\n          <div className=\"container nøkkelhullet-food-negResult-container\">\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir ikke Nøkkelhullet.</p>\n                {showEmptyResult ? (\n                  <p>** Obligatoriske næringsverdier kan ikke være tomme.</p>\n                ) : null}\n\n                {fett ? <p>** Fett verdien kan være høyst 7 g/100 g.</p> : null}\n\n                {karbohydrat ? (\n                  <p>\n                    ** Tilsatte sukkerarter verdien kan være høyst 5 g/100 g.\n                  </p>\n                ) : null}\n                {kostfiber ? (\n                  <p>** Kostfiber verdien kan være minst 6 g/100 g.</p>\n                ) : null}\n\n                {salt ? (\n                  <p>** Salt verdien kan være høyst 1.2 g/100 g.</p>\n                ) : null}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om frivillig merking av næringsmidler med Nøkkelhullet:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for ernæringspåstander if there are all true results */}\n        {buttonClicked && (\n          <div\n            className={\n              lowSugars && withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-all\"\n                : !lowSugars && !withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-none\"\n                : \"container ernæringspåstander-food-result-container-some\"\n            }\n          >\n            <h5>Ernæringspåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                {/* Low sugars */}\n                {lowSugars ? (\n                  <div>\n                    <p>** Lavt sukkerinnhold:</p>\n                    <p>\n                      Dette produktet inneholder høyst 5 g sukkerarter per 100 g\n                      for næringsmidler i fast form, eller høyst 2,5 g\n                      sukkerarter per 100 ml for næringsmidler i flytende form\n                      og oppfyller kravet for \"Lavt sukkerinnhold\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Lavt sukkerinnhold\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        For faste næringsmidler, sukkerinnholdet må være høyst 5\n                        g per 100 g.\n                      </li>\n                      <li>\n                        For flytende næringsmidler, sukkerinnholdet må være\n                        høyst 2,5 g per 100 ml.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n\n                {/* No added sugars */}\n                {withNoAddedSugars ? (\n                  <div>\n                    <p>** Uten tilsatt sukker:</p>\n                    <p>\n                      Dette produktet er ikke tilsatt monosakkarider,\n                      disakkarider eller andre næringsmidler på grunn av deres\n                      søtende egenskaper og oppfyller kravet for \"Uten tilsatt\n                      sukker\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Uten tilsatt sukker\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        Produktet må ikke være tilsatt monosakkarider,\n                        disakkarider eller andre næringsmidler på grunn av deres\n                        søtende egenskaper.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"ernaerings\")}\n                />\n              </div>\n            </div>\n            {infoErnaerings ? (\n              // Information section for \"Ernæringspåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"ernaerings\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for Helsepåstander results  */}\n        {showHelsepåstander && (\n          <div\n            className=\"container helsepåstander-food-result-container\"\n            style={{ background: \"#f2f0b5\" }}\n          >\n            <h5>Helsepåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Under utvikling. </p>\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"helsepåstander\")}\n                />\n              </div>\n            </div>\n            {infoHelsepåstander ? (\n              // Information section for \"Helsepåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"helsepåstander\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"15px\" }}></div>\n        {/* conditional rendering for the buttons using showButtons state */}\n        {showButtons && (\n          <div className=\"d-flex justify-content-between\">\n            {/* Save button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-save\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Lagre produkt\n            </button>\n\n            {/* Share button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-share\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Del produkt\n            </button>\n\n            {/* Add a new product button */}\n            <button\n              className=\"btn btn-primary\"\n              onClick={() => window.location.reload()}\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-plus\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Legg til et nytt produkt\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Kategori8b;\n","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Kategori7.js",["380","381","382","383"],[],"import React from \"react\";\nimport { useState, useEffect } from \"react\"; // import the useState and useeffect hook.\nimport { faCircleExclamation } from \"@fortawesome/free-solid-svg-icons\"; // import an icon.\nimport { faBan } from \"@fortawesome/free-solid-svg-icons\";\nimport { faSave, faShare, faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"; // import FontAwesomeIcon component.\nimport Tooltip from \"@mui/material/Tooltip\"; // import Tooltip component.\nimport keyholeLgog from \"./circle-keyhole-logo.png\"; // import an image\nimport { faCircleInfo } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport { faXmarkCircle } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport Select from \"react-select\"; // import Select component\n\nconst Kategori7 = () => {\n  // State variables for showing results and empty result message\n  const [showNokkelhulletResults, setShowNokkelhulletResults] = useState(null);\n  const [showErnaeringsResults, setShowErnaeringsResults] = useState(null);\n  const [showHelsepåstander, setShowHelsepåstander] = useState(null);\n  const [showEmptyResult, setShowEmptyResult] = useState(\"\"); // initialize state variable for showing empty result message.\n\n  //state variable to store the user's food type selection (solid or liquid) and the low sugars claim result\n  const [foodType, setFoodType] = useState(\"\");\n  const [lowSugars, setLowSugars] = useState(null);\n\n  //state variable to track whether the product meets the WITH NO ADDED SUGARS claim or not\n  const [withNoAddedSugars, setWithNoAddedSugars] = useState(false);\n\n  // State variable for tracking if the button is clicked\n  const [buttonClicked, setButtonClicked] = useState(false);\n\n  // useEffect hook for checking the condition for the \"WITH NO ADDED SUGARS\" claim when button is clicked\n  useEffect(() => {\n    if (buttonClicked) {\n      if (withNoAddedSugars) {\n        setShowErnaeringsResults(true);\n      } else {\n        setShowErnaeringsResults(false);\n      }\n    }\n  }, [withNoAddedSugars, buttonClicked]);\n\n  //state for controlling the buttons' visibility\n  const [showButtons, setShowButtons] = useState(false);\n\n  // State variables to control the visibility of the information sections\n  const [infoNokkelhullet, setInfoNokkelhullet] = useState(false);\n  const [infoErnaerings, setInfoErnaerings] = useState(false);\n  const [infoHelsepåstander, setInfoHelsepåstander] = useState(false);\n\n  // Function to show an information section based on the container parameter\n  const onClickInfo = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(true);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(true);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(true);\n    }\n  };\n\n  // Function to hide an information section based on the container parameter\n  const onClickClose = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(false);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(false);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(false);\n    }\n  };\n\n  // State variables for handling input fields and validation errors\n  const [energikj, setEnergikj] = useState(false);\n  const [energikcal, setEnergikcal] = useState(false);\n\n  const [fett, setFett] = useState(false);\n  const [fettNull, setFettNull] = useState(false);\n  const [mettede, setMettede] = useState(false);\n  const [karbohydrat, setKarbohydrat] = useState(false);\n  const [karbohydratNull, setKarbohydratNull] = useState(false);\n  const [hvoravSukkerarter, setHvoravSukkerarter] = useState(false);\n  const [kostfiber, setKostfiber] = useState(false);\n  const [kostfiberNull, setKostfiberNull] = useState(false);\n  const [protein, setProtein] = useState(false);\n  const [salt, setSalt] = useState(false);\n  const [saltNull, setSaltNull] = useState(false);\n\n  // State variable for storing nutrition information entered by user\n  const [nutrition, setNutrition] = useState({\n    energikj: \"\",\n    energikcal: \"\",\n    fett: \"\",\n    mettede: \"\",\n    karbohydrat: \"\",\n    hvoravSukkerarter: \"\",\n    kostfiber: \"\",\n    protein: \"\",\n    salt: \"\",\n  });\n\n  // Handler for updating nutrition state/state variable based on input field changes/input values\n  const changeHandle = (event) => {\n    console.log(\"changeHandle ===\", event.target, event.target.value);\n    setNutrition({\n      ...nutrition,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  // define function to handle form submission\n  const onClick = (e) => {\n    e.preventDefault();\n    setButtonClicked(true);\n    setShowHelsepåstander(true);\n    setShowButtons(true);\n\n    console.log(\"onclick ===\", selectsPart, nutrition);\n\n    // Check if all required fields are filled out and within valid ranges\n    // The if statement checks if all required inputs are non-empty and meet the nutritional requirements\n    if (\n      nutrition.fett !== \"\" &&\n      nutrition.fett <= 4 &&\n      nutrition.mettede !== \"\" &&\n      nutrition.karbohydrat !== \"\" &&\n      nutrition.karbohydrat <= 5 &&\n      nutrition.hvoravSukkerarter !== \"\" &&\n      nutrition.kostfiber !== \"\" &&\n      nutrition.kostfiber >= 1 &&\n      nutrition.protein !== \"\" &&\n      nutrition.salt !== \"\" &&\n      nutrition.salt <= 0.3\n    ) {\n      // If all requirements are met, display the nutrition results\n      setShowNokkelhulletResults(true);\n      // Hide any empty result messages or error messages\n      setShowEmptyResult(false);\n\n      // Check if the user selected \"energikj\" and if nutrition input lable of \"energikj\" is not empty\n      if (selectsPart === \"energikj\" && nutrition.energikj !== \"\") {\n        setEnergikj(false);\n      }\n\n      // Check if the user selected \"energikcal\" and if nutrition input lable of \"energikcal\" is not empty\n      if (selectsPart === \"energikcal\" && nutrition.energikcal !== \"\") {\n        setEnergikcal(false);\n      }\n      // Reset all input validation errors\n      setFett(false);\n      setFettNull(false);\n      setMettede(false);\n      setKarbohydrat(false);\n      setKarbohydratNull(false);\n      setHvoravSukkerarter(false);\n      setKostfiber(false);\n      setKostfiberNull(false);\n      setProtein(false);\n      setSalt(false);\n      setSaltNull(false);\n      // If the user has not selected any nutrients, set errors accordingly\n      // Check each nutrition value to see if it is missing or negative\n      // show input validation errors if any input is missing or negative.\n    } else {\n      if (selectsPart === \"energikj\") {\n        console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n        if (nutrition.energikj === \"\" || nutrition.energikj < 0) {\n          console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n          setEnergikj(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikj(false);\n        }\n      }\n\n      if (selectsPart === \"energikcal\") {\n        console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n        if (nutrition.energikcal === \"\" || nutrition.energikcal < 0) {\n          console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n          setEnergikcal(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikcal(false);\n        }\n      }\n\n      // repeat for each nutrition value...\n      if (nutrition.fett === \"\" || nutrition.fett < 0) {\n        setFettNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setFettNull(false);\n      }\n      if (nutrition.fett > 4) {\n        setFett(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setFett(false);\n      }\n\n      if (nutrition.mettede === \"\" || nutrition.mettede < 0) {\n        setMettede(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setMettede(false);\n      }\n\n      if (nutrition.karbohydrat === \"\" || nutrition.karbohydrat < 0) {\n        setKarbohydratNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKarbohydratNull(false);\n      }\n      if (nutrition.karbohydrat > 5) {\n        setKarbohydrat(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setKarbohydrat(false);\n      }\n\n      if (\n        nutrition.hvoravSukkerarter === \"\" ||\n        nutrition.hvoravSukkerarter < 0\n      ) {\n        setHvoravSukkerarter(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setHvoravSukkerarter(false);\n      }\n\n      if (nutrition.kostfiber === \"\" || nutrition.kostfiber < 0) {\n        setKostfiberNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKostfiberNull(false);\n      }\n      if (nutrition.kostfiber < 1) {\n        setKostfiber(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setKostfiber(false);\n      }\n\n      if (nutrition.protein === \"\" || nutrition.protein < 0) {\n        setProtein(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setProtein(false);\n      }\n\n      if (nutrition.salt === \"\" || nutrition.salt < 0) {\n        setSaltNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setSaltNull(false);\n      }\n      if (nutrition.salt > 0.3) {\n        setSalt(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setSalt(false);\n      }\n    }\n\n    // Check for the \"LOW SUGARS\" claim\n    if (foodType === \"solid\" && parseFloat(nutrition.karbohydrat) <= 5) {\n      setLowSugars(true);\n    } else if (\n      foodType === \"liquid\" &&\n      parseFloat(nutrition.karbohydrat) <= 2.5\n    ) {\n      setLowSugars(true);\n    } else {\n      setLowSugars(false);\n    }\n\n    // Check the condition for the \"WITH NO ADDED SUGARS\" nutrition claim\n    if (nutrition.hvoravSukkerarter === \"0\" && nutrition.karbohydrat > 0) {\n      setWithNoAddedSugars(true);\n    } else {\n      setWithNoAddedSugars(false);\n    }\n  };\n\n  // create an array of energy units to select from\n  const selectUnit = [\n    {\n      value: \"energikj\",\n      label: \"(kj)\",\n    },\n    {\n      value: \"energikcal\",\n      label: \"(kcal)\",\n    },\n  ];\n\n  // Declare a state variable for the select dropdown.\n  const [selectsPart, setSelectPart] = useState(\"\");\n\n  // A function to handle changes to the select dropdown energy unit\n  const handlerPart = (event) => {\n    const inputVal = document.getElementsByName(event.value);\n    console.log(\"handlerPart ===\", event, nutrition, inputVal);\n    setSelectPart(event.value);\n  };\n\n  //create an array of food types to select from\n  const foodTypes = [\n    {\n      value: \"solid\",\n      label: \"Fast form\",\n    },\n    {\n      value: \"liquid\",\n      label: \"Flytende form\",\n    },\n  ];\n\n  return (\n    <div className=\"row\">\n      {/* This div creates a column layout for the left side of the table */}\n      <div className=\"col-md-6\">\n        {/* the selector (dropdown menu) for choosing the food type. */}\n        <div className=\"form-group\">\n          <label htmlFor=\"foodType\">Velg type matvare:</label>\n          <Select\n            className=\"form-control\"\n            id=\"foodType\"\n            options={foodTypes}\n            onChange={(e) => setFoodType(e.value)} // update the onFoodTypeChange function to directly set the food type state\n            placeholder=\"Velg type matvare\"\n          />\n        </div>\n        <h5>\n          Næringsinnhold per 100{\" \"}\n          {foodType === \"solid\" ? \"g\" : foodType === \"liquid\" ? \"ml\" : \"g/ml\"}\n        </h5>\n\n        {/* This div adds a light background color to the table */}\n        <div className=\"bg-light\">\n          {/* This table shows the nutritional information */}\n          <table className=\"table table-striped\">\n            {/* The table header */}\n            <thead>\n              <tr>\n                <th scope=\"col\" className=\"table-font\">\n                  Energi eller næringsstoff\n                </th>\n                <th scope=\"col\" className=\"table-font\">\n                  Mengde\n                </th>\n              </tr>\n            </thead>\n\n            {/* The table body */}\n            <tbody>\n              {/* This row shows the energy content */}\n              <tr className={(energikj, energikcal ? \"alert-box\" : null)}>\n                <th scope=\"row\" className=\"table-font\">\n                  {/* An icon with a tooltip to indicate missing values in energy parameters */}\n                  {energikj && energikcal ? (\n                    <Tooltip\n                      title=\"Mangler verdi i energi (kJ/Kcal) parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  {/* This div displays the energy label and unit */}\n                  <div className=\"row\">\n                    <div className=\"col-md-3\">\n                      <label for=\"energiunit\" class=\"form-label\">\n                        Energi\n                      </label>\n                    </div>\n                    {/* A dropdown menu for selecting the energy unit */}\n                    <div className=\"col-md-6\">\n                      <Select\n                        placeholder={<div>Velg enhet</div>}\n                        className=\"form-select-md mb-3\"\n                        options={selectUnit}\n                        onChange={(e) => handlerPart(e)}\n                      />\n                    </div>\n                  </div>\n                </th>\n                {/* An input field for entering the energy value */}\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name={selectsPart}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n              {/* Additional rows for other nutrient selections */}\n              {/* This row shows the fat content */}\n              <tr\n                className={\n                  fett ? \"alert-box\" : null || fettNull ? \"alert-box\" : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {fett ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden fett. Mengden på fett må være lavere enn eller lik 4 g/ 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {fettNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i fett parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Fett (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"fett\"\n                    value={nutrition.fett}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n              {/* This row shows the saturated fat content */}\n              <tr className={mettede ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {mettede ? (\n                    <Tooltip\n                      title=\"Mangler verdi i mettede fettsyrer parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Mettede fettsyrer (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"mettede\"\n                    value={nutrition.mettede}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the carbohydrate content */}\n              <tr\n                className={\n                  karbohydrat\n                    ? \"alert-box\"\n                    : null || karbohydratNull\n                    ? \"alert-box\"\n                    : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {karbohydrat ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden sukkerarter. Mengden på sukkerarter må være lavere enn eller lik 5 g / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {karbohydratNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i karbohydrat parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Karbohydrat (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"karbohydrat\"\n                    value={nutrition.karbohydrat}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows hvorav sukkerarter content */}\n              <tr className={hvoravSukkerarter ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {hvoravSukkerarter ? (\n                    <Tooltip\n                      title=\"Mangler verdi i hvorav sukkerarter parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Hvorav tilsatte sukkerarter (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"hvoravSukkerarter\"\n                    value={nutrition.hvoravSukkerarter}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows kostfiber content */}\n              <tr\n                className={\n                  kostfiber\n                    ? \"alert-box\"\n                    : null || kostfiberNull\n                    ? \"alert-box\"\n                    : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {kostfiber ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden kostfiber. Mengden på kostfiber må være høyst enn eller lik 1 g / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {kostfiberNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i kostfiber parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Kostfiber (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"kostfiber\"\n                    value={nutrition.kostfiber}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the protein content */}\n              <tr className={protein ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {protein ? (\n                    <Tooltip\n                      title=\"Mangler verdi i protein parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Protein (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"protein\"\n                    value={nutrition.protein}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows salt content */}\n              <tr\n                className={\n                  salt ? \"alert-box\" : null || saltNull ? \"alert-box\" : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {salt ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden salt. Mengden på salt må være lavere enn eller lik 0.3 g/ 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {saltNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i salt parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Salt (g)\n                </th>\n                <td colSpan=\"2\">\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"salt\"\n                    value={nutrition.salt}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n        {/* Button that submits the form and calls the onClick function */}\n        <div className=\"col-12 button-div\">\n          <button\n            type=\"submit\"\n            className=\"btn btn-primary btn-lg button-search\"\n            onClick={onClick}\n          >\n            Beregn\n          </button>\n        </div>\n      </div>\n\n      <div className=\"col-md-6\">\n        {/* positive results nøkkelhullet container\" */}\n        {showNokkelhulletResults ? (\n          <div className=\"container nøkkelhullet-food-result-container\">\n            {/* An image with class \"keyhole-logo\" and alt text \"keyhole logo\" */}\n            <img\n              src={keyholeLgog}\n              className=\"keyhole-logo img-fluid\"\n              alt=\"keyhole logo\"\n            />\n            {/* A heading with text \"Nøkkelhullet\" */}\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir Nøkkelhullet. </p>\n              </div>\n              <div className=\"col-md-2\">\n                {/* FontAwesome icon with event listener to show the \"Nøkkelhullet\" information section */}\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  {/* A paragraph with a link to Lovdata's \"Forskrift om frivillig merking a nœringsmidler med Nokkellhullet\" */}\n                  <p>\n                    Les mer om hvilke krav det stilles for merking av\n                    Nokkellhullet på Lovdatas \"Forskrift om frivillig merking a\n                    nœringsmidler med Nokkellhullet\":\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  {/* FontAwesome icon with event listener to hide the \"Nøkkelhullet\" information section */}\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        ) : null}\n        {/*Negative results nøkkelhullet container\" */}\n        {showNokkelhulletResults === false && (\n          <div className=\"container nøkkelhullet-food-negResult-container\">\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir ikke Nøkkelhullet.</p>\n                {showEmptyResult ? (\n                  <p>** Obligatoriske næringsverdier kan ikke være tomme.</p>\n                ) : null}\n\n                {fett ? <p>** Fett verdien kan være høyst 4 g/100 g.</p> : null}\n\n                {karbohydrat ? (\n                  <p>\n                    ** Tilsatte sukkerarter verdien kan være høyst 5 g/100 g.\n                  </p>\n                ) : null}\n\n                {kostfiber ? (\n                  <p>** Kostfiber verdien kan være minst 1 g/100 g.</p>\n                ) : null}\n\n                {salt ? (\n                  <p>** Salt verdien kan være høyst 0.3 g/100 g.</p>\n                ) : null}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om frivillig merking av næringsmidler med Nøkkelhullet:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for ernæringspåstander if there are all true results */}\n        {buttonClicked && (\n          <div\n            className={\n              lowSugars && withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-all\"\n                : !lowSugars && !withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-none\"\n                : \"container ernæringspåstander-food-result-container-some\"\n            }\n          >\n            <h5>Ernæringspåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                {/* Low sugars */}\n                {lowSugars ? (\n                  <div>\n                    <p>** Lavt sukkerinnhold:</p>\n                    <p>\n                      Dette produktet inneholder høyst 5 g sukkerarter per 100 g\n                      for næringsmidler i fast form, eller høyst 2,5 g\n                      sukkerarter per 100 ml for næringsmidler i flytende form\n                      og oppfyller kravet for \"Lavt sukkerinnhold\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Lavt sukkerinnhold\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        For faste næringsmidler, sukkerinnholdet må være høyst 5\n                        g per 100 g.\n                      </li>\n                      <li>\n                        For flytende næringsmidler, sukkerinnholdet må være\n                        høyst 2,5 g per 100 ml.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n\n                {/* No added sugars */}\n                {withNoAddedSugars ? (\n                  <div>\n                    <p>** Uten tilsatt sukker:</p>\n                    <p>\n                      Dette produktet er ikke tilsatt monosakkarider,\n                      disakkarider eller andre næringsmidler på grunn av deres\n                      søtende egenskaper og oppfyller kravet for \"Uten tilsatt\n                      sukker\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Uten tilsatt sukker\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        Produktet må ikke være tilsatt monosakkarider,\n                        disakkarider eller andre næringsmidler på grunn av deres\n                        søtende egenskaper.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"ernaerings\")}\n                />\n              </div>\n            </div>\n            {infoErnaerings ? (\n              // Information section for \"Ernæringspåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"ernaerings\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for Helsepåstander results  */}\n        {showHelsepåstander && (\n          <div\n            className=\"container helsepåstander-food-result-container\"\n            style={{ background: \"#f2f0b5\" }}\n          >\n            <h5>Helsepåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Under utvikling. </p>\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"helsepåstander\")}\n                />\n              </div>\n            </div>\n            {infoHelsepåstander ? (\n              // Information section for \"Helsepåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"helsepåstander\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"15px\" }}></div>\n        {/* conditional rendering for the buttons using showButtons state */}\n        {showButtons && (\n          <div className=\"d-flex justify-content-between\">\n            {/* Save button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-save\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Lagre produkt\n            </button>\n\n            {/* Share button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-share\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Del produkt\n            </button>\n\n            {/* Add a new product button */}\n            <button\n              className=\"btn btn-primary\"\n              onClick={() => window.location.reload()}\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-plus\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Legg til et nytt produkt\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Kategori7;\n","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Kategori6.js",["384","385","386","387"],[],"import React from \"react\";\nimport { useState, useEffect } from \"react\"; // import the useState and useeffect hook.\nimport { faCircleExclamation } from \"@fortawesome/free-solid-svg-icons\"; // import an icon.\nimport { faBan } from \"@fortawesome/free-solid-svg-icons\";\nimport { faSave, faShare, faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"; // import FontAwesomeIcon component.\nimport Tooltip from \"@mui/material/Tooltip\"; // import Tooltip component.\nimport keyholeLgog from \"./circle-keyhole-logo.png\"; // import an image\nimport { faCircleInfo } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport { faXmarkCircle } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport Select from \"react-select\"; // import Select component\n\n// This component is called Kategori6\nconst Kategori6 = () => {\n  // State variables for showing results and empty result message\n\n  const [showNokkelhulletResults, setShowNokkelhulletResults] = useState(null);\n  const [showErnaeringsResults, setShowErnaeringsResults] = useState(null);\n  const [showHelsepåstander, setShowHelsepåstander] = useState(null);\n  const [showEmptyResult, setShowEmptyResult] = useState(\"\"); // initialize state variable for showing empty result message.\n\n  //state variable to store the user's food type selection (solid or liquid) and the low sugars claim result\n  const [foodType, setFoodType] = useState(\"\");\n  const [lowSugars, setLowSugars] = useState(null);\n\n  //state variable to track whether the product meets the WITH NO ADDED SUGARS claim or not\n  const [withNoAddedSugars, setWithNoAddedSugars] = useState(false);\n\n  // State variable for tracking if the button is clicked\n  const [buttonClicked, setButtonClicked] = useState(false);\n\n  // useEffect hook for checking the condition for the \"WITH NO ADDED SUGARS\" claim when button is clicked\n  useEffect(() => {\n    if (buttonClicked) {\n      if (withNoAddedSugars) {\n        setShowErnaeringsResults(true);\n      } else {\n        setShowErnaeringsResults(false);\n      }\n    }\n  }, [withNoAddedSugars, buttonClicked]);\n\n  //state for controlling the buttons' visibility\n  const [showButtons, setShowButtons] = useState(false);\n\n  // State variables to control the visibility of the information sections\n  const [infoNokkelhullet, setInfoNokkelhullet] = useState(false);\n  const [infoErnaerings, setInfoErnaerings] = useState(false);\n  const [infoHelsepåstander, setInfoHelsepåstander] = useState(false);\n\n  // Function to show an information section based on the container parameter\n  const onClickInfo = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(true);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(true);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(true);\n    }\n  };\n\n  // Function to hide an information section based on the container parameter\n  const onClickClose = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(false);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(false);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(false);\n    }\n  };\n\n  // State variables for handling input fields and validation errors\n  const [energikj, setEnergikj] = useState(false);\n  const [energikcal, setEnergikcal] = useState(false);\n\n  const [fett, setFett] = useState(false);\n  const [fettNull, setFettNull] = useState(false);\n  const [mettede, setMettede] = useState(false);\n  const [karbohydrat, setKarbohydrat] = useState(false);\n  const [karbohydratNull, setKarbohydratNull] = useState(false);\n  const [hvoravSukkerarter, setHvoravSukkerarter] = useState(false);\n  const [hvoravSukkerarterNull, setHvoravSukkerarterNull] = useState(false);\n  const [kostfiber, setKostfiber] = useState(false);\n  const [kostfiberNull, setKostfiberNull] = useState(false);\n  const [protein, setProtein] = useState(false);\n  const [salt, setSalt] = useState(false);\n  const [saltNull, setSaltNull] = useState(false);\n\n  // State variable for storing nutrition information entered by user\n  const [nutrition, setNutrition] = useState({\n    energikj: \"\",\n    energikcal: \"\",\n    fett: \"\",\n    mettede: \"\",\n    karbohydrat: \"\",\n    hvoravSukkerarter: \"\",\n    kostfiber: \"\",\n    protein: \"\",\n    salt: \"\",\n  });\n\n  // Handler for updating nutrition state/state variable based on input field changes/input values\n  const changeHandle = (event) => {\n    console.log(\"changeHandle ===\", event.target, event.target.value);\n    setNutrition({\n      ...nutrition,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  // define function to handle form submission\n  const onClick = (e) => {\n    e.preventDefault();\n    setButtonClicked(true);\n    setShowHelsepåstander(true);\n    setShowButtons(true);\n\n    console.log(\"onclick ===\", selectsPart, nutrition);\n\n    // Check if all required fields are filled out and within valid ranges\n    // The if statement checks if all required inputs are non-empty and meet the nutritional requirements\n    if (\n      nutrition.fett !== \"\" &&\n      nutrition.fett <= 8 &&\n      nutrition.mettede !== \"\" &&\n      nutrition.karbohydrat !== \"\" &&\n      nutrition.karbohydrat <= 13 &&\n      nutrition.hvoravSukkerarter !== \"\" &&\n      nutrition.hvoravSukkerarter <= 9 &&\n      nutrition.kostfiber !== \"\" &&\n      nutrition.kostfiber >= 6 &&\n      nutrition.protein !== \"\" &&\n      nutrition.salt !== \"\" &&\n      nutrition.salt <= 1\n    ) {\n      // If all requirements are met, display the nutrition results\n      setShowNokkelhulletResults(true);\n      // Hide any empty result messages or error messages\n      setShowEmptyResult(false);\n\n      // Check if the user selected \"energikj\" and if nutrition input lable of \"energikj\" is not empty\n      if (selectsPart === \"energikj\" && nutrition.energikj !== \"\") {\n        setEnergikj(false);\n      }\n\n      // Check if the user selected \"energikcal\" and if nutrition input lable of \"energikcal\" is not empty\n      if (selectsPart === \"energikcal\" && nutrition.energikcal !== \"\") {\n        setEnergikcal(false);\n      }\n      // Reset all input validation errors\n      setFett(false);\n      setFettNull(false);\n      setMettede(false);\n      setKarbohydrat(false);\n      setKarbohydratNull(false);\n      setHvoravSukkerarter(false);\n      setHvoravSukkerarterNull(false);\n      setKostfiber(false);\n      setKostfiberNull(false);\n      setProtein(false);\n      setSalt(false);\n      setSaltNull(false);\n\n      // If the user has not selected any nutrients, set errors accordingly\n      // Check each nutrition value to see if it is missing or negative\n      // show input validation errors if any input is missing or negative.\n    } else {\n      if (selectsPart === \"energikj\") {\n        console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n        if (nutrition.energikj === \"\" || nutrition.energikj < 0) {\n          console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n          setEnergikj(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikj(false);\n        }\n      }\n\n      if (selectsPart === \"energikcal\") {\n        console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n        if (nutrition.energikcal === \"\" || nutrition.energikcal < 0) {\n          console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n          setEnergikcal(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikcal(false);\n        }\n      }\n\n      // repeat for each nutrition value...\n      if (nutrition.fett === \"\" || nutrition.fett < 0) {\n        setFettNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setFettNull(false);\n      }\n      if (nutrition.fett > 8) {\n        setFett(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setFett(false);\n      }\n\n      if (nutrition.mettede === \"\" || nutrition.mettede < 0) {\n        setMettede(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setMettede(false);\n      }\n\n      if (nutrition.karbohydrat === \"\" || nutrition.karbohydrat < 0) {\n        setKarbohydratNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKarbohydratNull(false);\n      }\n      if (nutrition.karbohydrat > 13) {\n        setKarbohydrat(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setKarbohydrat(false);\n      }\n\n      if (\n        nutrition.hvoravSukkerarter === \"\" ||\n        nutrition.hvoravSukkerarter < 0\n      ) {\n        setHvoravSukkerarterNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setHvoravSukkerarterNull(false);\n      }\n      if (nutrition.hvoravSukkerarter > 9) {\n        setHvoravSukkerarter(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setHvoravSukkerarter(false);\n      }\n\n      if (nutrition.kostfiber === \"\" || nutrition.kostfiber < 0) {\n        setKostfiberNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKostfiberNull(false);\n      }\n      if (nutrition.kostfiber < 6) {\n        setKostfiber(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setKostfiber(false);\n      }\n\n      if (nutrition.protein === \"\" || nutrition.protein < 0) {\n        setProtein(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setProtein(false);\n      }\n\n      if (nutrition.salt === \"\" || nutrition.salt < 0) {\n        setSaltNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setSaltNull(false);\n      }\n      if (nutrition.salt > 1) {\n        setSalt(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setSalt(false);\n      }\n    }\n\n    // Check for the \"LOW SUGARS\" claim\n    if (foodType === \"solid\" && parseFloat(nutrition.karbohydrat) <= 5) {\n      setLowSugars(true);\n    } else if (\n      foodType === \"liquid\" &&\n      parseFloat(nutrition.karbohydrat) <= 2.5\n    ) {\n      setLowSugars(true);\n    } else {\n      setLowSugars(false);\n    }\n\n    // Check the condition for the \"WITH NO ADDED SUGARS\" nutrition claim\n    if (nutrition.hvoravSukkerarter === \"0\" && nutrition.karbohydrat > 0) {\n      setWithNoAddedSugars(true);\n    } else {\n      setWithNoAddedSugars(false);\n    }\n  };\n\n  // create an array of energy units to select from\n  const selectUnit = [\n    {\n      value: \"energikj\",\n      label: \"(kj)\",\n    },\n    {\n      value: \"energikcal\",\n      label: \"(kcal)\",\n    },\n  ];\n\n  // Declare a state variable for the select dropdown.\n  const [selectsPart, setSelectPart] = useState(\"\");\n\n  // A function to handle changes to the select dropdown energy unit\n  const handlerPart = (event) => {\n    const inputVal = document.getElementsByName(event.value);\n    console.log(\"handlerPart ===\", event, nutrition, inputVal);\n    setSelectPart(event.value);\n  };\n\n  //create an array of food types to select from\n  const foodTypes = [\n    {\n      value: \"solid\",\n      label: \"Fast form\",\n    },\n    {\n      value: \"liquid\",\n      label: \"Flytende form\",\n    },\n  ];\n\n  return (\n    <div className=\"row\">\n      {/* This div creates a column layout for the left side of the table */}\n      <div className=\"col-md-6\">\n        {/* the selector (dropdown menu) for choosing the food type. */}\n        <div className=\"form-group\">\n          <label htmlFor=\"foodType\">Velg type matvare:</label>\n          <Select\n            className=\"form-control\"\n            id=\"foodType\"\n            options={foodTypes}\n            onChange={(e) => setFoodType(e.value)} // update the onFoodTypeChange function to directly set the food type state\n            placeholder=\"Velg type matvare\"\n          />\n        </div>\n\n        <h5>\n          Næringsinnhold per 100{\" \"}\n          {foodType === \"solid\" ? \"g\" : foodType === \"liquid\" ? \"ml\" : \"g/ml\"}\n        </h5>\n\n        {/* This div adds a light background color to the table */}\n        <div className=\"bg-light\">\n          {/* This table shows the nutritional information */}\n          <table className=\"table table-striped\">\n            {/* The table header */}\n            <thead>\n              <tr>\n                <th scope=\"col\" className=\"table-font\">\n                  Energi eller næringsstoff\n                </th>\n                <th scope=\"col\" className=\"table-font\">\n                  Mengde\n                </th>\n              </tr>\n            </thead>\n\n            {/* The table body */}\n            <tbody>\n              {/* This row shows the energy content */}\n              <tr className={(energikj, energikcal ? \"alert-box\" : null)}>\n                <th scope=\"row\" className=\"table-font\">\n                  {/* An icon with a tooltip to indicate missing values in energy parameters */}\n                  {energikj && energikcal ? (\n                    <Tooltip\n                      title=\"Mangler verdi i energi (kJ/Kcal) parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  {/* This div displays the energy label and unit */}\n                  <div className=\"row\">\n                    <div className=\"col-md-3\">\n                      <label for=\"energiunit\" class=\"form-label\">\n                        Energi\n                      </label>\n                    </div>\n                    {/* A dropdown menu for selecting the energy unit */}\n                    <div className=\"col-md-6\">\n                      <Select\n                        placeholder={<div>Velg enhet</div>}\n                        className=\"form-select-md mb-3\"\n                        options={selectUnit}\n                        onChange={(e) => handlerPart(e)}\n                      />\n                    </div>\n                  </div>\n                </th>\n                {/* An input field for entering the energy value */}\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name={selectsPart}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* Additional rows for other nutrient selections */}\n              {/* This row shows the fat content */}\n              <tr\n                className={\n                  fett ? \"alert-box\" : null || fettNull ? \"alert-box\" : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {fett ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden fett. Mengden på fett må være lavere enn eller lik 8 g/ 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {fettNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i fett parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Fett (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"fett\"\n                    value={nutrition.fett}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the saturated fat content */}\n              <tr className={mettede ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {mettede ? (\n                    <Tooltip\n                      title=\"Mangler verdi i mettede fettsyrer parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Mettede fettsyrer (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"mettede\"\n                    value={nutrition.mettede}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the carbohydrate content */}\n              <tr\n                className={\n                  karbohydrat\n                    ? \"alert-box\"\n                    : null || karbohydratNull\n                    ? \"alert-box\"\n                    : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {karbohydrat ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden sukkerarter. Mengden på sukkerarter må være lavere enn eller lik 13 g / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {karbohydratNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i karbohydrat parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Karbohydrat (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"karbohydrat\"\n                    value={nutrition.karbohydrat}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows hvorav sukkerarter content */}\n              <tr\n                className={\n                  hvoravSukkerarter\n                    ? \"alert-box\"\n                    : null || hvoravSukkerarterNull\n                    ? \"alert-box\"\n                    : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {hvoravSukkerarter ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden hvoravSukkerarter. Mengden på hvoravSukkerarter må være lavere enn eller lik 9 g/ 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {hvoravSukkerarterNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i hvorav sukkerarter parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Hvorav tilsatte sukkerarter (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"hvoravSukkerarter\"\n                    value={nutrition.hvoravSukkerarter}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows kostfiber content */}\n              <tr\n                className={\n                  kostfiber\n                    ? \"alert-box\"\n                    : null || kostfiberNull\n                    ? \"alert-box\"\n                    : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {kostfiber ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden kostfiber. Mengden på kostfiber må være høyst enn eller lik 6 g / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {kostfiberNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i kostfiber parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Kostfiber (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"kostfiber\"\n                    value={nutrition.kostfiber}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the protein content */}\n              <tr className={protein ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {protein ? (\n                    <Tooltip\n                      title=\"Mangler verdi i protein parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Protein (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"protein\"\n                    value={nutrition.protein}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows salt content */}\n              <tr\n                className={\n                  salt ? \"alert-box\" : null || saltNull ? \"alert-box\" : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {salt ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden salt. Mengden på salt må være lavere enn eller lik 1 g/ 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {saltNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i salt parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Salt (g)\n                </th>\n                <td colSpan=\"2\">\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"salt\"\n                    value={nutrition.salt}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n\n        {/* Button that submits the form and calls the onClick function */}\n        <div className=\"col-12 button-div\">\n          <button\n            type=\"submit\"\n            className=\"btn btn-primary btn-lg button-search\"\n            onClick={onClick}\n          >\n            Beregn\n          </button>\n        </div>\n      </div>\n\n      <div className=\"col-md-6\">\n        {/* positive results nøkkelhullet container\" */}\n        {showNokkelhulletResults ? (\n          <div className=\"container nøkkelhullet-food-result-container\">\n            {/* An image with class \"keyhole-logo\" and alt text \"keyhole logo\" */}\n            <img\n              src={keyholeLgog}\n              className=\"keyhole-logo img-fluid\"\n              alt=\"keyhole logo\"\n            />\n            {/* A heading with text \"Nøkkelhullet\" */}\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir Nøkkelhullet. </p>\n              </div>\n              <div className=\"col-md-2\">\n                {/* FontAwesome icon with event listener to show the \"Nøkkelhullet\" information section */}\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  {/* A paragraph with a link to Lovdata's \"Forskrift om frivillig merking a nœringsmidler med Nokkellhullet\" */}\n                  <p>\n                    Les mer om hvilke krav det stilles for merking av\n                    Nokkellhullet på Lovdatas \"Forskrift om frivillig merking a\n                    nœringsmidler med Nokkellhullet\":\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  {/* FontAwesome icon with event listener to hide the \"Nøkkelhullet\" information section */}\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        ) : null}\n        {/*Negative results nøkkelhullet container\" */}\n        {showNokkelhulletResults === false && (\n          <div className=\"container nøkkelhullet-food-negResult-container\">\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir ikke Nøkkelhullet.</p>\n                {showEmptyResult ? (\n                  <p>** Obligatoriske næringsverdier kan ikke være tomme.</p>\n                ) : null}\n\n                {fett ? <p>** Fett verdien kan være høyst 8 g/100 g.</p> : null}\n\n                {karbohydrat ? (\n                  <p>\n                    ** Tilsatte sukkerarter verdien kan være høyst 13 g/100 g.\n                  </p>\n                ) : null}\n\n                {hvoravSukkerarter ? (\n                  <p>\n                    ** Hvorav tilsatte sukkerarter verdien kan være høyst 9\n                    g/100 g.\n                  </p>\n                ) : null}\n\n                {kostfiber ? (\n                  <p>** Kostfiber verdien kan være minst 6 g/100 g.</p>\n                ) : null}\n\n                {salt ? <p>** Salt verdien kan være høyst 1 g/100 g.</p> : null}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om frivillig merking av næringsmidler med Nøkkelhullet:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for ernæringspåstander if there are all true results */}\n        {buttonClicked && (\n          <div\n            className={\n              lowSugars && withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-all\"\n                : !lowSugars && !withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-none\"\n                : \"container ernæringspåstander-food-result-container-some\"\n            }\n          >\n            <h5>Ernæringspåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                {/* Low sugars */}\n                {lowSugars ? (\n                  <div>\n                    <p>** Lavt sukkerinnhold:</p>\n                    <p>\n                      Dette produktet inneholder høyst 5 g sukkerarter per 100 g\n                      for næringsmidler i fast form, eller høyst 2,5 g\n                      sukkerarter per 100 ml for næringsmidler i flytende form\n                      og oppfyller kravet for \"Lavt sukkerinnhold\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Lavt sukkerinnhold\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        For faste næringsmidler, sukkerinnholdet må være høyst 5\n                        g per 100 g.\n                      </li>\n                      <li>\n                        For flytende næringsmidler, sukkerinnholdet må være\n                        høyst 2,5 g per 100 ml.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n\n                {/* No added sugars */}\n                {withNoAddedSugars ? (\n                  <div>\n                    <p>** Uten tilsatt sukker:</p>\n                    <p>\n                      Dette produktet er ikke tilsatt monosakkarider,\n                      disakkarider eller andre næringsmidler på grunn av deres\n                      søtende egenskaper og oppfyller kravet for \"Uten tilsatt\n                      sukker\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Uten tilsatt sukker\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        Produktet må ikke være tilsatt monosakkarider,\n                        disakkarider eller andre næringsmidler på grunn av deres\n                        søtende egenskaper.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"ernaerings\")}\n                />\n              </div>\n            </div>\n            {infoErnaerings ? (\n              // Information section for \"Ernæringspåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"ernaerings\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for Helsepåstander results  */}\n        {showHelsepåstander && (\n          <div\n            className=\"container helsepåstander-food-result-container\"\n            style={{ background: \"#f2f0b5\" }}\n          >\n            <h5>Helsepåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Under utvikling. </p>\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"helsepåstander\")}\n                />\n              </div>\n            </div>\n            {infoHelsepåstander ? (\n              // Information section for \"Helsepåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"helsepåstander\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"15px\" }}></div>\n        {/* conditional rendering for the buttons using showButtons state */}\n        {showButtons && (\n          <div className=\"d-flex justify-content-between\">\n            {/* Save button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-save\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Lagre produkt\n            </button>\n\n            {/* Share button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-share\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Del produkt\n            </button>\n\n            {/* Add a new product button */}\n            <button\n              className=\"btn btn-primary\"\n              onClick={() => window.location.reload()}\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-plus\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Legg til et nytt produkt\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Kategori6;\n","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Kategori4.js",["388","389","390","391"],[],"import React from \"react\";\nimport { useState, useEffect } from \"react\"; // import the useState and useeffect hook.\nimport { faCircleExclamation } from \"@fortawesome/free-solid-svg-icons\"; // import an icon.\nimport { faBan } from \"@fortawesome/free-solid-svg-icons\";\nimport { faSave, faShare, faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"; // import FontAwesomeIcon component.\nimport Tooltip from \"@mui/material/Tooltip\"; // import Tooltip component.\nimport keyholeLgog from \"./circle-keyhole-logo.png\"; // import an image\nimport { faCircleInfo } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport { faXmarkCircle } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport Select from \"react-select\"; // import Select component\n\n// This component is called Kategori4\nconst Kategori4 = () => {\n  // State variables for showing results and empty result message\n\n  const [showNokkelhulletResults, setShowNokkelhulletResults] = useState(null);\n  const [showErnaeringsResults, setShowErnaeringsResults] = useState(null);\n  const [showHelsepåstander, setShowHelsepåstander] = useState(null);\n  const [showEmptyResult, setShowEmptyResult] = useState(\"\"); // initialize state variable for showing empty result message.\n\n  //state variable to store the user's food type selection (solid or liquid) and the low sugars claim result\n  const [foodType, setFoodType] = useState(\"\");\n  const [lowSugars, setLowSugars] = useState(null);\n\n  //state variable to track whether the product meets the WITH NO ADDED SUGARS claim or not\n  const [withNoAddedSugars, setWithNoAddedSugars] = useState(false);\n\n  // State variable for tracking if the button is clicked\n  const [buttonClicked, setButtonClicked] = useState(false);\n\n  // useEffect hook for checking the condition for the \"WITH NO ADDED SUGARS\" claim when button is clicked\n  useEffect(() => {\n    if (buttonClicked) {\n      if (withNoAddedSugars) {\n        setShowErnaeringsResults(true);\n      } else {\n        setShowErnaeringsResults(false);\n      }\n    }\n  }, [withNoAddedSugars, buttonClicked]);\n\n  //state for controlling the buttons' visibility\n  const [showButtons, setShowButtons] = useState(false);\n\n  // State variables to control the visibility of the information sections\n  const [infoNokkelhullet, setInfoNokkelhullet] = useState(false);\n  const [infoErnaerings, setInfoErnaerings] = useState(false);\n  const [infoHelsepåstander, setInfoHelsepåstander] = useState(false);\n\n  // Function to show an information section based on the container parameter\n  const onClickInfo = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(true);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(true);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(true);\n    }\n  };\n\n  // Function to hide an information section based on the container parameter\n  const onClickClose = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(false);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(false);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(false);\n    }\n  };\n\n  // State variables for handling input fields and validation errors\n  const [energikj, setEnergikj] = useState(false);\n  const [energikcal, setEnergikcal] = useState(false);\n\n  const [fett, setFett] = useState(false);\n  const [mettede, setMettede] = useState(false);\n  const [karbohydrat, setKarbohydrat] = useState(false);\n  const [hvoravSukkerarter, setHvoravSukkerarter] = useState(false);\n  const [kostfiber, setKostfiber] = useState(false);\n  const [kostfiberNull, setKostfiberNull] = useState(false);\n  const [protein, setProtein] = useState(false);\n  const [salt, setSalt] = useState(false);\n\n  // State variable for storing nutrition information entered by user\n  const [nutrition, setNutrition] = useState({\n    energikj: \"\",\n    energikcal: \"\",\n    fett: \"\",\n    mettede: \"\",\n    karbohydrat: \"\",\n    hvoravSukkerarter: \"\",\n    kostfiber: \"\",\n    protein: \"\",\n    salt: \"\",\n  });\n  // Handler for updating nutrition state/state variable based on input field changes/input values\n  const changeHandle = (event) => {\n    console.log(\"changeHandle ===\", event.target, event.target.value);\n    setNutrition({\n      ...nutrition,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  // define function to handle form submission\n  const onClick = (e) => {\n    e.preventDefault();\n    setButtonClicked(true);\n    setShowHelsepåstander(true);\n    setShowButtons(true);\n\n    console.log(\"onclick ===\", selectsPart, nutrition);\n\n    // Check if all required fields are filled out and within valid ranges\n    // The if statement checks if all required inputs are non-empty and meet the nutritional requirements\n    if (\n      nutrition.fett !== \"\" &&\n      nutrition.mettede !== \"\" &&\n      nutrition.karbohydrat !== \"\" &&\n      nutrition.hvoravSukkerarter !== \"\" &&\n      nutrition.kostfiber !== \"\" &&\n      nutrition.kostfiber >= 6 &&\n      nutrition.protein !== \"\" &&\n      nutrition.salt !== \"\"\n    ) {\n      // If all requirements are met, display the nutrition results\n      setShowNokkelhulletResults(true);\n      // Hide any empty result messages or error messages\n      setShowEmptyResult(false);\n\n      // Check if the user selected \"energikj\" and if nutrition input lable of \"energikj\" is not empty\n      if (selectsPart === \"energikj\" && nutrition.energikj !== \"\") {\n        setEnergikj(false);\n      }\n\n      // Check if the user selected \"energikcal\" and if nutrition input lable of \"energikcal\" is not empty\n      if (selectsPart === \"energikcal\" && nutrition.energikcal !== \"\") {\n        setEnergikcal(false);\n      }\n      // Reset all input validation errors\n      setFett(false);\n      setMettede(false);\n      setKarbohydrat(false);\n      setHvoravSukkerarter(false);\n      setKostfiber(false);\n      setKostfiberNull(false);\n      setProtein(false);\n      setSalt(false);\n\n      // If any inputs are missing or do not meet the requirements, show appropriate error messages\n    } else {\n      if (selectsPart === \"energikj\") {\n        console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n        if (nutrition.energikj === \"\" || nutrition.energikj < 0) {\n          console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n          setEnergikj(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikj(false);\n        }\n      }\n\n      if (selectsPart === \"energikcal\") {\n        console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n        if (nutrition.energikcal === \"\" || nutrition.energikcal < 0) {\n          console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n          setEnergikcal(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikcal(false);\n        }\n      }\n\n      // repeat for each nutrition value...\n      if (nutrition.fett === \"\" || nutrition.fett < 0) {\n        setFett(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setFett(false);\n      }\n\n      if (nutrition.mettede === \"\" || nutrition.mettede < 0) {\n        setMettede(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setMettede(false);\n      }\n\n      if (nutrition.karbohydrat === \"\" || nutrition.karbohydrat < 0) {\n        setKarbohydrat(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKarbohydrat(false);\n      }\n\n      if (\n        nutrition.hvoravSukkerarter === \"\" ||\n        nutrition.hvoravSukkerarter < 0\n      ) {\n        setHvoravSukkerarter(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setHvoravSukkerarter(false);\n      }\n\n      if (nutrition.kostfiber === \"\" || nutrition.kostfiber < 0) {\n        setKostfiberNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKostfiberNull(false);\n      }\n      if (nutrition.kostfiber < 6) {\n        setKostfiber(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setKostfiber(false);\n      }\n\n      if (nutrition.protein === \"\" || nutrition.protein < 0) {\n        setProtein(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setProtein(false);\n      }\n\n      if (nutrition.salt === \"\" || nutrition.salt < 0) {\n        setSalt(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setSalt(false);\n      }\n    }\n\n    // Check for the \"LOW SUGARS\" claim\n    if (foodType === \"solid\" && parseFloat(nutrition.karbohydrat) <= 5) {\n      setLowSugars(true);\n    } else if (\n      foodType === \"liquid\" &&\n      parseFloat(nutrition.karbohydrat) <= 2.5\n    ) {\n      setLowSugars(true);\n    } else {\n      setLowSugars(false);\n    }\n\n    // Check the condition for the \"WITH NO ADDED SUGARS\" nutrition claim\n    if (nutrition.hvoravSukkerarter === \"0\" && nutrition.karbohydrat > 0) {\n      setWithNoAddedSugars(true);\n    } else {\n      setWithNoAddedSugars(false);\n    }\n  };\n\n  // create an array of energy units to select from\n  const selectUnit = [\n    {\n      value: \"energikj\",\n      label: \"(kj)\",\n    },\n    {\n      value: \"energikcal\",\n      label: \"(kcal)\",\n    },\n  ];\n\n  // Declare a state variable for the select dropdown.\n  const [selectsPart, setSelectPart] = useState(\"\");\n\n  // A function to handle changes to the select dropdown energy unit\n  const handlerPart = (event) => {\n    const inputVal = document.getElementsByName(event.value);\n    console.log(\"handlerPart ===\", event, nutrition, inputVal);\n    setSelectPart(event.value);\n  };\n\n  //create an array of food types to select from\n  const foodTypes = [\n    {\n      value: \"solid\",\n      label: \"Fast form\",\n    },\n    {\n      value: \"liquid\",\n      label: \"Flytende form\",\n    },\n  ];\n\n  return (\n    <div className=\"row\">\n      {/* This div creates a column layout for the left side of the table */}\n      <div className=\"col-md-6\">\n        {/* the selector (dropdown menu) for choosing the food type. */}\n        <div className=\"form-group\">\n          <label htmlFor=\"foodType\">Velg type matvare:</label>\n          <Select\n            className=\"form-control\"\n            id=\"foodType\"\n            options={foodTypes}\n            onChange={(e) => setFoodType(e.value)} // update the onFoodTypeChange function to directly set the food type state\n            placeholder=\"Velg type matvare\"\n          />\n        </div>\n\n        <h5>\n          Næringsinnhold per 100{\" \"}\n          {foodType === \"solid\" ? \"g\" : foodType === \"liquid\" ? \"ml\" : \"g/ml\"}\n        </h5>\n\n        {/* This div adds a light background color to the table */}\n        <div className=\"bg-light\">\n          {/* This table shows the nutritional information */}\n          <table className=\"table table-striped\">\n            {/* The table header */}\n            <thead>\n              <tr>\n                <th scope=\"col\" className=\"table-font\">\n                  Energi eller næringsstoff\n                </th>\n                <th scope=\"col\" className=\"table-font\">\n                  Mengde\n                </th>\n              </tr>\n            </thead>\n\n            {/* The table body */}\n            <tbody>\n              {/* This row shows the energy content */}\n              <tr className={(energikj, energikcal ? \"alert-box\" : null)}>\n                <th scope=\"row\" className=\"table-font\">\n                  {/* An icon with a tooltip to indicate missing values in energy parameters */}\n                  {energikj && energikcal ? (\n                    <Tooltip\n                      title=\"Mangler verdi i energi (kJ/Kcal) parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  {/* This div displays the energy label and unit */}\n                  <div className=\"row\">\n                    <div className=\"col-md-3\">\n                      <label for=\"energiunit\" class=\"form-label\">\n                        Energi\n                      </label>\n                    </div>\n                    {/* A dropdown menu for selecting the energy unit */}\n                    <div className=\"col-md-6\">\n                      <Select\n                        placeholder={<div>Velg enhet</div>}\n                        className=\"form-select-md mb-3\"\n                        options={selectUnit}\n                        onChange={(e) => handlerPart(e)}\n                      />\n                    </div>\n                  </div>\n                </th>\n                {/* An input field for entering the energy value */}\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name={selectsPart}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* Additional rows for other nutrient selections */}\n              {/* This row shows the fat content */}\n              <tr className={fett ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {fett ? (\n                    <Tooltip\n                      title=\"Mangler verdi i fett parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Fett (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"fett\"\n                    value={nutrition.fett}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the saturated fat content */}\n              <tr className={mettede ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {mettede ? (\n                    <Tooltip\n                      title=\"Mangler verdi i mettede fettsyrer parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Mettede fettsyrer (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"mettede\"\n                    value={nutrition.mettede}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the carbohydrate content */}\n              <tr className={karbohydrat ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {karbohydrat ? (\n                    <Tooltip\n                      title=\"Mangler verdi i karbohydrat parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Karbohydrat (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"karbohydrat\"\n                    value={nutrition.karbohydrat}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows hvorav sukkerarter content */}\n              <tr className={hvoravSukkerarter ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {hvoravSukkerarter ? (\n                    <Tooltip\n                      title=\"Mangler verdi i hvorav sukkerarter parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Hvorav tilsatte sukkerarter (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"hvoravSukkerarter\"\n                    value={nutrition.hvoravSukkerarter}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows kostfiber content */}\n              <tr\n                className={\n                  kostfiber\n                    ? \"alert-box\"\n                    : null || kostfiberNull\n                    ? \"alert-box\"\n                    : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {kostfiber ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden kostfiber. Mengden på kostfiber må være høyst enn eller lik 6 g / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {kostfiberNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i kostfiber parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Kostfiber (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"kostfiber\"\n                    value={nutrition.kostfiber}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the protein content */}\n              <tr className={protein ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {protein ? (\n                    <Tooltip\n                      title=\"Mangler verdi i protein parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Protein (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"protein\"\n                    value={nutrition.protein}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows salt content */}\n              <tr className={salt ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {salt ? (\n                    <Tooltip\n                      title=\"Mangler verdi i salt parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Salt (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"salt\"\n                    value={nutrition.salt}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n\n        {/* Button that submits the form and calls the onClick function */}\n        <div className=\"col-12 button-div\">\n          <button\n            type=\"submit\"\n            className=\"btn btn-primary btn-lg button-search\"\n            onClick={onClick}\n          >\n            Beregn\n          </button>\n        </div>\n      </div>\n\n      <div className=\"col-md-6\">\n        {/* positive results nøkkelhullet container\" */}\n        {showNokkelhulletResults ? (\n          <div className=\"container nøkkelhullet-food-result-container\">\n            {/* An image with class \"keyhole-logo\" and alt text \"keyhole logo\" */}\n            <img\n              src={keyholeLgog}\n              className=\"keyhole-logo img-fluid\"\n              alt=\"keyhole logo\"\n            />\n            {/* A heading with text \"Nøkkelhullet\" */}\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir Nøkkelhullet. </p>\n              </div>\n              <div className=\"col-md-2\">\n                {/* FontAwesome icon with event listener to show the \"Nøkkelhullet\" information section */}\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  {/* A paragraph with a link to Lovdata's \"Forskrift om frivillig merking a nœringsmidler med Nokkellhullet\" */}\n                  <p>\n                    Les mer om hvilke krav det stilles for merking av\n                    Nokkellhullet på Lovdatas \"Forskrift om frivillig merking a\n                    nœringsmidler med Nokkellhullet\":\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  {/* FontAwesome icon with event listener to hide the \"Nøkkelhullet\" information section */}\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        ) : null}\n        {/*Negative results nøkkelhullet container\" */}\n        {showNokkelhulletResults === false && (\n          <div className=\"container nøkkelhullet-food-negResult-container\">\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir ikke Nøkkelhullet.</p>\n                {showEmptyResult ? (\n                  <p>** Obligatoriske næringsverdier kan ikke være tomme.</p>\n                ) : null}\n\n                {kostfiber ? (\n                  <p>** Kostfiber verdien kan være minst 6 g/100 g.</p>\n                ) : null}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om frivillig merking av næringsmidler med Nøkkelhullet:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for ernæringspåstander if there are all true results */}\n        {buttonClicked && (\n          <div\n            className={\n              lowSugars && withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-all\"\n                : !lowSugars && !withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-none\"\n                : \"container ernæringspåstander-food-result-container-some\"\n            }\n          >\n            <h5>Ernæringspåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                {/* Low sugars */}\n                {lowSugars ? (\n                  <div>\n                    <p>** Lavt sukkerinnhold:</p>\n                    <p>\n                      Dette produktet inneholder høyst 5 g sukkerarter per 100 g\n                      for næringsmidler i fast form, eller høyst 2,5 g\n                      sukkerarter per 100 ml for næringsmidler i flytende form\n                      og oppfyller kravet for \"Lavt sukkerinnhold\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Lavt sukkerinnhold\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        For faste næringsmidler, sukkerinnholdet må være høyst 5\n                        g per 100 g.\n                      </li>\n                      <li>\n                        For flytende næringsmidler, sukkerinnholdet må være\n                        høyst 2,5 g per 100 ml.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n\n                {/* No added sugars */}\n                {withNoAddedSugars ? (\n                  <div>\n                    <p>** Uten tilsatt sukker:</p>\n                    <p>\n                      Dette produktet er ikke tilsatt monosakkarider,\n                      disakkarider eller andre næringsmidler på grunn av deres\n                      søtende egenskaper og oppfyller kravet for \"Uten tilsatt\n                      sukker\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Uten tilsatt sukker\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        Produktet må ikke være tilsatt monosakkarider,\n                        disakkarider eller andre næringsmidler på grunn av deres\n                        søtende egenskaper.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"ernaerings\")}\n                />\n              </div>\n            </div>\n            {infoErnaerings ? (\n              // Information section for \"Ernæringspåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"ernaerings\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for Helsepåstander results  */}\n        {showHelsepåstander && (\n          <div\n            className=\"container helsepåstander-food-result-container\"\n            style={{ background: \"#f2f0b5\" }}\n          >\n            <h5>Helsepåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Under utvikling. </p>\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"helsepåstander\")}\n                />\n              </div>\n            </div>\n            {infoHelsepåstander ? (\n              // Information section for \"Helsepåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"helsepåstander\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"15px\" }}></div>\n        {/* conditional rendering for the buttons using showButtons state */}\n        {showButtons && (\n          <div className=\"d-flex justify-content-between\">\n            {/* Save button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-save\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Lagre produkt\n            </button>\n\n            {/* Share button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-share\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Del produkt\n            </button>\n\n            {/* Add a new product button */}\n            <button\n              className=\"btn btn-primary\"\n              onClick={() => window.location.reload()}\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-plus\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Legg til et nytt produkt\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Kategori4;\n","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Melk12b.js",["392","393","394","395"],[],"import React from \"react\";\nimport { useState, useEffect } from \"react\"; // import the useState and useeffect hook.\nimport { faCircleExclamation } from \"@fortawesome/free-solid-svg-icons\"; // import an icon.\nimport { faBan } from \"@fortawesome/free-solid-svg-icons\";\nimport { faSave, faShare, faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"; // import FontAwesomeIcon component.\nimport Tooltip from \"@mui/material/Tooltip\"; // import Tooltip component.\nimport keyholeLgog from \"./circle-keyhole-logo.png\"; // import an image\nimport { faCircleInfo } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport { faXmarkCircle } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport Select from \"react-select\"; // import Select component\n\nconst Melk12b = () => {\n  // State variables for showing results and empty result message\n  const [showNokkelhulletResults, setShowNokkelhulletResults] = useState(null);\n  const [showErnaeringsResults, setShowErnaeringsResults] = useState(null);\n  const [showHelsepåstander, setShowHelsepåstander] = useState(null);\n  const [showEmptyResult, setShowEmptyResult] = useState(\"\"); // initialize state variable for showing empty result message.\n\n  //state variable to store the user's food type selection (solid or liquid) and the low sugars claim result\n  const [foodType, setFoodType] = useState(\"\");\n  const [lowSugars, setLowSugars] = useState(null);\n\n  //state variable to track whether the product meets the WITH NO ADDED SUGARS claim or not\n  const [withNoAddedSugars, setWithNoAddedSugars] = useState(false);\n\n  // State variable for tracking if the button is clicked\n  const [buttonClicked, setButtonClicked] = useState(false);\n\n  // useEffect hook for checking the condition for the \"WITH NO ADDED SUGARS\" claim when button is clicked\n  useEffect(() => {\n    if (buttonClicked) {\n      if (withNoAddedSugars) {\n        setShowErnaeringsResults(true);\n      } else {\n        setShowErnaeringsResults(false);\n      }\n    }\n  }, [withNoAddedSugars, buttonClicked]);\n\n  //state for controlling the buttons' visibility\n  const [showButtons, setShowButtons] = useState(false);\n\n  // State variables to control the visibility of the information sections\n  const [infoNokkelhullet, setInfoNokkelhullet] = useState(false);\n  const [infoErnaerings, setInfoErnaerings] = useState(false);\n  const [infoHelsepåstander, setInfoHelsepåstander] = useState(false);\n\n  // Function to show an information section based on the container parameter\n  const onClickInfo = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(true);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(true);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(true);\n    }\n  };\n\n  // Function to hide an information section based on the container parameter\n  const onClickClose = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(false);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(false);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(false);\n    }\n  };\n\n  // State variables for handling input fields and validation errors\n  const [energikj, setEnergikj] = useState(false);\n  const [energikcal, setEnergikcal] = useState(false);\n\n  const [fett, setFett] = useState(false);\n  const [fettNull, setFettNull] = useState(false);\n  const [mettede, setMettede] = useState(false);\n  const [mettedeNull, setMettedeNull] = useState(false);\n  const [karbohydrat, setKarbohydrat] = useState(false);\n  const [karbohydratNull, setKarbohydratNull] = useState(false);\n  const [hvoravSukkerarter, setHvoravSukkerarter] = useState(false);\n  const [kostfiber, setKostfiber] = useState(false);\n  const [protein, setProtein] = useState(false);\n  const [salt, setSalt] = useState(false);\n  const [saltNull, setSaltNull] = useState(false);\n\n  // State variable for storing nutrition information entered by user\n  const [nutrition, setNutrition] = useState({\n    energikj: \"\",\n    energikcal: \"\",\n    fett: \"\",\n    mettede: \"\",\n    karbohydrat: \"\",\n    hvoravSukkerarter: \"\",\n    kostfiber: \"\",\n    protein: \"\",\n    salt: \"\",\n  });\n\n  // Handler for updating nutrition state/state variable based on input field changes/input values\n  const changeHandle = (event) => {\n    console.log(\"changeHandle ===\", event.target, event.target.value);\n    setNutrition({\n      ...nutrition,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  // define function to handle form submission\n  const onClick = (e) => {\n    e.preventDefault();\n    setButtonClicked(true);\n    setShowHelsepåstander(true);\n    setShowButtons(true);\n\n    console.log(\"onclick ===\", selectsPart, nutrition);\n\n    // Check if all required fields are filled out and within valid ranges\n    // The if statement checks if all required inputs are non-empty and meet the nutritional requirements\n    if (\n      nutrition.fett !== \"\" &&\n      nutrition.fett <= 1.5 &&\n      nutrition.mettede !== \"\" &&\n      nutrition.mettede <= 0.495 &&\n      nutrition.karbohydrat !== \"\" &&\n      nutrition.karbohydrat <= 5 &&\n      nutrition.hvoravSukkerarter !== \"\" &&\n      nutrition.kostfiber !== \"\" &&\n      nutrition.protein !== \"\" &&\n      nutrition.salt !== \"\" &&\n      nutrition.salt <= 0.1\n    ) {\n      // If all requirements are met, display the nutrition results\n      setShowNokkelhulletResults(true);\n      // Hide any empty result messages or error messages\n      setShowEmptyResult(false);\n\n      // Check if the user selected \"energikj\" and if nutrition input lable of \"energikj\" is not empty\n      if (selectsPart === \"energikj\" && nutrition.energikj !== \"\") {\n        setEnergikj(false);\n      }\n\n      // Check if the user selected \"energikcal\" and if nutrition input lable of \"energikcal\" is not empty\n      if (selectsPart === \"energikcal\" && nutrition.energikcal !== \"\") {\n        setEnergikcal(false);\n      }\n      // Reset all input validation errors\n      setFett(false);\n      setFettNull(false);\n      setMettede(false);\n      setMettedeNull(false);\n      setKarbohydrat(false);\n      setKarbohydratNull(false);\n      setHvoravSukkerarter(false);\n      setKostfiber(false);\n      setProtein(false);\n      setSalt(false);\n      setSaltNull(false);\n      // If the user has not selected any nutrients, set errors accordingly\n      // Check each nutrition value to see if it is missing or negative\n      // show input validation errors if any input is missing or negative.\n    } else {\n      if (selectsPart === \"energikj\") {\n        console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n        if (nutrition.energikj === \"\" || nutrition.energikj < 0) {\n          console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n          setEnergikj(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikj(false);\n        }\n      }\n\n      if (selectsPart === \"energikcal\") {\n        console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n        if (nutrition.energikcal === \"\" || nutrition.energikcal < 0) {\n          console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n          setEnergikcal(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikcal(false);\n        }\n      }\n\n      // repeat for each nutrition value...\n      if (nutrition.fett === \"\" || nutrition.fett < 0) {\n        setFettNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setFettNull(false);\n      }\n      if (nutrition.fett > 1.5) {\n        setFett(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setFett(false);\n      }\n\n      if (nutrition.mettede === \"\" || nutrition.mettede < 0) {\n        setMettedeNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setMettedeNull(false);\n      }\n      if (nutrition.mettede > 0.495) {\n        setMettede(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setMettede(false);\n      }\n\n      if (nutrition.karbohydrat === \"\" || nutrition.karbohydrat < 0) {\n        setKarbohydratNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKarbohydratNull(false);\n      }\n      if (nutrition.karbohydrat > 5) {\n        setKarbohydrat(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setKarbohydrat(false);\n      }\n\n      if (\n        nutrition.hvoravSukkerarter === \"\" ||\n        nutrition.hvoravSukkerarter < 0\n      ) {\n        setHvoravSukkerarter(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setHvoravSukkerarter(false);\n      }\n\n      if (nutrition.kostfiber === \"\" || nutrition.kostfiber < 0) {\n        setKostfiber(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKostfiber(false);\n      }\n\n      if (nutrition.protein === \"\" || nutrition.protein < 0) {\n        setProtein(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setProtein(false);\n      }\n\n      if (nutrition.salt === \"\" || nutrition.salt < 0) {\n        setSaltNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setSaltNull(false);\n      }\n      if (nutrition.salt > 0.1) {\n        setSalt(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setSalt(false);\n      }\n    }\n\n    // Check for the \"LOW SUGARS\" claim\n    if (foodType === \"solid\" && parseFloat(nutrition.karbohydrat) <= 5) {\n      setLowSugars(true);\n    } else if (\n      foodType === \"liquid\" &&\n      parseFloat(nutrition.karbohydrat) <= 2.5\n    ) {\n      setLowSugars(true);\n    } else {\n      setLowSugars(false);\n    }\n\n    // Check the condition for the \"WITH NO ADDED SUGARS\" nutrition claim\n    if (nutrition.hvoravSukkerarter === \"0\" && nutrition.karbohydrat > 0) {\n      setWithNoAddedSugars(true);\n    } else {\n      setWithNoAddedSugars(false);\n    }\n  };\n\n  // create an array of energy units to select from\n  const selectUnit = [\n    {\n      value: \"energikj\",\n      label: \"(kj)\",\n    },\n    {\n      value: \"energikcal\",\n      label: \"(kcal)\",\n    },\n  ];\n\n  // Declare a state variable for the select dropdown.\n  const [selectsPart, setSelectPart] = useState(\"\");\n\n  // A function to handle changes to the select dropdown energy unit\n  const handlerPart = (event) => {\n    const inputVal = document.getElementsByName(event.value);\n    console.log(\"handlerPart ===\", event, nutrition, inputVal);\n    setSelectPart(event.value);\n  };\n\n  //create an array of food types to select from\n  const foodTypes = [\n    {\n      value: \"solid\",\n      label: \"Fast form\",\n    },\n    {\n      value: \"liquid\",\n      label: \"Flytende form\",\n    },\n  ];\n\n  return (\n    <div className=\"row\">\n      {/* This div creates a column layout for the left side of the table */}\n      <div className=\"col-md-6\">\n        {/* the selector (dropdown menu) for choosing the food type. */}\n        <div className=\"form-group\">\n          <label htmlFor=\"foodType\">Velg type matvare:</label>\n          <Select\n            className=\"form-control\"\n            id=\"foodType\"\n            options={foodTypes}\n            onChange={(e) => setFoodType(e.value)} // update the onFoodTypeChange function to directly set the food type state\n            placeholder=\"Velg type matvare\"\n          />\n        </div>\n\n        <h5>\n          Næringsinnhold per 100{\" \"}\n          {foodType === \"solid\" ? \"g\" : foodType === \"liquid\" ? \"ml\" : \"g/ml\"}\n        </h5>\n\n        {/* This div adds a light background color to the table */}\n        <div className=\"bg-light\">\n          {/* This table shows the nutritional information */}\n          <table className=\"table table-striped\">\n            {/* The table header */}\n            <thead>\n              <tr>\n                <th scope=\"col\" className=\"table-font\">\n                  Energi eller næringsstoff\n                </th>\n                <th scope=\"col\" className=\"table-font\">\n                  Mengde\n                </th>\n              </tr>\n            </thead>\n\n            {/* The table body */}\n            <tbody>\n              {/* This row shows the energy content */}\n              <tr className={(energikj, energikcal ? \"alert-box\" : null)}>\n                <th scope=\"row\" className=\"table-font\">\n                  {/* An icon with a tooltip to indicate missing values in energy parameters */}\n                  {energikj && energikcal ? (\n                    <Tooltip\n                      title=\"Mangler verdi i energi (kJ/Kcal) parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  {/* This div displays the energy label and unit */}\n                  <div className=\"row\">\n                    <div className=\"col-md-3\">\n                      <label for=\"energiunit\" class=\"form-label\">\n                        Energi\n                      </label>\n                    </div>\n                    {/* A dropdown menu for selecting the energy unit */}\n                    <div className=\"col-md-6\">\n                      <Select\n                        placeholder={<div>Velg enhet</div>}\n                        className=\"form-select-md mb-3\"\n                        options={selectUnit}\n                        onChange={(e) => handlerPart(e)}\n                      />\n                    </div>\n                  </div>\n                </th>\n                {/* An input field for entering the energy value */}\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name={selectsPart}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* Additional rows for other nutrient selections */}\n              {/* This row shows the fat content */}\n              <tr\n                className={\n                  fett ? \"alert-box\" : null || fettNull ? \"alert-box\" : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {fett ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden fett. Mengden på fett må være lavere enn eller lik 1.5/ 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {fettNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i fett parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Fett (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"fett\"\n                    value={nutrition.fett}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the saturated fat content */}\n              <tr\n                className={\n                  mettede\n                    ? \"alert-box\"\n                    : null || mettedeNull\n                    ? \"alert-box\"\n                    : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {mettede ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden mettede fettsyrer. Mengden på mettede fettsyrer må være lavere enn eller lik 0.495 / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {mettedeNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i mettede fettsyrer parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Mettede fettsyrer (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"mettede\"\n                    value={nutrition.mettede}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the carbohydrate content */}\n              <tr\n                className={\n                  karbohydrat\n                    ? \"alert-box\"\n                    : null || karbohydratNull\n                    ? \"alert-box\"\n                    : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {karbohydrat ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden sukkerarter. Mengden på sukkerarter må være lavere enn eller lik 5 g / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {karbohydratNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i karbohydrat parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Karbohydrat (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"karbohydrat\"\n                    value={nutrition.karbohydrat}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows hvorav sukkerarter content */}\n              <tr className={hvoravSukkerarter ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {hvoravSukkerarter ? (\n                    <Tooltip\n                      title=\"Mangler verdi i hvorav sukkerarter parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Hvorav tilsatte sukkerarter (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"hvoravSukkerarter\"\n                    value={nutrition.hvoravSukkerarter}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows kostfiber content */}\n              <tr className={kostfiber ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {kostfiber ? (\n                    <Tooltip\n                      title=\"Mangler verdi i kostfiber parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Kostfiber (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"kostfiber\"\n                    value={nutrition.kostfiber}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the protein content */}\n              <tr className={protein ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {protein ? (\n                    <Tooltip\n                      title=\"Mangler verdi i protein parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Protein (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"protein\"\n                    value={nutrition.protein}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows salt content */}\n              <tr\n                className={\n                  salt ? \"alert-box\" : null || saltNull ? \"alert-box\" : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {salt ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden salt. Mengden på salt må være lavere enn eller lik 0.1 / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {saltNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i salt parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Salt (g)\n                </th>\n                <td colSpan=\"2\">\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"salt\"\n                    value={nutrition.salt}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n\n        {/* Button that submits the form and calls the onClick function */}\n        <div className=\"col-12 button-div\">\n          <button\n            type=\"submit\"\n            className=\"btn btn-primary btn-lg button-search\"\n            onClick={onClick}\n          >\n            Beregn\n          </button>\n        </div>\n      </div>\n\n      <div className=\"col-md-6\">\n        {/* positive results nøkkelhullet container\" */}\n        {showNokkelhulletResults ? (\n          <div className=\"container nøkkelhullet-food-result-container\">\n            {/* An image with class \"keyhole-logo\" and alt text \"keyhole logo\" */}\n            <img\n              src={keyholeLgog}\n              className=\"keyhole-logo img-fluid\"\n              alt=\"keyhole logo\"\n            />\n            {/* A heading with text \"Nøkkelhullet\" */}\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir Nøkkelhullet. </p>\n              </div>\n              <div className=\"col-md-2\">\n                {/* FontAwesome icon with event listener to show the \"Nøkkelhullet\" information section */}\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  {/* A paragraph with a link to Lovdata's \"Forskrift om frivillig merking a nœringsmidler med Nokkellhullet\" */}\n                  <p>\n                    Les mer om hvilke krav det stilles for merking av\n                    Nokkellhullet på Lovdatas \"Forskrift om frivillig merking a\n                    nœringsmidler med Nokkellhullet\":\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  {/* FontAwesome icon with event listener to hide the \"Nøkkelhullet\" information section */}\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        ) : null}\n        {/*Negative results nøkkelhullet container\" */}\n        {showNokkelhulletResults === false && (\n          <div className=\"container nøkkelhullet-food-negResult-container\">\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir ikke Nøkkelhullet.</p>\n                {showEmptyResult ? (\n                  <p>** Obligatoriske næringsverdier kan ikke være tomme.</p>\n                ) : null}\n\n                {mettede ? (\n                  <p>\n                    ** Mettede fettsyrer verdien kan være høyst 33 % av\n                    fettinnholdet /100 g.\n                  </p>\n                ) : null}\n\n                {fett ? (\n                  <p>** Fett verdien kan være høyst 1.5 g/100 g.</p>\n                ) : null}\n\n                {karbohydrat ? (\n                  <p>** Sukkerarter verdien kan være høyst 5 g/100 g.</p>\n                ) : null}\n\n                {salt ? (\n                  <p>** Salt verdien kan være høyst 0.1 g/100 g.</p>\n                ) : null}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om frivillig merking av næringsmidler med Nøkkelhullet:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for ernæringspåstander if there are all true results */}\n        {buttonClicked && (\n          <div\n            className={\n              lowSugars && withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-all\"\n                : !lowSugars && !withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-none\"\n                : \"container ernæringspåstander-food-result-container-some\"\n            }\n          >\n            <h5>Ernæringspåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                {/* Low sugars */}\n                {lowSugars ? (\n                  <div>\n                    <p>** Lavt sukkerinnhold:</p>\n                    <p>\n                      Dette produktet inneholder høyst 5 g sukkerarter per 100 g\n                      for næringsmidler i fast form, eller høyst 2,5 g\n                      sukkerarter per 100 ml for næringsmidler i flytende form\n                      og oppfyller kravet for \"Lavt sukkerinnhold\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Lavt sukkerinnhold\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        For faste næringsmidler, sukkerinnholdet må være høyst 5\n                        g per 100 g.\n                      </li>\n                      <li>\n                        For flytende næringsmidler, sukkerinnholdet må være\n                        høyst 2,5 g per 100 ml.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n\n                {/* No added sugars */}\n                {withNoAddedSugars ? (\n                  <div>\n                    <p>** Uten tilsatt sukker:</p>\n                    <p>\n                      Dette produktet er ikke tilsatt monosakkarider,\n                      disakkarider eller andre næringsmidler på grunn av deres\n                      søtende egenskaper og oppfyller kravet for \"Uten tilsatt\n                      sukker\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Uten tilsatt sukker\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        Produktet må ikke være tilsatt monosakkarider,\n                        disakkarider eller andre næringsmidler på grunn av deres\n                        søtende egenskaper.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"ernaerings\")}\n                />\n              </div>\n            </div>\n            {infoErnaerings ? (\n              // Information section for \"Ernæringspåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"ernaerings\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for Helsepåstander results  */}\n        {showHelsepåstander && (\n          <div\n            className=\"container helsepåstander-food-result-container\"\n            style={{ background: \"#f2f0b5\" }}\n          >\n            <h5>Helsepåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Under utvikling. </p>\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"helsepåstander\")}\n                />\n              </div>\n            </div>\n            {infoHelsepåstander ? (\n              // Information section for \"Helsepåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"helsepåstander\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"15px\" }}></div>\n        {/* conditional rendering for the buttons using showButtons state */}\n        {showButtons && (\n          <div className=\"d-flex justify-content-between\">\n            {/* Save button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-save\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Lagre produkt\n            </button>\n\n            {/* Share button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-share\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Del produkt\n            </button>\n\n            {/* Add a new product button */}\n            <button\n              className=\"btn btn-primary\"\n              onClick={() => window.location.reload()}\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-plus\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Legg til et nytt produkt\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Melk12b;\n","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Melk13b.js",["396","397","398","399"],[],"import React from \"react\";\nimport { useState, useEffect } from \"react\"; // import the useState and useeffect hook.\nimport { faCircleExclamation } from \"@fortawesome/free-solid-svg-icons\"; // import an icon.\nimport { faBan } from \"@fortawesome/free-solid-svg-icons\";\nimport { faSave, faShare, faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"; // import FontAwesomeIcon component.\nimport Tooltip from \"@mui/material/Tooltip\"; // import Tooltip component.\nimport keyholeLgog from \"./circle-keyhole-logo.png\"; // import an image\nimport { faCircleInfo } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport { faXmarkCircle } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport Select from \"react-select\"; // import Select component\n\nconst Melk13b = () => {\n  // State variables for showing results and empty result message\n  const [showNokkelhulletResults, setShowNokkelhulletResults] = useState(null);\n  const [showErnaeringsResults, setShowErnaeringsResults] = useState(null);\n  const [showHelsepåstander, setShowHelsepåstander] = useState(null);\n  const [showEmptyResult, setShowEmptyResult] = useState(\"\"); // initialize state variable for showing empty result message.\n\n  //state variable to store the user's food type selection (solid or liquid) and the low sugars claim result\n  const [foodType, setFoodType] = useState(\"\");\n  const [lowSugars, setLowSugars] = useState(null);\n\n  //state variable to track whether the product meets the WITH NO ADDED SUGARS claim or not\n  const [withNoAddedSugars, setWithNoAddedSugars] = useState(false);\n\n  // State variable for tracking if the button is clicked\n  const [buttonClicked, setButtonClicked] = useState(false);\n\n  // useEffect hook for checking the condition for the \"WITH NO ADDED SUGARS\" claim when button is clicked\n  useEffect(() => {\n    if (buttonClicked) {\n      if (withNoAddedSugars) {\n        setShowErnaeringsResults(true);\n      } else {\n        setShowErnaeringsResults(false);\n      }\n    }\n  }, [withNoAddedSugars, buttonClicked]);\n\n  //state for controlling the buttons' visibility\n  const [showButtons, setShowButtons] = useState(false);\n\n  // State variables to control the visibility of the information sections\n  const [infoNokkelhullet, setInfoNokkelhullet] = useState(false);\n  const [infoErnaerings, setInfoErnaerings] = useState(false);\n  const [infoHelsepåstander, setInfoHelsepåstander] = useState(false);\n\n  // Function to show an information section based on the container parameter\n  const onClickInfo = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(true);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(true);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(true);\n    }\n  };\n\n  // Function to hide an information section based on the container parameter\n  const onClickClose = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(false);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(false);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(false);\n    }\n  };\n\n  // State variables for handling input fields and validation errors\n  const [energikj, setEnergikj] = useState(false);\n  const [energikcal, setEnergikcal] = useState(false);\n\n  const [fett, setFett] = useState(false);\n  const [fettNull, setFettNull] = useState(false);\n  const [mettede, setMettede] = useState(false);\n  const [mettedeNull, setMettedeNull] = useState(false);\n  const [karbohydrat, setKarbohydrat] = useState(false);\n  const [karbohydratNull, setKarbohydratNull] = useState(false);\n  const [hvoravSukkerarter, setHvoravSukkerarter] = useState(false);\n  const [kostfiber, setKostfiber] = useState(false);\n  const [protein, setProtein] = useState(false);\n  const [salt, setSalt] = useState(false);\n  const [saltNull, setSaltNull] = useState(false);\n\n  // State variable for storing nutrition information entered by user\n  const [nutrition, setNutrition] = useState({\n    energikj: \"\",\n    energikcal: \"\",\n    fett: \"\",\n    mettede: \"\",\n    karbohydrat: \"\",\n    hvoravSukkerarter: \"\",\n    kostfiber: \"\",\n    protein: \"\",\n    salt: \"\",\n  });\n\n  // Handler for updating nutrition state/state variable based on input field changes/input values\n  const changeHandle = (event) => {\n    console.log(\"changeHandle ===\", event.target, event.target.value);\n    setNutrition({\n      ...nutrition,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  // define function to handle form submission\n  const onClick = (e) => {\n    e.preventDefault();\n    setButtonClicked(true);\n    setShowHelsepåstander(true);\n    setShowButtons(true);\n\n    console.log(\"onclick ===\", selectsPart, nutrition);\n\n    // Check if all required fields are filled out and within valid ranges\n    // The if statement checks if all required inputs are non-empty and meet the nutritional requirements\n    if (\n      nutrition.fett !== \"\" &&\n      nutrition.fett <= 1.5 &&\n      nutrition.mettede !== \"\" &&\n      nutrition.mettede <= 0.495 &&\n      nutrition.karbohydrat !== \"\" &&\n      nutrition.karbohydrat <= 8 &&\n      nutrition.hvoravSukkerarter !== \"\" &&\n      nutrition.kostfiber !== \"\" &&\n      nutrition.protein !== \"\" &&\n      nutrition.salt !== \"\" &&\n      nutrition.salt <= 0.1\n    ) {\n      // If all requirements are met, display the nutrition results\n      setShowNokkelhulletResults(true);\n      // Hide any empty result messages or error messages\n      setShowEmptyResult(false);\n\n      // Check if the user selected \"energikj\" and if nutrition input lable of \"energikj\" is not empty\n      if (selectsPart === \"energikj\" && nutrition.energikj !== \"\") {\n        setEnergikj(false);\n      }\n\n      // Check if the user selected \"energikcal\" and if nutrition input lable of \"energikcal\" is not empty\n      if (selectsPart === \"energikcal\" && nutrition.energikcal !== \"\") {\n        setEnergikcal(false);\n      }\n      // Reset all input validation errors\n      setFett(false);\n      setFettNull(false);\n      setMettede(false);\n      setMettedeNull(false);\n      setKarbohydrat(false);\n      setKarbohydratNull(false);\n      setHvoravSukkerarter(false);\n      setKostfiber(false);\n      setProtein(false);\n      setSalt(false);\n      setSaltNull(false);\n      // If the user has not selected any nutrients, set errors accordingly\n      // Check each nutrition value to see if it is missing or negative\n      // show input validation errors if any input is missing or negative.\n    } else {\n      if (selectsPart === \"energikj\") {\n        console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n        if (nutrition.energikj === \"\" || nutrition.energikj < 0) {\n          console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n          setEnergikj(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikj(false);\n        }\n      }\n\n      if (selectsPart === \"energikcal\") {\n        console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n        if (nutrition.energikcal === \"\" || nutrition.energikcal < 0) {\n          console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n          setEnergikcal(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikcal(false);\n        }\n      }\n\n      // repeat for each nutrition value...\n      if (nutrition.fett === \"\" || nutrition.fett < 0) {\n        setFettNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setFettNull(false);\n      }\n      if (nutrition.fett > 1.5) {\n        setFett(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setFett(false);\n      }\n\n      if (nutrition.mettede === \"\" || nutrition.mettede < 0) {\n        setMettedeNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setMettedeNull(false);\n      }\n      if (nutrition.mettede > 0.495) {\n        setMettede(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setMettede(false);\n      }\n\n      if (nutrition.karbohydrat === \"\" || nutrition.karbohydrat < 0) {\n        setKarbohydratNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKarbohydratNull(false);\n      }\n      if (nutrition.karbohydrat > 8) {\n        setKarbohydrat(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setKarbohydrat(false);\n      }\n\n      if (\n        nutrition.hvoravSukkerarter === \"\" ||\n        nutrition.hvoravSukkerarter < 0\n      ) {\n        setHvoravSukkerarter(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setHvoravSukkerarter(false);\n      }\n\n      if (nutrition.kostfiber === \"\" || nutrition.kostfiber < 0) {\n        setKostfiber(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKostfiber(false);\n      }\n\n      if (nutrition.protein === \"\" || nutrition.protein < 0) {\n        setProtein(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setProtein(false);\n      }\n\n      if (nutrition.salt === \"\" || nutrition.salt < 0) {\n        setSaltNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setSaltNull(false);\n      }\n      if (nutrition.salt > 0.1) {\n        setSalt(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setSalt(false);\n      }\n    }\n\n    // Check for the \"LOW SUGARS\" claim\n    if (foodType === \"solid\" && parseFloat(nutrition.karbohydrat) <= 5) {\n      setLowSugars(true);\n    } else if (\n      foodType === \"liquid\" &&\n      parseFloat(nutrition.karbohydrat) <= 2.5\n    ) {\n      setLowSugars(true);\n    } else {\n      setLowSugars(false);\n    }\n\n    // Check the condition for the \"WITH NO ADDED SUGARS\" nutrition claim\n    if (nutrition.hvoravSukkerarter === \"0\" && nutrition.karbohydrat > 0) {\n      setWithNoAddedSugars(true);\n    } else {\n      setWithNoAddedSugars(false);\n    }\n  };\n\n  // create an array of energy units to select from\n  const selectUnit = [\n    {\n      value: \"energikj\",\n      label: \"(kj)\",\n    },\n    {\n      value: \"energikcal\",\n      label: \"(kcal)\",\n    },\n  ];\n\n  // Declare a state variable for the select dropdown.\n  const [selectsPart, setSelectPart] = useState(\"\");\n\n  // A function to handle changes to the select dropdown energy unit\n  const handlerPart = (event) => {\n    const inputVal = document.getElementsByName(event.value);\n    console.log(\"handlerPart ===\", event, nutrition, inputVal);\n    setSelectPart(event.value);\n  };\n\n  //create an array of food types to select from\n  const foodTypes = [\n    {\n      value: \"solid\",\n      label: \"Fast form\",\n    },\n    {\n      value: \"liquid\",\n      label: \"Flytende form\",\n    },\n  ];\n\n  return (\n    <div className=\"row\">\n      {/* This div creates a column layout for the left side of the table */}\n      <div className=\"col-md-6\">\n        {/* the selector (dropdown menu) for choosing the food type. */}\n        <div className=\"form-group\">\n          <label htmlFor=\"foodType\">Velg type matvare:</label>\n          <Select\n            className=\"form-control\"\n            id=\"foodType\"\n            options={foodTypes}\n            onChange={(e) => setFoodType(e.value)} // update the onFoodTypeChange function to directly set the food type state\n            placeholder=\"Velg type matvare\"\n          />\n        </div>\n\n        <h5>\n          Næringsinnhold per 100{\" \"}\n          {foodType === \"solid\" ? \"g\" : foodType === \"liquid\" ? \"ml\" : \"g/ml\"}\n        </h5>\n\n        {/* This div adds a light background color to the table */}\n        <div className=\"bg-light\">\n          {/* This table shows the nutritional information */}\n          <table className=\"table table-striped\">\n            {/* The table header */}\n            <thead>\n              <tr>\n                <th scope=\"col\" className=\"table-font\">\n                  Energi eller næringsstoff\n                </th>\n                <th scope=\"col\" className=\"table-font\">\n                  Mengde\n                </th>\n              </tr>\n            </thead>\n\n            {/* The table body */}\n            <tbody>\n              {/* This row shows the energy content */}\n              <tr className={(energikj, energikcal ? \"alert-box\" : null)}>\n                <th scope=\"row\" className=\"table-font\">\n                  {/* An icon with a tooltip to indicate missing values in energy parameters */}\n                  {energikj && energikcal ? (\n                    <Tooltip\n                      title=\"Mangler verdi i energi (kJ/Kcal) parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  {/* This div displays the energy label and unit */}\n                  <div className=\"row\">\n                    <div className=\"col-md-3\">\n                      <label for=\"energiunit\" class=\"form-label\">\n                        Energi\n                      </label>\n                    </div>\n                    {/* A dropdown menu for selecting the energy unit */}\n                    <div className=\"col-md-6\">\n                      <Select\n                        placeholder={<div>Velg enhet</div>}\n                        className=\"form-select-md mb-3\"\n                        options={selectUnit}\n                        onChange={(e) => handlerPart(e)}\n                      />\n                    </div>\n                  </div>\n                </th>\n                {/* An input field for entering the energy value */}\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name={selectsPart}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* Additional rows for other nutrient selections */}\n              {/* This row shows the fat content */}\n              <tr\n                className={\n                  fett ? \"alert-box\" : null || fettNull ? \"alert-box\" : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {fett ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden fett. Mengden på fett må være lavere enn eller lik 1.5/ 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {fettNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i fett parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Fett (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"fett\"\n                    value={nutrition.fett}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the saturated fat content */}\n              <tr\n                className={\n                  mettede\n                    ? \"alert-box\"\n                    : null || mettedeNull\n                    ? \"alert-box\"\n                    : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {mettede ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden mettede fettsyrer. Mengden på mettede fettsyrer må være lavere enn eller lik 0.495 / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {mettedeNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i mettede fettsyrer parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Mettede fettsyrer (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"mettede\"\n                    value={nutrition.mettede}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the carbohydrate content */}\n              <tr\n                className={\n                  karbohydrat\n                    ? \"alert-box\"\n                    : null || karbohydratNull\n                    ? \"alert-box\"\n                    : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {karbohydrat ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden sukkerarter. Mengden på sukkerarter må være lavere enn eller lik 8 g / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {karbohydratNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i karbohydrat parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Karbohydrat (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"karbohydrat\"\n                    value={nutrition.karbohydrat}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows hvorav sukkerarter content */}\n              <tr className={hvoravSukkerarter ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {hvoravSukkerarter ? (\n                    <Tooltip\n                      title=\"Mangler verdi i hvorav sukkerarter parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Hvorav tilsatte sukkerarter (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"hvoravSukkerarter\"\n                    value={nutrition.hvoravSukkerarter}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows kostfiber content */}\n              <tr className={kostfiber ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {kostfiber ? (\n                    <Tooltip\n                      title=\"Mangler verdi i kostfiber parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Kostfiber (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"kostfiber\"\n                    value={nutrition.kostfiber}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the protein content */}\n              <tr className={protein ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {protein ? (\n                    <Tooltip\n                      title=\"Mangler verdi i protein parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Protein (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"protein\"\n                    value={nutrition.protein}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows salt content */}\n              <tr\n                className={\n                  salt ? \"alert-box\" : null || saltNull ? \"alert-box\" : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {salt ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden salt. Mengden på salt må være lavere enn eller lik 0.1 / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {saltNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i salt parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Salt (g)\n                </th>\n                <td colSpan=\"2\">\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"salt\"\n                    value={nutrition.salt}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n\n        {/* Button that submits the form and calls the onClick function */}\n        <div className=\"col-12 button-div\">\n          <button\n            type=\"submit\"\n            className=\"btn btn-primary btn-lg button-search\"\n            onClick={onClick}\n          >\n            Beregn\n          </button>\n        </div>\n      </div>\n\n      <div className=\"col-md-6\">\n        {/* positive results nøkkelhullet container\" */}\n        {showNokkelhulletResults ? (\n          <div className=\"container nøkkelhullet-food-result-container\">\n            {/* An image with class \"keyhole-logo\" and alt text \"keyhole logo\" */}\n            <img\n              src={keyholeLgog}\n              className=\"keyhole-logo img-fluid\"\n              alt=\"keyhole logo\"\n            />\n            {/* A heading with text \"Nøkkelhullet\" */}\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir Nøkkelhullet. </p>\n              </div>\n              <div className=\"col-md-2\">\n                {/* FontAwesome icon with event listener to show the \"Nøkkelhullet\" information section */}\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  {/* A paragraph with a link to Lovdata's \"Forskrift om frivillig merking a nœringsmidler med Nokkellhullet\" */}\n                  <p>\n                    Les mer om hvilke krav det stilles for merking av\n                    Nokkellhullet på Lovdatas \"Forskrift om frivillig merking a\n                    nœringsmidler med Nokkellhullet\":\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  {/* FontAwesome icon with event listener to hide the \"Nøkkelhullet\" information section */}\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        ) : null}\n        {/*Negative results nøkkelhullet container\" */}\n        {showNokkelhulletResults === false && (\n          <div className=\"container nøkkelhullet-food-negResult-container\">\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir ikke Nøkkelhullet.</p>\n                {showEmptyResult ? (\n                  <p>** Obligatoriske næringsverdier kan ikke være tomme.</p>\n                ) : null}\n\n                {mettede ? (\n                  <p>\n                    ** Mettede fettsyrer verdien kan være høyst 33 % av\n                    fettinnholdet /100 g.\n                  </p>\n                ) : null}\n\n                {fett ? (\n                  <p>** Fett verdien kan være høyst 1.5 g/100 g.</p>\n                ) : null}\n\n                {karbohydrat ? (\n                  <p>** Sukkerarter verdien kan være høyst 8 g/100 g.</p>\n                ) : null}\n\n                {salt ? (\n                  <p>** Salt verdien kan være høyst 0.1 g/100 g.</p>\n                ) : null}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om frivillig merking av næringsmidler med Nøkkelhullet:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for ernæringspåstander if there are all true results */}\n        {buttonClicked && (\n          <div\n            className={\n              lowSugars && withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-all\"\n                : !lowSugars && !withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-none\"\n                : \"container ernæringspåstander-food-result-container-some\"\n            }\n          >\n            <h5>Ernæringspåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                {/* Low sugars */}\n                {lowSugars ? (\n                  <div>\n                    <p>** Lavt sukkerinnhold:</p>\n                    <p>\n                      Dette produktet inneholder høyst 5 g sukkerarter per 100 g\n                      for næringsmidler i fast form, eller høyst 2,5 g\n                      sukkerarter per 100 ml for næringsmidler i flytende form\n                      og oppfyller kravet for \"Lavt sukkerinnhold\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Lavt sukkerinnhold\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        For faste næringsmidler, sukkerinnholdet må være høyst 5\n                        g per 100 g.\n                      </li>\n                      <li>\n                        For flytende næringsmidler, sukkerinnholdet må være\n                        høyst 2,5 g per 100 ml.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n\n                {/* No added sugars */}\n                {withNoAddedSugars ? (\n                  <div>\n                    <p>** Uten tilsatt sukker:</p>\n                    <p>\n                      Dette produktet er ikke tilsatt monosakkarider,\n                      disakkarider eller andre næringsmidler på grunn av deres\n                      søtende egenskaper og oppfyller kravet for \"Uten tilsatt\n                      sukker\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Uten tilsatt sukker\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        Produktet må ikke være tilsatt monosakkarider,\n                        disakkarider eller andre næringsmidler på grunn av deres\n                        søtende egenskaper.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"ernaerings\")}\n                />\n              </div>\n            </div>\n            {infoErnaerings ? (\n              // Information section for \"Ernæringspåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"ernaerings\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for Helsepåstander results  */}\n        {showHelsepåstander && (\n          <div\n            className=\"container helsepåstander-food-result-container\"\n            style={{ background: \"#f2f0b5\" }}\n          >\n            <h5>Helsepåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Under utvikling. </p>\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"helsepåstander\")}\n                />\n              </div>\n            </div>\n            {infoHelsepåstander ? (\n              // Information section for \"Helsepåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"helsepåstander\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"15px\" }}></div>\n        {/* conditional rendering for the buttons using showButtons state */}\n        {showButtons && (\n          <div className=\"d-flex justify-content-between\">\n            {/* Save button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-save\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Lagre produkt\n            </button>\n\n            {/* Share button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-share\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Del produkt\n            </button>\n\n            {/* Add a new product button */}\n            <button\n              className=\"btn btn-primary\"\n              onClick={() => window.location.reload()}\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-plus\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Legg til et nytt produkt\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Melk13b;\n","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Melk13a.js",["400","401","402","403"],[],"import React from \"react\";\nimport { useState, useEffect } from \"react\"; // import the useState and useeffect hook.\nimport { faCircleExclamation } from \"@fortawesome/free-solid-svg-icons\"; // import an icon.\nimport { faBan } from \"@fortawesome/free-solid-svg-icons\";\nimport { faSave, faShare, faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"; // import FontAwesomeIcon component.\nimport Tooltip from \"@mui/material/Tooltip\"; // import Tooltip component.\nimport keyholeLgog from \"./circle-keyhole-logo.png\"; // import an image\nimport { faCircleInfo } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport { faXmarkCircle } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport Select from \"react-select\"; // import Select component\n\nconst Melk13a = () => {\n  // State variables for showing results and empty result message\n  const [showNokkelhulletResults, setShowNokkelhulletResults] = useState(null);\n  const [showErnaeringsResults, setShowErnaeringsResults] = useState(null);\n  const [showHelsepåstander, setShowHelsepåstander] = useState(null);\n  const [showEmptyResult, setShowEmptyResult] = useState(\"\"); // initialize state variable for showing empty result message.\n\n  //state variable to store the user's food type selection (solid or liquid) and the low sugars claim result\n  const [foodType, setFoodType] = useState(\"\");\n  const [lowSugars, setLowSugars] = useState(null);\n\n  //state variable to track whether the product meets the WITH NO ADDED SUGARS claim or not\n  const [withNoAddedSugars, setWithNoAddedSugars] = useState(false);\n\n  // State variable for tracking if the button is clicked\n  const [buttonClicked, setButtonClicked] = useState(false);\n\n  // useEffect hook for checking the condition for the \"WITH NO ADDED SUGARS\" claim when button is clicked\n  useEffect(() => {\n    if (buttonClicked) {\n      if (withNoAddedSugars) {\n        setShowErnaeringsResults(true);\n      } else {\n        setShowErnaeringsResults(false);\n      }\n    }\n  }, [withNoAddedSugars, buttonClicked]);\n\n  //state for controlling the buttons' visibility\n  const [showButtons, setShowButtons] = useState(false);\n\n  // State variables to control the visibility of the information sections\n  const [infoNokkelhullet, setInfoNokkelhullet] = useState(false);\n  const [infoErnaerings, setInfoErnaerings] = useState(false);\n  const [infoHelsepåstander, setInfoHelsepåstander] = useState(false);\n\n  // Function to show an information section based on the container parameter\n  const onClickInfo = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(true);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(true);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(true);\n    }\n  };\n\n  // Function to hide an information section based on the container parameter\n  const onClickClose = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(false);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(false);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(false);\n    }\n  };\n\n  // State variables for handling input fields and validation errors\n  const [energikj, setEnergikj] = useState(false);\n  const [energikcal, setEnergikcal] = useState(false);\n\n  const [fett, setFett] = useState(false);\n  const [fettNull, setFettNull] = useState(false);\n  const [mettede, setMettede] = useState(false);\n  const [karbohydrat, setKarbohydrat] = useState(false);\n  const [hvoravSukkerarter, setHvoravSukkerarter] = useState(false);\n  const [hvoravSukkerarterNull, setHvoravSukkerarterNull] = useState(false);\n  const [kostfiber, setKostfiber] = useState(false);\n  const [protein, setProtein] = useState(false);\n  const [salt, setSalt] = useState(false);\n\n  // State variable for storing nutrition information entered by user\n  const [nutrition, setNutrition] = useState({\n    energikj: \"\",\n    energikcal: \"\",\n    fett: \"\",\n    mettede: \"\",\n    karbohydrat: \"\",\n    hvoravSukkerarter: \"\",\n    kostfiber: \"\",\n    protein: \"\",\n    salt: \"\",\n  });\n\n  // Handler for updating nutrition state/state variable based on input field changes/input values\n  const changeHandle = (event) => {\n    console.log(\"changeHandle ===\", event.target, event.target.value);\n    setNutrition({\n      ...nutrition,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  // define function to handle form submission\n  const onClick = (e) => {\n    e.preventDefault();\n    setButtonClicked(true);\n    setShowHelsepåstander(true);\n    setShowButtons(true);\n\n    console.log(\"onclick ===\", selectsPart, nutrition);\n\n    // Check if all required fields are filled out and within valid ranges\n    // The if statement checks if all required inputs are non-empty and meet the nutritional requirements\n    if (\n      nutrition.fett !== \"\" &&\n      nutrition.fett <= 1.5 &&\n      nutrition.mettede !== \"\" &&\n      nutrition.karbohydrat !== \"\" &&\n      nutrition.hvoravSukkerarter !== \"\" &&\n      nutrition.hvoravSukkerarter <= 4 &&\n      nutrition.kostfiber !== \"\" &&\n      nutrition.protein !== \"\" &&\n      nutrition.salt !== \"\"\n    ) {\n      // If all requirements are met, display the nutrition results\n      setShowNokkelhulletResults(true);\n      // Hide any empty result messages or error messages\n      setShowEmptyResult(false);\n\n      // Check if the user selected \"energikj\" and if nutrition input lable of \"energikj\" is not empty\n      if (selectsPart === \"energikj\" && nutrition.energikj !== \"\") {\n        setEnergikj(false);\n      }\n\n      // Check if the user selected \"energikcal\" and if nutrition input lable of \"energikcal\" is not empty\n      if (selectsPart === \"energikcal\" && nutrition.energikcal !== \"\") {\n        setEnergikcal(false);\n      }\n      // Reset all input validation errors\n      setFett(false);\n      setFettNull(false);\n      setMettede(false);\n      setKarbohydrat(false);\n      setHvoravSukkerarter(false);\n      setHvoravSukkerarterNull(false);\n      setKostfiber(false);\n      setProtein(false);\n      setSalt(false);\n\n      // If the user has not selected any nutrients, set errors accordingly\n      // Check each nutrition value to see if it is missing or negative\n      // show input validation errors if any input is missing or negative.\n    } else {\n      if (selectsPart === \"energikj\") {\n        console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n        if (nutrition.energikj === \"\" || nutrition.energikj < 0) {\n          console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n          setEnergikj(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikj(false);\n        }\n      }\n\n      if (selectsPart === \"energikcal\") {\n        console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n        if (nutrition.energikcal === \"\" || nutrition.energikcal < 0) {\n          console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n          setEnergikcal(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikcal(false);\n        }\n      }\n\n      // repeat for each nutrition value...\n      if (nutrition.fett === \"\" || nutrition.fett < 0) {\n        setFettNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setFettNull(false);\n      }\n      if (nutrition.fett > 1.5) {\n        setFett(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setFett(false);\n      }\n\n      if (nutrition.mettede === \"\" || nutrition.mettede < 0) {\n        setMettede(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setMettede(false);\n      }\n\n      // Check if the 'karbohydrat' input is missing or negative, and display an error message if necessary\n      if (nutrition.karbohydrat === \"\" || nutrition.karbohydrat < 0) {\n        setKarbohydrat(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKarbohydrat(false);\n      }\n\n      // Check if the 'hvoravSukkerarter' input is missing, negative or above the maximum allowed value (1),\n      // and display an error message if necessary\n      if (\n        nutrition.hvoravSukkerarter === \"\" ||\n        nutrition.hvoravSukkerarter < 0\n      ) {\n        setHvoravSukkerarterNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setHvoravSukkerarterNull(false);\n      }\n      if (nutrition.hvoravSukkerarter > 4) {\n        setHvoravSukkerarter(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setHvoravSukkerarter(false);\n      }\n\n      if (nutrition.kostfiber === \"\" || nutrition.kostfiber < 0) {\n        setKostfiber(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKostfiber(false);\n      }\n\n      if (nutrition.protein === \"\" || nutrition.protein < 0) {\n        setProtein(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setProtein(false);\n      }\n\n      if (nutrition.salt === \"\" || nutrition.salt < 0) {\n        setSalt(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setSalt(false);\n      }\n    }\n\n    // Check for the \"LOW SUGARS\" claim\n    if (foodType === \"solid\" && parseFloat(nutrition.karbohydrat) <= 5) {\n      setLowSugars(true);\n    } else if (\n      foodType === \"liquid\" &&\n      parseFloat(nutrition.karbohydrat) <= 2.5\n    ) {\n      setLowSugars(true);\n    } else {\n      setLowSugars(false);\n    }\n\n    // Check the condition for the \"WITH NO ADDED SUGARS\" nutrition claim\n    if (nutrition.hvoravSukkerarter === \"0\" && nutrition.karbohydrat > 0) {\n      setWithNoAddedSugars(true);\n    } else {\n      setWithNoAddedSugars(false);\n    }\n  };\n\n  // create an array of energy units to select from\n  const selectUnit = [\n    {\n      value: \"energikj\",\n      label: \"(kj)\",\n    },\n    {\n      value: \"energikcal\",\n      label: \"(kcal)\",\n    },\n  ];\n\n  // Declare a state variable for the select dropdown.\n  const [selectsPart, setSelectPart] = useState(\"\");\n\n  // A function to handle changes to the select dropdown energy unit\n  const handlerPart = (event) => {\n    const inputVal = document.getElementsByName(event.value);\n    console.log(\"handlerPart ===\", event, nutrition, inputVal);\n    setSelectPart(event.value);\n  };\n\n  //create an array of food types to select from\n  const foodTypes = [\n    {\n      value: \"solid\",\n      label: \"Fast form\",\n    },\n    {\n      value: \"liquid\",\n      label: \"Flytende form\",\n    },\n  ];\n\n  return (\n    <div className=\"row\">\n      {/* This div creates a column layout for the left side of the table */}\n      <div className=\"col-md-6\">\n        {/* the selector (dropdown menu) for choosing the food type. */}\n        <div className=\"form-group\">\n          <label htmlFor=\"foodType\">Velg type matvare:</label>\n          <Select\n            className=\"form-control\"\n            id=\"foodType\"\n            options={foodTypes}\n            onChange={(e) => setFoodType(e.value)} // update the onFoodTypeChange function to directly set the food type state\n            placeholder=\"Velg type matvare\"\n          />\n        </div>\n\n        <h5>\n          Næringsinnhold per 100{\" \"}\n          {foodType === \"solid\" ? \"g\" : foodType === \"liquid\" ? \"ml\" : \"g/ml\"}\n        </h5>\n\n        {/* This div adds a light background color to the table */}\n        <div className=\"bg-light\">\n          {/* This table shows the nutritional information */}\n          <table className=\"table table-striped\">\n            {/* The table header */}\n            <thead>\n              <tr>\n                <th scope=\"col\" className=\"table-font\">\n                  Energi eller næringsstoff\n                </th>\n                <th scope=\"col\" className=\"table-font\">\n                  Mengde\n                </th>\n              </tr>\n            </thead>\n\n            {/* The table body */}\n            <tbody>\n              {/* This row shows the energy content */}\n              <tr className={(energikj, energikcal ? \"alert-box\" : null)}>\n                <th scope=\"row\" className=\"table-font\">\n                  {/* An icon with a tooltip to indicate missing values in energy parameters */}\n                  {energikj && energikcal ? (\n                    <Tooltip\n                      title=\"Mangler verdi i energi (kJ/Kcal) parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  {/* This div displays the energy label and unit */}\n                  <div className=\"row\">\n                    <div className=\"col-md-3\">\n                      <label for=\"energiunit\" class=\"form-label\">\n                        Energi\n                      </label>\n                    </div>\n                    {/* A dropdown menu for selecting the energy unit */}\n                    <div className=\"col-md-6\">\n                      <Select\n                        placeholder={<div>Velg enhet</div>}\n                        className=\"form-select-md mb-3\"\n                        options={selectUnit}\n                        onChange={(e) => handlerPart(e)}\n                      />\n                    </div>\n                  </div>\n                </th>\n                {/* An input field for entering the energy value */}\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name={selectsPart}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* Additional rows for other nutrient selections */}\n              {/* This row shows the fat content */}\n              <tr\n                className={\n                  fett ? \"alert-box\" : null || fettNull ? \"alert-box\" : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {fett ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden fett. Mengden på fett må være lavere enn eller lik 1.5 / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {fettNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i fett parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Fett (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"fett\"\n                    value={nutrition.fett}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the saturated fat content */}\n              <tr className={mettede ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {mettede ? (\n                    <Tooltip\n                      title=\"Mangler verdi i mettede fettsyrer parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Mettede fettsyrer (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"mettede\"\n                    value={nutrition.mettede}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the carbohydrate (total sugars)content */}\n              <tr className={karbohydrat ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {/* If the \"karbohydrat\" value is missing, display an exclamation icon with a tooltip */}\n                  {karbohydrat ? (\n                    <Tooltip\n                      title=\"Mangler verdi i karbohydrat parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Karbohydrat (g)\n                </th>\n                {/* Input field for \"karbohydrat\" value */}\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"karbohydrat\"\n                    value={nutrition.karbohydrat}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows hvorav tilsatte sukkerarter (added sugars)content */}\n              <tr\n                className={\n                  hvoravSukkerarter\n                    ? \"alert-box\"\n                    : null || hvoravSukkerarterNull\n                    ? \"alert-box\"\n                    : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {/* If the \"hvoravSukkerarter\" value is too high, display a ban icon with a tooltip */}\n                  {hvoravSukkerarter ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden hvoravSukkerarter. Mengden på hvoravSukkerarter må være lavere enn eller lik 4 g/ 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {/* If the \"hvoravSukkerarter\" value is missing, display an exclamation icon with a tooltip */}\n                  {hvoravSukkerarterNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i hvorav sukkerarter parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Hvorav tilsatte sukkerarter (g)\n                </th>\n                {/* Input field for \"hvoravSukkerarter\" value */}\n\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"hvoravSukkerarter\"\n                    value={nutrition.hvoravSukkerarter}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows kostfiber content */}\n              <tr className={kostfiber ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {kostfiber ? (\n                    <Tooltip\n                      title=\"Mangler verdi i kostfiber parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Kostfiber (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"kostfiber\"\n                    value={nutrition.kostfiber}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the protein content */}\n              <tr className={protein ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {protein ? (\n                    <Tooltip\n                      title=\"Mangler verdi i protein parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Protein (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"protein\"\n                    value={nutrition.protein}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows salt content */}\n              <tr className={salt ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {salt ? (\n                    <Tooltip\n                      title=\"Mangler verdi i salt parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Salt (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"salt\"\n                    value={nutrition.salt}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n\n        {/* Button that submits the form and calls the onClick function */}\n        <div className=\"col-12 button-div\">\n          <button\n            type=\"submit\"\n            className=\"btn btn-primary btn-lg button-search\"\n            onClick={onClick}\n          >\n            Beregn\n          </button>\n        </div>\n      </div>\n\n      <div className=\"col-md-6\">\n        {/* positive results nøkkelhullet container\" */}\n        {showNokkelhulletResults ? (\n          <div className=\"container nøkkelhullet-food-result-container\">\n            {/* An image with class \"keyhole-logo\" and alt text \"keyhole logo\" */}\n            <img\n              src={keyholeLgog}\n              className=\"keyhole-logo img-fluid\"\n              alt=\"keyhole logo\"\n            />\n            {/* A heading with text \"Nøkkelhullet\" */}\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir Nøkkelhullet. </p>\n              </div>\n              <div className=\"col-md-2\">\n                {/* FontAwesome icon with event listener to show the \"Nøkkelhullet\" information section */}\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  {/* A paragraph with a link to Lovdata's \"Forskrift om frivillig merking a nœringsmidler med Nokkellhullet\" */}\n                  <p>\n                    Les mer om hvilke krav det stilles for merking av\n                    Nokkellhullet på Lovdatas \"Forskrift om frivillig merking a\n                    nœringsmidler med Nokkellhullet\":\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  {/* FontAwesome icon with event listener to hide the \"Nøkkelhullet\" information section */}\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        ) : null}\n        {/*Negative results nøkkelhullet container\" */}\n        {showNokkelhulletResults === false && (\n          <div className=\"container nøkkelhullet-food-negResult-container\">\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir ikke Nøkkelhullet.</p>\n                {showEmptyResult ? (\n                  <p>** Obligatoriske næringsverdier kan ikke være tomme.</p>\n                ) : null}\n\n                {fett ? (\n                  <p>** Fett verdien kan være høyst 1.5 g/100 g.</p>\n                ) : null}\n\n                {hvoravSukkerarter ? (\n                  <p>\n                    ** Tilsatte sukkerarter verdien kan være høyst 4 g/100 g.\n                  </p>\n                ) : null}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om frivillig merking av næringsmidler med Nøkkelhullet:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for ernæringspåstander if there are all true results */}\n        {buttonClicked && (\n          <div\n            className={\n              lowSugars && withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-all\"\n                : !lowSugars && !withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-none\"\n                : \"container ernæringspåstander-food-result-container-some\"\n            }\n          >\n            <h5>Ernæringspåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                {/* Low sugars */}\n                {lowSugars ? (\n                  <div>\n                    <p>** Lavt sukkerinnhold:</p>\n                    <p>\n                      Dette produktet inneholder høyst 5 g sukkerarter per 100 g\n                      for næringsmidler i fast form, eller høyst 2,5 g\n                      sukkerarter per 100 ml for næringsmidler i flytende form\n                      og oppfyller kravet for \"Lavt sukkerinnhold\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Lavt sukkerinnhold\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        For faste næringsmidler, sukkerinnholdet må være høyst 5\n                        g per 100 g.\n                      </li>\n                      <li>\n                        For flytende næringsmidler, sukkerinnholdet må være\n                        høyst 2,5 g per 100 ml.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n\n                {/* No added sugars */}\n                {withNoAddedSugars ? (\n                  <div>\n                    <p>** Uten tilsatt sukker:</p>\n                    <p>\n                      Dette produktet er ikke tilsatt monosakkarider,\n                      disakkarider eller andre næringsmidler på grunn av deres\n                      søtende egenskaper og oppfyller kravet for \"Uten tilsatt\n                      sukker\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Uten tilsatt sukker\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        Produktet må ikke være tilsatt monosakkarider,\n                        disakkarider eller andre næringsmidler på grunn av deres\n                        søtende egenskaper.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"ernaerings\")}\n                />\n              </div>\n            </div>\n            {infoErnaerings ? (\n              // Information section for \"Ernæringspåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"ernaerings\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for Helsepåstander results  */}\n        {showHelsepåstander && (\n          <div\n            className=\"container helsepåstander-food-result-container\"\n            style={{ background: \"#f2f0b5\" }}\n          >\n            <h5>Helsepåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Under utvikling. </p>\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"helsepåstander\")}\n                />\n              </div>\n            </div>\n            {infoHelsepåstander ? (\n              // Information section for \"Helsepåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"helsepåstander\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"15px\" }}></div>\n        {/* conditional rendering for the buttons using showButtons state */}\n        {showButtons && (\n          <div className=\"d-flex justify-content-between\">\n            {/* Save button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-save\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Lagre produkt\n            </button>\n\n            {/* Share button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-share\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Del produkt\n            </button>\n\n            {/* Add a new product button */}\n            <button\n              className=\"btn btn-primary\"\n              onClick={() => window.location.reload()}\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-plus\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Legg til et nytt produkt\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Melk13a;\n","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Melk14a.js",["404","405","406","407"],[],"import React from \"react\";\nimport { useState, useEffect } from \"react\"; // import the useState and useeffect hook.\nimport { faCircleExclamation } from \"@fortawesome/free-solid-svg-icons\"; // import an icon.\nimport { faBan } from \"@fortawesome/free-solid-svg-icons\";\nimport { faSave, faShare, faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"; // import FontAwesomeIcon component.\nimport Tooltip from \"@mui/material/Tooltip\"; // import Tooltip component.\nimport keyholeLgog from \"./circle-keyhole-logo.png\"; // import an image\nimport { faCircleInfo } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport { faXmarkCircle } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport Select from \"react-select\"; // import Select component\n\nconst Melk14a = () => {\n  // State variables for showing results and empty result message\n  const [showNokkelhulletResults, setShowNokkelhulletResults] = useState(null);\n  const [showErnaeringsResults, setShowErnaeringsResults] = useState(null);\n  const [showHelsepåstander, setShowHelsepåstander] = useState(null);\n  const [showEmptyResult, setShowEmptyResult] = useState(\"\"); // initialize state variable for showing empty result message.\n\n  //state variable to store the user's food type selection (solid or liquid) and the low sugars claim result\n  const [foodType, setFoodType] = useState(\"\");\n  const [lowSugars, setLowSugars] = useState(null);\n\n  //state variable to track whether the product meets the WITH NO ADDED SUGARS claim or not\n  const [withNoAddedSugars, setWithNoAddedSugars] = useState(false);\n\n  // State variable for tracking if the button is clicked\n  const [buttonClicked, setButtonClicked] = useState(false);\n\n  // useEffect hook for checking the condition for the \"WITH NO ADDED SUGARS\" claim when button is clicked\n  useEffect(() => {\n    if (buttonClicked) {\n      if (withNoAddedSugars) {\n        setShowErnaeringsResults(true);\n      } else {\n        setShowErnaeringsResults(false);\n      }\n    }\n  }, [withNoAddedSugars, buttonClicked]);\n\n  //state for controlling the buttons' visibility\n  const [showButtons, setShowButtons] = useState(false);\n\n  // State variables to control the visibility of the information sections\n  const [infoNokkelhullet, setInfoNokkelhullet] = useState(false);\n  const [infoErnaerings, setInfoErnaerings] = useState(false);\n  const [infoHelsepåstander, setInfoHelsepåstander] = useState(false);\n\n  // Function to show an information section based on the container parameter\n  const onClickInfo = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(true);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(true);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(true);\n    }\n  };\n\n  // Function to hide an information section based on the container parameter\n  const onClickClose = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(false);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(false);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(false);\n    }\n  };\n\n  // State variables for handling input fields and validation errors\n  const [energikj, setEnergikj] = useState(false);\n  const [energikcal, setEnergikcal] = useState(false);\n\n  const [fett, setFett] = useState(false);\n  const [fettNull, setFettNull] = useState(false);\n  const [mettede, setMettede] = useState(false);\n  const [karbohydrat, setKarbohydrat] = useState(false);\n  const [hvoravSukkerarter, setHvoravSukkerarter] = useState(false);\n  const [kostfiber, setKostfiber] = useState(false);\n  const [protein, setProtein] = useState(false);\n  const [salt, setSalt] = useState(false);\n  // State variable for storing nutrition information entered by user\n  const [nutrition, setNutrition] = useState({\n    energikj: \"\",\n    energikcal: \"\",\n    fett: \"\",\n    mettede: \"\",\n    karbohydrat: \"\",\n    hvoravSukkerarter: \"\",\n    kostfiber: \"\",\n    protein: \"\",\n    salt: \"\",\n  });\n\n  // Handler for updating nutrition state/state variable based on input field changes/input values\n  const changeHandle = (event) => {\n    console.log(\"changeHandle ===\", event.target, event.target.value);\n    setNutrition({\n      ...nutrition,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  // define function to handle form submission\n  const onClick = (e) => {\n    e.preventDefault();\n    setButtonClicked(true);\n    setShowHelsepåstander(true);\n    setShowButtons(true);\n\n    console.log(\"onclick ===\", selectsPart, nutrition);\n\n    // Check if all required fields are filled out and within valid ranges\n    // The if statement checks if all required inputs are non-empty and meet the nutritional requirements\n    if (\n      nutrition.fett !== \"\" &&\n      nutrition.fett <= 5 &&\n      nutrition.mettede !== \"\" &&\n      nutrition.karbohydrat !== \"\" &&\n      nutrition.hvoravSukkerarter !== \"\" &&\n      nutrition.kostfiber !== \"\" &&\n      nutrition.protein !== \"\" &&\n      nutrition.salt !== \"\"\n    ) {\n      // If all requirements are met, display the nutrition results\n      setShowNokkelhulletResults(true);\n      // Hide any empty result messages or error messages\n      setShowEmptyResult(false);\n\n      // Check if the user selected \"energikj\" and if nutrition input lable of \"energikj\" is not empty\n      if (selectsPart === \"energikj\" && nutrition.energikj !== \"\") {\n        setEnergikj(false);\n      }\n\n      // Check if the user selected \"energikcal\" and if nutrition input lable of \"energikcal\" is not empty\n      if (selectsPart === \"energikcal\" && nutrition.energikcal !== \"\") {\n        setEnergikcal(false);\n      }\n      // Reset all input validation errors\n      setFett(false);\n      setFettNull(false);\n      setMettede(false);\n      setKarbohydrat(false);\n      setHvoravSukkerarter(false);\n      setKostfiber(false);\n      setProtein(false);\n      setSalt(false);\n      // If the user has not selected any nutrients, set errors accordingly\n      // Check each nutrition value to see if it is missing or negative\n      // show input validation errors if any input is missing or negative.\n    } else {\n      if (selectsPart === \"energikj\") {\n        console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n        if (nutrition.energikj === \"\" || nutrition.energikj < 0) {\n          console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n          setEnergikj(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikj(false);\n        }\n      }\n\n      if (selectsPart === \"energikcal\") {\n        console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n        if (nutrition.energikcal === \"\" || nutrition.energikcal < 0) {\n          console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n          setEnergikcal(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikcal(false);\n        }\n      }\n\n      // repeat for each nutrition value...\n      if (nutrition.fett === \"\" || nutrition.fett < 0) {\n        setFettNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setFettNull(false);\n      }\n      if (nutrition.fett > 5) {\n        setFett(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setFett(false);\n      }\n\n      if (nutrition.mettede === \"\" || nutrition.mettede < 0) {\n        setMettede(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setMettede(false);\n      }\n\n      if (nutrition.karbohydrat === \"\" || nutrition.karbohydrat < 0) {\n        setKarbohydrat(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKarbohydrat(false);\n      }\n\n      if (\n        nutrition.hvoravSukkerarter === \"\" ||\n        nutrition.hvoravSukkerarter < 0\n      ) {\n        setHvoravSukkerarter(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setHvoravSukkerarter(false);\n      }\n\n      if (nutrition.kostfiber === \"\" || nutrition.kostfiber < 0) {\n        setKostfiber(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKostfiber(false);\n      }\n\n      if (nutrition.protein === \"\" || nutrition.protein < 0) {\n        setProtein(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setProtein(false);\n      }\n\n      if (nutrition.salt === \"\" || nutrition.salt < 0) {\n        setSalt(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setSalt(false);\n      }\n    }\n\n    // Check for the \"LOW SUGARS\" claim\n    if (foodType === \"solid\" && parseFloat(nutrition.karbohydrat) <= 5) {\n      setLowSugars(true);\n    } else if (\n      foodType === \"liquid\" &&\n      parseFloat(nutrition.karbohydrat) <= 2.5\n    ) {\n      setLowSugars(true);\n    } else {\n      setLowSugars(false);\n    }\n\n    // Check the condition for the \"WITH NO ADDED SUGARS\" nutrition claim\n    if (nutrition.hvoravSukkerarter === \"0\" && nutrition.karbohydrat > 0) {\n      setWithNoAddedSugars(true);\n    } else {\n      setWithNoAddedSugars(false);\n    }\n  };\n\n  // create an array of energy units to select from\n  const selectUnit = [\n    {\n      value: \"energikj\",\n      label: \"(kj)\",\n    },\n    {\n      value: \"energikcal\",\n      label: \"(kcal)\",\n    },\n  ];\n\n  // Declare a state variable for the select dropdown.\n  const [selectsPart, setSelectPart] = useState(\"\");\n\n  // A function to handle changes to the select dropdown energy unit\n  const handlerPart = (event) => {\n    const inputVal = document.getElementsByName(event.value);\n    console.log(\"handlerPart ===\", event, nutrition, inputVal);\n    setSelectPart(event.value);\n  };\n\n  //create an array of food types to select from\n  const foodTypes = [\n    {\n      value: \"solid\",\n      label: \"Fast form\",\n    },\n    {\n      value: \"liquid\",\n      label: \"Flytende form\",\n    },\n  ];\n\n  return (\n    <div className=\"row\">\n      {/* This div creates a column layout for the left side of the table */}\n      <div className=\"col-md-6\">\n        {/* the selector (dropdown menu) for choosing the food type. */}\n        <div className=\"form-group\">\n          <label htmlFor=\"foodType\">Velg type matvare:</label>\n          <Select\n            className=\"form-control\"\n            id=\"foodType\"\n            options={foodTypes}\n            onChange={(e) => setFoodType(e.value)} // update the onFoodTypeChange function to directly set the food type state\n            placeholder=\"Velg type matvare\"\n          />\n        </div>\n\n        <h5>\n          Næringsinnhold per 100{\" \"}\n          {foodType === \"solid\" ? \"g\" : foodType === \"liquid\" ? \"ml\" : \"g/ml\"}\n        </h5>\n\n        {/* This div adds a light background color to the table */}\n        <div className=\"bg-light\">\n          {/* This table shows the nutritional information */}\n          <table className=\"table table-striped\">\n            {/* The table header */}\n            <thead>\n              <tr>\n                <th scope=\"col\" className=\"table-font\">\n                  Energi eller næringsstoff\n                </th>\n                <th scope=\"col\" className=\"table-font\">\n                  Mengde\n                </th>\n              </tr>\n            </thead>\n\n            {/* The table body */}\n            <tbody>\n              {/* This row shows the energy content */}\n              <tr className={(energikj, energikcal ? \"alert-box\" : null)}>\n                <th scope=\"row\" className=\"table-font\">\n                  {/* An icon with a tooltip to indicate missing values in energy parameters */}\n                  {energikj && energikcal ? (\n                    <Tooltip\n                      title=\"Mangler verdi i energi (kJ/Kcal) parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  {/* This div displays the energy label and unit */}\n                  <div className=\"row\">\n                    <div className=\"col-md-3\">\n                      <label for=\"energiunit\" class=\"form-label\">\n                        Energi\n                      </label>\n                    </div>\n                    {/* A dropdown menu for selecting the energy unit */}\n                    <div className=\"col-md-6\">\n                      <Select\n                        placeholder={<div>Velg enhet</div>}\n                        className=\"form-select-md mb-3\"\n                        options={selectUnit}\n                        onChange={(e) => handlerPart(e)}\n                      />\n                    </div>\n                  </div>\n                </th>\n                {/* An input field for entering the energy value */}\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name={selectsPart}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* Additional rows for other nutrient selections */}\n              {/* This row shows the fat content */}\n              <tr\n                className={\n                  fett ? \"alert-box\" : null || fettNull ? \"alert-box\" : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {fett ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden fett. Mengden på fett må være lavere enn eller lik 5 / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {fettNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i fett parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Fett (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"fett\"\n                    value={nutrition.fett}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the saturated fat content */}\n              <tr className={mettede ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {mettede ? (\n                    <Tooltip\n                      title=\"Mangler verdi i mettede fettsyrer parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Mettede fettsyrer (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"mettede\"\n                    value={nutrition.mettede}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the carbohydrate content */}\n              <tr className={karbohydrat ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {karbohydrat ? (\n                    <Tooltip\n                      title=\"Mangler verdi i karbohydrat parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Karbohydrat (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"karbohydrat\"\n                    value={nutrition.karbohydrat}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows hvorav sukkerarter content */}\n              <tr className={hvoravSukkerarter ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {hvoravSukkerarter ? (\n                    <Tooltip\n                      title=\"Mangler verdi i hvorav sukkerarter parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Hvorav tilsatte sukkerarter (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"hvoravSukkerarter\"\n                    value={nutrition.hvoravSukkerarter}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows kostfiber content */}\n              <tr className={kostfiber ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {kostfiber ? (\n                    <Tooltip\n                      title=\"Mangler verdi i kostfiber parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Kostfiber (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"kostfiber\"\n                    value={nutrition.kostfiber}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the protein content */}\n              <tr className={protein ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {protein ? (\n                    <Tooltip\n                      title=\"Mangler verdi i protein parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Protein (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"protein\"\n                    value={nutrition.protein}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows salt content */}\n              <tr className={salt ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {salt ? (\n                    <Tooltip\n                      title=\"Mangler verdi i salt parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Salt (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"salt\"\n                    value={nutrition.salt}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n\n        {/* Button that submits the form and calls the onClick function */}\n        <div className=\"col-12 button-div\">\n          <button\n            type=\"submit\"\n            className=\"btn btn-primary btn-lg button-search\"\n            onClick={onClick}\n          >\n            Beregn\n          </button>\n        </div>\n      </div>\n\n      <div className=\"col-md-6\">\n        {/* positive results nøkkelhullet container\" */}\n        {showNokkelhulletResults ? (\n          <div className=\"container nøkkelhullet-food-result-container\">\n            {/* An image with class \"keyhole-logo\" and alt text \"keyhole logo\" */}\n            <img\n              src={keyholeLgog}\n              className=\"keyhole-logo img-fluid\"\n              alt=\"keyhole logo\"\n            />\n            {/* A heading with text \"Nøkkelhullet\" */}\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir Nøkkelhullet. </p>\n              </div>\n              <div className=\"col-md-2\">\n                {/* FontAwesome icon with event listener to show the \"Nøkkelhullet\" information section */}\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  {/* A paragraph with a link to Lovdata's \"Forskrift om frivillig merking a nœringsmidler med Nokkellhullet\" */}\n                  <p>\n                    Les mer om hvilke krav det stilles for merking av\n                    Nokkellhullet på Lovdatas \"Forskrift om frivillig merking a\n                    nœringsmidler med Nokkellhullet\":\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  {/* FontAwesome icon with event listener to hide the \"Nøkkelhullet\" information section */}\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        ) : null}\n        {/*Negative results nøkkelhullet container\" */}\n        {showNokkelhulletResults === false && (\n          <div className=\"container nøkkelhullet-food-negResult-container\">\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir ikke Nøkkelhullet.</p>\n                {showEmptyResult ? (\n                  <p>** Obligatoriske næringsverdier kan ikke være tomme.</p>\n                ) : null}\n\n                {fett ? <p>** Fett verdien kan være høyst 5 g/100 g.</p> : null}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om frivillig merking av næringsmidler med Nøkkelhullet:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for ernæringspåstander if there are all true results */}\n        {buttonClicked && (\n          <div\n            className={\n              lowSugars && withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-all\"\n                : !lowSugars && !withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-none\"\n                : \"container ernæringspåstander-food-result-container-some\"\n            }\n          >\n            <h5>Ernæringspåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                {/* Low sugars */}\n                {lowSugars ? (\n                  <div>\n                    <p>** Lavt sukkerinnhold:</p>\n                    <p>\n                      Dette produktet inneholder høyst 5 g sukkerarter per 100 g\n                      for næringsmidler i fast form, eller høyst 2,5 g\n                      sukkerarter per 100 ml for næringsmidler i flytende form\n                      og oppfyller kravet for \"Lavt sukkerinnhold\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Lavt sukkerinnhold\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        For faste næringsmidler, sukkerinnholdet må være høyst 5\n                        g per 100 g.\n                      </li>\n                      <li>\n                        For flytende næringsmidler, sukkerinnholdet må være\n                        høyst 2,5 g per 100 ml.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n\n                {/* No added sugars */}\n                {withNoAddedSugars ? (\n                  <div>\n                    <p>** Uten tilsatt sukker:</p>\n                    <p>\n                      Dette produktet er ikke tilsatt monosakkarider,\n                      disakkarider eller andre næringsmidler på grunn av deres\n                      søtende egenskaper og oppfyller kravet for \"Uten tilsatt\n                      sukker\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Uten tilsatt sukker\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        Produktet må ikke være tilsatt monosakkarider,\n                        disakkarider eller andre næringsmidler på grunn av deres\n                        søtende egenskaper.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"ernaerings\")}\n                />\n              </div>\n            </div>\n            {infoErnaerings ? (\n              // Information section for \"Ernæringspåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"ernaerings\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for Helsepåstander results  */}\n        {showHelsepåstander && (\n          <div\n            className=\"container helsepåstander-food-result-container\"\n            style={{ background: \"#f2f0b5\" }}\n          >\n            <h5>Helsepåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Under utvikling. </p>\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"helsepåstander\")}\n                />\n              </div>\n            </div>\n            {infoHelsepåstander ? (\n              // Information section for \"Helsepåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"helsepåstander\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"15px\" }}></div>\n        {/* conditional rendering for the buttons using showButtons state */}\n        {showButtons && (\n          <div className=\"d-flex justify-content-between\">\n            {/* Save button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-save\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Lagre produkt\n            </button>\n\n            {/* Share button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-share\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Del produkt\n            </button>\n\n            {/* Add a new product button */}\n            <button\n              className=\"btn btn-primary\"\n              onClick={() => window.location.reload()}\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-plus\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Legg til et nytt produkt\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Melk14a;\n","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Melk14b.js",["408","409","410","411"],[],"import React from \"react\";\nimport { useState, useEffect } from \"react\"; // import the useState and useeffect hook.\nimport { faCircleExclamation } from \"@fortawesome/free-solid-svg-icons\"; // import an icon.\nimport { faBan } from \"@fortawesome/free-solid-svg-icons\";\nimport { faSave, faShare, faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"; // import FontAwesomeIcon component.\nimport Tooltip from \"@mui/material/Tooltip\"; // import Tooltip component.\nimport keyholeLgog from \"./circle-keyhole-logo.png\"; // import an image\nimport { faCircleInfo } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport { faXmarkCircle } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport Select from \"react-select\"; // import Select component\n\nconst Melk14b = () => {\n  // State variables for showing results and empty result message\n  const [showNokkelhulletResults, setShowNokkelhulletResults] = useState(null);\n  const [showErnaeringsResults, setShowErnaeringsResults] = useState(null);\n  const [showHelsepåstander, setShowHelsepåstander] = useState(null);\n  const [showEmptyResult, setShowEmptyResult] = useState(\"\"); // initialize state variable for showing empty result message.\n\n  //state variable to store the user's food type selection (solid or liquid) and the low sugars claim result\n  const [foodType, setFoodType] = useState(\"\");\n  const [lowSugars, setLowSugars] = useState(null);\n\n  //state variable to track whether the product meets the WITH NO ADDED SUGARS claim or not\n  const [withNoAddedSugars, setWithNoAddedSugars] = useState(false);\n\n  // State variable for tracking if the button is clicked\n  const [buttonClicked, setButtonClicked] = useState(false);\n\n  // useEffect hook for checking the condition for the \"WITH NO ADDED SUGARS\" claim when button is clicked\n  useEffect(() => {\n    if (buttonClicked) {\n      if (withNoAddedSugars) {\n        setShowErnaeringsResults(true);\n      } else {\n        setShowErnaeringsResults(false);\n      }\n    }\n  }, [withNoAddedSugars, buttonClicked]);\n\n  //state for controlling the buttons' visibility\n  const [showButtons, setShowButtons] = useState(false);\n\n  // State variables to control the visibility of the information sections\n  const [infoNokkelhullet, setInfoNokkelhullet] = useState(false);\n  const [infoErnaerings, setInfoErnaerings] = useState(false);\n  const [infoHelsepåstander, setInfoHelsepåstander] = useState(false);\n\n  // Function to show an information section based on the container parameter\n  const onClickInfo = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(true);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(true);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(true);\n    }\n  };\n\n  // Function to hide an information section based on the container parameter\n  const onClickClose = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(false);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(false);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(false);\n    }\n  };\n\n  // State variables for handling input fields and validation errors\n  const [energikj, setEnergikj] = useState(false);\n  const [energikcal, setEnergikcal] = useState(false);\n\n  const [fett, setFett] = useState(false);\n  const [fettNull, setFettNull] = useState(false);\n  const [mettede, setMettede] = useState(false);\n  const [mettedeNull, setMettedeNull] = useState(false);\n  const [karbohydrat, setKarbohydrat] = useState(false);\n  const [karbohydratNull, setKarbohydratNull] = useState(false);\n  const [hvoravSukkerarter, setHvoravSukkerarter] = useState(false);\n  const [kostfiber, setKostfiber] = useState(false);\n  const [protein, setProtein] = useState(false);\n  const [salt, setSalt] = useState(false);\n  const [saltNull, setSaltNull] = useState(false);\n\n  // State variable for storing nutrition information entered by user\n  const [nutrition, setNutrition] = useState({\n    energikj: \"\",\n    energikcal: \"\",\n    fett: \"\",\n    mettede: \"\",\n    karbohydrat: \"\",\n    hvoravSukkerarter: \"\",\n    kostfiber: \"\",\n    protein: \"\",\n    salt: \"\",\n  });\n\n  // Handler for updating nutrition state/state variable based on input field changes/input values\n  const changeHandle = (event) => {\n    console.log(\"changeHandle ===\", event.target, event.target.value);\n    setNutrition({\n      ...nutrition,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  // define function to handle form submission\n  const onClick = (e) => {\n    e.preventDefault();\n    setButtonClicked(true);\n    setShowHelsepåstander(true);\n    setShowButtons(true);\n\n    console.log(\"onclick ===\", selectsPart, nutrition);\n\n    // Check if all required fields are filled out and within valid ranges\n    // The if statement checks if all required inputs are non-empty and meet the nutritional requirements\n    if (\n      nutrition.fett !== \"\" &&\n      nutrition.fett <= 5 &&\n      nutrition.mettede !== \"\" &&\n      nutrition.mettede <= 1.65 &&\n      nutrition.karbohydrat !== \"\" &&\n      nutrition.karbohydrat <= 5 &&\n      nutrition.hvoravSukkerarter !== \"\" &&\n      nutrition.kostfiber !== \"\" &&\n      nutrition.protein !== \"\" &&\n      nutrition.salt !== \"\" &&\n      nutrition.salt <= 0.3\n    ) {\n      // If all requirements are met, display the nutrition results\n      setShowNokkelhulletResults(true);\n      // Hide any empty result messages or error messages\n      setShowEmptyResult(false);\n\n      // Check if the user selected \"energikj\" and if nutrition input lable of \"energikj\" is not empty\n      if (selectsPart === \"energikj\" && nutrition.energikj !== \"\") {\n        setEnergikj(false);\n      }\n\n      // Check if the user selected \"energikcal\" and if nutrition input lable of \"energikcal\" is not empty\n      if (selectsPart === \"energikcal\" && nutrition.energikcal !== \"\") {\n        setEnergikcal(false);\n      }\n      // Reset all input validation errors\n      setFett(false);\n      setFettNull(false);\n      setMettede(false);\n      setMettedeNull(false);\n      setKarbohydrat(false);\n      setKarbohydratNull(false);\n      setHvoravSukkerarter(false);\n      setKostfiber(false);\n      setProtein(false);\n      setSalt(false);\n      setSaltNull(false);\n      // If the user has not selected any nutrients, set errors accordingly\n      // Check each nutrition value to see if it is missing or negative\n      // show input validation errors if any input is missing or negative.\n    } else {\n      if (selectsPart === \"energikj\") {\n        console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n        if (nutrition.energikj === \"\" || nutrition.energikj < 0) {\n          console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n          setEnergikj(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikj(false);\n        }\n      }\n\n      if (selectsPart === \"energikcal\") {\n        console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n        if (nutrition.energikcal === \"\" || nutrition.energikcal < 0) {\n          console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n          setEnergikcal(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikcal(false);\n        }\n      }\n\n      // repeat for each nutrition value...\n      if (nutrition.fett === \"\" || nutrition.fett < 0) {\n        setFettNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setFettNull(false);\n      }\n      if (nutrition.fett > 5) {\n        setFett(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setFett(false);\n      }\n\n      if (nutrition.mettede === \"\" || nutrition.mettede < 0) {\n        setMettedeNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setMettedeNull(false);\n      }\n      if (nutrition.mettede > 1.65) {\n        setMettede(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setMettede(false);\n      }\n\n      if (nutrition.karbohydrat === \"\" || nutrition.karbohydrat < 0) {\n        setKarbohydratNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKarbohydratNull(false);\n      }\n      if (nutrition.karbohydrat > 5) {\n        setKarbohydrat(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setKarbohydrat(false);\n      }\n\n      if (\n        nutrition.hvoravSukkerarter === \"\" ||\n        nutrition.hvoravSukkerarter < 0\n      ) {\n        setHvoravSukkerarter(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setHvoravSukkerarter(false);\n      }\n\n      if (nutrition.kostfiber === \"\" || nutrition.kostfiber < 0) {\n        setKostfiber(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKostfiber(false);\n      }\n\n      if (nutrition.protein === \"\" || nutrition.protein < 0) {\n        setProtein(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setProtein(false);\n      }\n\n      if (nutrition.salt === \"\" || nutrition.salt < 0) {\n        setSaltNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setSaltNull(false);\n      }\n      if (nutrition.salt > 0.3) {\n        setSalt(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setSalt(false);\n      }\n    }\n\n    // Check for the \"LOW SUGARS\" claim\n    if (foodType === \"solid\" && parseFloat(nutrition.karbohydrat) <= 5) {\n      setLowSugars(true);\n    } else if (\n      foodType === \"liquid\" &&\n      parseFloat(nutrition.karbohydrat) <= 2.5\n    ) {\n      setLowSugars(true);\n    } else {\n      setLowSugars(false);\n    }\n\n    // Check the condition for the \"WITH NO ADDED SUGARS\" nutrition claim\n    if (nutrition.hvoravSukkerarter === \"0\" && nutrition.karbohydrat > 0) {\n      setWithNoAddedSugars(true);\n    } else {\n      setWithNoAddedSugars(false);\n    }\n  };\n\n  // create an array of energy units to select from\n  const selectUnit = [\n    {\n      value: \"energikj\",\n      label: \"(kj)\",\n    },\n    {\n      value: \"energikcal\",\n      label: \"(kcal)\",\n    },\n  ];\n\n  // Declare a state variable for the select dropdown.\n  const [selectsPart, setSelectPart] = useState(\"\");\n\n  // A function to handle changes to the select dropdown energy unit\n  const handlerPart = (event) => {\n    const inputVal = document.getElementsByName(event.value);\n    console.log(\"handlerPart ===\", event, nutrition, inputVal);\n    setSelectPart(event.value);\n  };\n\n  //create an array of food types to select from\n  const foodTypes = [\n    {\n      value: \"solid\",\n      label: \"Fast form\",\n    },\n    {\n      value: \"liquid\",\n      label: \"Flytende form\",\n    },\n  ];\n\n  return (\n    <div className=\"row\">\n      {/* This div creates a column layout for the left side of the table */}\n      <div className=\"col-md-6\">\n        {/* the selector (dropdown menu) for choosing the food type. */}\n        <div className=\"form-group\">\n          <label htmlFor=\"foodType\">Velg type matvare:</label>\n          <Select\n            className=\"form-control\"\n            id=\"foodType\"\n            options={foodTypes}\n            onChange={(e) => setFoodType(e.value)} // update the onFoodTypeChange function to directly set the food type state\n            placeholder=\"Velg type matvare\"\n          />\n        </div>\n\n        <h5>\n          Næringsinnhold per 100{\" \"}\n          {foodType === \"solid\" ? \"g\" : foodType === \"liquid\" ? \"ml\" : \"g/ml\"}\n        </h5>\n\n        {/* This div adds a light background color to the table */}\n        <div className=\"bg-light\">\n          {/* This table shows the nutritional information */}\n          <table className=\"table table-striped\">\n            {/* The table header */}\n            <thead>\n              <tr>\n                <th scope=\"col\" className=\"table-font\">\n                  Energi eller næringsstoff\n                </th>\n                <th scope=\"col\" className=\"table-font\">\n                  Mengde\n                </th>\n              </tr>\n            </thead>\n\n            {/* The table body */}\n            <tbody>\n              {/* This row shows the energy content */}\n              <tr className={(energikj, energikcal ? \"alert-box\" : null)}>\n                <th scope=\"row\" className=\"table-font\">\n                  {/* An icon with a tooltip to indicate missing values in energy parameters */}\n                  {energikj && energikcal ? (\n                    <Tooltip\n                      title=\"Mangler verdi i energi (kJ/Kcal) parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  {/* This div displays the energy label and unit */}\n                  <div className=\"row\">\n                    <div className=\"col-md-3\">\n                      <label for=\"energiunit\" class=\"form-label\">\n                        Energi\n                      </label>\n                    </div>\n                    {/* A dropdown menu for selecting the energy unit */}\n                    <div className=\"col-md-6\">\n                      <Select\n                        placeholder={<div>Velg enhet</div>}\n                        className=\"form-select-md mb-3\"\n                        options={selectUnit}\n                        onChange={(e) => handlerPart(e)}\n                      />\n                    </div>\n                  </div>\n                </th>\n                {/* An input field for entering the energy value */}\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name={selectsPart}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* Additional rows for other nutrient selections */}\n              {/* This row shows the fat content */}\n              <tr\n                className={\n                  fett ? \"alert-box\" : null || fettNull ? \"alert-box\" : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {fett ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden fett. Mengden på fett må være lavere enn eller lik 5/ 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {fettNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i fett parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Fett (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"fett\"\n                    value={nutrition.fett}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the saturated fat content */}\n              <tr\n                className={\n                  mettede\n                    ? \"alert-box\"\n                    : null || mettedeNull\n                    ? \"alert-box\"\n                    : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {mettede ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden mettede fettsyrer. Mengden på mettede fettsyrer må være lavere enn eller lik 1.65 / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {mettedeNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i mettede fettsyrer parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Mettede fettsyrer (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"mettede\"\n                    value={nutrition.mettede}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the carbohydrate content */}\n              <tr\n                className={\n                  karbohydrat\n                    ? \"alert-box\"\n                    : null || karbohydratNull\n                    ? \"alert-box\"\n                    : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {karbohydrat ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden sukkerarter. Mengden på sukkerarter må være lavere enn eller lik 5 g / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {karbohydratNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i karbohydrat parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Karbohydrat (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"karbohydrat\"\n                    value={nutrition.karbohydrat}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows hvorav sukkerarter content */}\n              <tr className={hvoravSukkerarter ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {hvoravSukkerarter ? (\n                    <Tooltip\n                      title=\"Mangler verdi i hvorav sukkerarter parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Hvorav tilsatte sukkerarter (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"hvoravSukkerarter\"\n                    value={nutrition.hvoravSukkerarter}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows kostfiber content */}\n              <tr className={kostfiber ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {kostfiber ? (\n                    <Tooltip\n                      title=\"Mangler verdi i kostfiber parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Kostfiber (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"kostfiber\"\n                    value={nutrition.kostfiber}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the protein content */}\n              <tr className={protein ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {protein ? (\n                    <Tooltip\n                      title=\"Mangler verdi i protein parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Protein (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"protein\"\n                    value={nutrition.protein}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows salt content */}\n              <tr\n                className={\n                  salt ? \"alert-box\" : null || saltNull ? \"alert-box\" : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {salt ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden salt. Mengden på salt må være lavere enn eller lik 0.3 / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {saltNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i salt parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Salt (g)\n                </th>\n                <td colSpan=\"2\">\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"salt\"\n                    value={nutrition.salt}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n\n        {/* Button that submits the form and calls the onClick function */}\n        <div className=\"col-12 button-div\">\n          <button\n            type=\"submit\"\n            className=\"btn btn-primary btn-lg button-search\"\n            onClick={onClick}\n          >\n            Beregn\n          </button>\n        </div>\n      </div>\n\n      <div className=\"col-md-6\">\n        {/* positive results nøkkelhullet container\" */}\n        {showNokkelhulletResults ? (\n          <div className=\"container nøkkelhullet-food-result-container\">\n            {/* An image with class \"keyhole-logo\" and alt text \"keyhole logo\" */}\n            <img\n              src={keyholeLgog}\n              className=\"keyhole-logo img-fluid\"\n              alt=\"keyhole logo\"\n            />\n            {/* A heading with text \"Nøkkelhullet\" */}\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir Nøkkelhullet. </p>\n              </div>\n              <div className=\"col-md-2\">\n                {/* FontAwesome icon with event listener to show the \"Nøkkelhullet\" information section */}\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  {/* A paragraph with a link to Lovdata's \"Forskrift om frivillig merking a nœringsmidler med Nokkellhullet\" */}\n                  <p>\n                    Les mer om hvilke krav det stilles for merking av\n                    Nokkellhullet på Lovdatas \"Forskrift om frivillig merking a\n                    nœringsmidler med Nokkellhullet\":\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  {/* FontAwesome icon with event listener to hide the \"Nøkkelhullet\" information section */}\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        ) : null}\n        {/*Negative results nøkkelhullet container\" */}\n        {showNokkelhulletResults === false && (\n          <div className=\"container nøkkelhullet-food-negResult-container\">\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir ikke Nøkkelhullet.</p>\n                {showEmptyResult ? (\n                  <p>** Obligatoriske næringsverdier kan ikke være tomme.</p>\n                ) : null}\n\n                {mettede ? (\n                  <p>\n                    ** Mettede fettsyrer verdien kan være høyst 33 % av\n                    fettinnholdet /100 g.\n                  </p>\n                ) : null}\n\n                {fett ? <p>** Fett verdien kan være høyst 5 g/100 g.</p> : null}\n\n                {karbohydrat ? (\n                  <p>** Sukkerarter verdien kan være høyst 5 g/100 g.</p>\n                ) : null}\n\n                {salt ? (\n                  <p>** Salt verdien kan være høyst 0.3 g/100 g.</p>\n                ) : null}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om frivillig merking av næringsmidler med Nøkkelhullet:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for ernæringspåstander if there are all true results */}\n        {buttonClicked && (\n          <div\n            className={\n              lowSugars && withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-all\"\n                : !lowSugars && !withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-none\"\n                : \"container ernæringspåstander-food-result-container-some\"\n            }\n          >\n            <h5>Ernæringspåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                {/* Low sugars */}\n                {lowSugars ? (\n                  <div>\n                    <p>** Lavt sukkerinnhold:</p>\n                    <p>\n                      Dette produktet inneholder høyst 5 g sukkerarter per 100 g\n                      for næringsmidler i fast form, eller høyst 2,5 g\n                      sukkerarter per 100 ml for næringsmidler i flytende form\n                      og oppfyller kravet for \"Lavt sukkerinnhold\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Lavt sukkerinnhold\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        For faste næringsmidler, sukkerinnholdet må være høyst 5\n                        g per 100 g.\n                      </li>\n                      <li>\n                        For flytende næringsmidler, sukkerinnholdet må være\n                        høyst 2,5 g per 100 ml.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n\n                {/* No added sugars */}\n                {withNoAddedSugars ? (\n                  <div>\n                    <p>** Uten tilsatt sukker:</p>\n                    <p>\n                      Dette produktet er ikke tilsatt monosakkarider,\n                      disakkarider eller andre næringsmidler på grunn av deres\n                      søtende egenskaper og oppfyller kravet for \"Uten tilsatt\n                      sukker\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Uten tilsatt sukker\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        Produktet må ikke være tilsatt monosakkarider,\n                        disakkarider eller andre næringsmidler på grunn av deres\n                        søtende egenskaper.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"ernaerings\")}\n                />\n              </div>\n            </div>\n            {infoErnaerings ? (\n              // Information section for \"Ernæringspåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"ernaerings\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for Helsepåstander results  */}\n        {showHelsepåstander && (\n          <div\n            className=\"container helsepåstander-food-result-container\"\n            style={{ background: \"#f2f0b5\" }}\n          >\n            <h5>Helsepåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Under utvikling. </p>\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"helsepåstander\")}\n                />\n              </div>\n            </div>\n            {infoHelsepåstander ? (\n              // Information section for \"Helsepåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"helsepåstander\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"15px\" }}></div>\n        {/* conditional rendering for the buttons using showButtons state */}\n        {showButtons && (\n          <div className=\"d-flex justify-content-between\">\n            {/* Save button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-save\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Lagre produkt\n            </button>\n\n            {/* Share button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-share\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Del produkt\n            </button>\n\n            {/* Add a new product button */}\n            <button\n              className=\"btn btn-primary\"\n              onClick={() => window.location.reload()}\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-plus\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Legg til et nytt produkt\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Melk14b;\n","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Kategori18.js",["412","413","414","415"],[],"import React from \"react\";\nimport { useState, useEffect } from \"react\"; // import the useState and useeffect hook.\nimport { faCircleExclamation } from \"@fortawesome/free-solid-svg-icons\"; // import an icon.\nimport { faBan } from \"@fortawesome/free-solid-svg-icons\";\nimport { faSave, faShare, faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"; // import FontAwesomeIcon component.\nimport Tooltip from \"@mui/material/Tooltip\"; // import Tooltip component.\nimport keyholeLgog from \"./circle-keyhole-logo.png\"; // import an image\nimport { faCircleInfo } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport { faXmarkCircle } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport Select from \"react-select\"; // import Select component\n\nconst Kategori18 = () => {\n  // State variables for showing results and empty result message\n  const [showNokkelhulletResults, setShowNokkelhulletResults] = useState(null);\n  const [showErnaeringsResults, setShowErnaeringsResults] = useState(null);\n  const [showHelsepåstander, setShowHelsepåstander] = useState(null);\n  const [showEmptyResult, setShowEmptyResult] = useState(\"\"); // initialize state variable for showing empty result message.\n\n  //state variable to store the user's food type selection (solid or liquid) and the low sugars claim result\n  const [foodType, setFoodType] = useState(\"\");\n  const [lowSugars, setLowSugars] = useState(null);\n\n  //state variable to track whether the product meets the WITH NO ADDED SUGARS claim or not\n  const [withNoAddedSugars, setWithNoAddedSugars] = useState(false);\n\n  // State variable for tracking if the button is clicked\n  const [buttonClicked, setButtonClicked] = useState(false);\n\n  // useEffect hook for checking the condition for the \"WITH NO ADDED SUGARS\" claim when button is clicked\n  useEffect(() => {\n    if (buttonClicked) {\n      if (withNoAddedSugars) {\n        setShowErnaeringsResults(true);\n      } else {\n        setShowErnaeringsResults(false);\n      }\n    }\n  }, [withNoAddedSugars, buttonClicked]);\n\n  //state for controlling the buttons' visibility\n  const [showButtons, setShowButtons] = useState(false);\n\n  // State variables to control the visibility of the information sections\n  const [infoNokkelhullet, setInfoNokkelhullet] = useState(false);\n  const [infoErnaerings, setInfoErnaerings] = useState(false);\n  const [infoHelsepåstander, setInfoHelsepåstander] = useState(false);\n\n  // Function to show an information section based on the container parameter\n  const onClickInfo = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(true);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(true);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(true);\n    }\n  };\n\n  // Function to hide an information section based on the container parameter\n  const onClickClose = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(false);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(false);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(false);\n    }\n  };\n\n  // State variables for handling input fields and validation errors\n  const [energikj, setEnergikj] = useState(false);\n  const [energikcal, setEnergikcal] = useState(false);\n\n  const [fett, setFett] = useState(false);\n  const [fettNull, setFettNull] = useState(false);\n  const [mettede, setMettede] = useState(false);\n  const [karbohydrat, setKarbohydrat] = useState(false);\n\n  const [hvoravSukkerarter, setHvoravSukkerarter] = useState(false);\n  const [hvoravSukkerarterNull, setHvoravSukkerarterNull] = useState(false);\n  const [kostfiber, setKostfiber] = useState(false);\n  const [protein, setProtein] = useState(false);\n  const [salt, setSalt] = useState(false);\n  const [saltNull, setSaltNull] = useState(false);\n\n  // State variable for storing nutrition information entered by user\n  const [nutrition, setNutrition] = useState({\n    energikj: \"\",\n    energikcal: \"\",\n    fett: \"\",\n    mettede: \"\",\n    karbohydrat: \"\",\n    hvoravSukkerarter: \"\",\n    kostfiber: \"\",\n    protein: \"\",\n    salt: \"\",\n  });\n\n  // Handler for updating nutrition state/state variable based on input field changes/input values\n  const changeHandle = (event) => {\n    console.log(\"changeHandle ===\", event.target, event.target.value);\n    setNutrition({\n      ...nutrition,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  // define function to handle form submission\n  const onClick = (e) => {\n    e.preventDefault();\n    setButtonClicked(true);\n    setShowHelsepåstander(true);\n    setShowButtons(true);\n\n    console.log(\"onclick ===\", selectsPart, nutrition);\n\n    // Check if all required fields are filled out and within valid ranges\n    // The if statement checks if all required inputs are non-empty and meet the nutritional requirements\n    if (\n      nutrition.fett !== \"\" &&\n      nutrition.fett <= 5 &&\n      nutrition.mettede !== \"\" &&\n      nutrition.karbohydrat !== \"\" &&\n      nutrition.hvoravSukkerarter !== \"\" &&\n      nutrition.hvoravSukkerarter <= 1 &&\n      nutrition.kostfiber !== \"\" &&\n      nutrition.protein !== \"\" &&\n      nutrition.salt !== \"\" &&\n      nutrition.salt <= 0.9\n    ) {\n      // If all requirements are met, display the nutrition results\n      setShowNokkelhulletResults(true);\n      // Hide any empty result messages or error messages\n      setShowEmptyResult(false);\n\n      // Check if the user selected \"energikj\" and if nutrition input lable of \"energikj\" is not empty\n      if (selectsPart === \"energikj\" && nutrition.energikj !== \"\") {\n        setEnergikj(false);\n      }\n\n      // Check if the user selected \"energikcal\" and if nutrition input lable of \"energikcal\" is not empty\n      if (selectsPart === \"energikcal\" && nutrition.energikcal !== \"\") {\n        setEnergikcal(false);\n      }\n      // Reset all input validation errors\n      setFett(false);\n      setFettNull(false);\n      setMettede(false);\n      setKarbohydrat(false);\n\n      setHvoravSukkerarter(false);\n      setHvoravSukkerarterNull(false);\n      setKostfiber(false);\n      setProtein(false);\n      setSalt(false);\n      setSaltNull(false);\n      // If the user has not selected any nutrients, set errors accordingly\n      // Check each nutrition value to see if it is missing or negative\n      // show input validation errors if any input is missing or negative.\n    } else {\n      if (selectsPart === \"energikj\") {\n        console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n        if (nutrition.energikj === \"\" || nutrition.energikj < 0) {\n          console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n          setEnergikj(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikj(false);\n        }\n      }\n\n      if (selectsPart === \"energikcal\") {\n        console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n        if (nutrition.energikcal === \"\" || nutrition.energikcal < 0) {\n          console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n          setEnergikcal(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikcal(false);\n        }\n      }\n\n      // repeat for each nutrition value...\n\n      if (nutrition.fett === \"\" || nutrition.fett < 0) {\n        setFettNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setFettNull(false);\n      }\n      if (nutrition.fett > 5) {\n        setFett(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setFett(false);\n      }\n\n      if (nutrition.mettede === \"\" || nutrition.mettede < 0) {\n        setMettede(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setMettede(false);\n      }\n\n      // Check if the 'karbohydrat' input is missing or negative, and display an error message if necessary\n      if (nutrition.karbohydrat === \"\" || nutrition.karbohydrat < 0) {\n        setKarbohydrat(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKarbohydrat(false);\n      }\n\n      // Check if the 'hvoravSukkerarter' input is missing, negative or above the maximum allowed value (1),\n      // and display an error message if necessary\n      if (\n        nutrition.hvoravSukkerarter === \"\" ||\n        nutrition.hvoravSukkerarter < 0\n      ) {\n        setHvoravSukkerarterNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setHvoravSukkerarterNull(false);\n      }\n      if (nutrition.hvoravSukkerarter > 1) {\n        setHvoravSukkerarter(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setHvoravSukkerarter(false);\n      }\n\n      if (nutrition.kostfiber === \"\" || nutrition.kostfiber < 0) {\n        setKostfiber(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKostfiber(false);\n      }\n\n      if (nutrition.protein === \"\" || nutrition.protein < 0) {\n        setProtein(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setProtein(false);\n      }\n\n      if (nutrition.salt === \"\" || nutrition.salt < 0) {\n        setSaltNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setSaltNull(false);\n      }\n      if (nutrition.salt > 0.9) {\n        setSalt(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setSalt(false);\n      }\n    }\n\n    // Check for the \"LOW SUGARS\" claim\n    if (foodType === \"solid\" && parseFloat(nutrition.karbohydrat) <= 5) {\n      setLowSugars(true);\n    } else if (\n      foodType === \"liquid\" &&\n      parseFloat(nutrition.karbohydrat) <= 2.5\n    ) {\n      setLowSugars(true);\n    } else {\n      setLowSugars(false);\n    }\n\n    // Check the condition for the \"WITH NO ADDED SUGARS\" nutrition claim\n    if (nutrition.hvoravSukkerarter === \"0\" && nutrition.karbohydrat > 0) {\n      setWithNoAddedSugars(true);\n    } else {\n      setWithNoAddedSugars(false);\n    }\n  };\n\n  // create an array of energy units to select from\n  const selectUnit = [\n    {\n      value: \"energikj\",\n      label: \"(kj)\",\n    },\n    {\n      value: \"energikcal\",\n      label: \"(kcal)\",\n    },\n  ];\n\n  // Declare a state variable for the select dropdown.\n  const [selectsPart, setSelectPart] = useState(\"\");\n\n  // A function to handle changes to the select dropdown energy unit\n  const handlerPart = (event) => {\n    const inputVal = document.getElementsByName(event.value);\n    console.log(\"handlerPart ===\", event, nutrition, inputVal);\n    setSelectPart(event.value);\n  };\n\n  //create an array of food types to select from\n  const foodTypes = [\n    {\n      value: \"solid\",\n      label: \"Fast form\",\n    },\n    {\n      value: \"liquid\",\n      label: \"Flytende form\",\n    },\n  ];\n\n  return (\n    <div className=\"row\">\n      {/* This div creates a column layout for the left side of the table */}\n      <div className=\"col-md-6\">\n        {/* the selector (dropdown menu) for choosing the food type. */}\n        <div className=\"form-group\">\n          <label htmlFor=\"foodType\">Velg type matvare:</label>\n          <Select\n            className=\"form-control\"\n            id=\"foodType\"\n            options={foodTypes}\n            onChange={(e) => setFoodType(e.value)} // update the onFoodTypeChange function to directly set the food type state\n            placeholder=\"Velg type matvare\"\n          />\n        </div>\n\n        <h5>\n          Næringsinnhold per 100{\" \"}\n          {foodType === \"solid\" ? \"g\" : foodType === \"liquid\" ? \"ml\" : \"g/ml\"}\n        </h5>\n\n        {/* This div adds a light background color to the table */}\n        <div className=\"bg-light\">\n          {/* This table shows the nutritional information */}\n          <table className=\"table table-striped\">\n            {/* The table header */}\n            <thead>\n              <tr>\n                <th scope=\"col\" className=\"table-font\">\n                  Energi eller næringsstoff\n                </th>\n                <th scope=\"col\" className=\"table-font\">\n                  Mengde\n                </th>\n              </tr>\n            </thead>\n\n            {/* The table body */}\n            <tbody>\n              {/* This row shows the energy content */}\n              <tr className={(energikj, energikcal ? \"alert-box\" : null)}>\n                <th scope=\"row\" className=\"table-font\">\n                  {/* An icon with a tooltip to indicate missing values in energy parameters */}\n                  {energikj && energikcal ? (\n                    <Tooltip\n                      title=\"Mangler verdi i energi (kJ/Kcal) parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  {/* This div displays the energy label and unit */}\n                  <div className=\"row\">\n                    <div className=\"col-md-3\">\n                      <label for=\"energiunit\" class=\"form-label\">\n                        Energi\n                      </label>\n                    </div>\n                    {/* A dropdown menu for selecting the energy unit */}\n                    <div className=\"col-md-6\">\n                      <Select\n                        placeholder={<div>Velg enhet</div>}\n                        className=\"form-select-md mb-3\"\n                        options={selectUnit}\n                        onChange={(e) => handlerPart(e)}\n                      />\n                    </div>\n                  </div>\n                </th>\n                {/* An input field for entering the energy value */}\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name={selectsPart}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* Additional rows for other nutrient selections */}\n              {/* This row shows the fat content */}\n              <tr\n                className={\n                  fett ? \"alert-box\" : null || fettNull ? \"alert-box\" : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {fett ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden fett. Mengden på fett må være lavere enn eller lik 5 / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {fettNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i fett parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Fett (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"fett\"\n                    value={nutrition.fett}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the saturated fat content */}\n              <tr className={mettede ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {mettede ? (\n                    <Tooltip\n                      title=\"Mangler verdi i mettede fettsyrer parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Mettede fettsyrer (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"mettede\"\n                    value={nutrition.mettede}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the carbohydrate (total sugars)content */}\n              <tr className={karbohydrat ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {/* If the \"karbohydrat\" value is missing, display an exclamation icon with a tooltip */}\n                  {karbohydrat ? (\n                    <Tooltip\n                      title=\"Mangler verdi i karbohydrat parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Karbohydrat (g)\n                </th>\n                {/* Input field for \"karbohydrat\" value */}\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"karbohydrat\"\n                    value={nutrition.karbohydrat}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows hvorav tilsatte sukkerarter (added sugars)content */}\n              <tr\n                className={\n                  hvoravSukkerarter\n                    ? \"alert-box\"\n                    : null || hvoravSukkerarterNull\n                    ? \"alert-box\"\n                    : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {/* If the \"hvoravSukkerarter\" value is too high, display a ban icon with a tooltip */}\n                  {hvoravSukkerarter ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden hvoravSukkerarter. Mengden på hvoravSukkerarter må være lavere enn eller lik 1 g/ 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {/* If the \"hvoravSukkerarter\" value is missing, display an exclamation icon with a tooltip */}\n                  {hvoravSukkerarterNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i hvorav sukkerarter parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Hvorav tilsatte sukkerarter (g)\n                </th>\n                {/* Input field for \"hvoravSukkerarter\" value */}\n\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"hvoravSukkerarter\"\n                    value={nutrition.hvoravSukkerarter}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows kostfiber content */}\n              <tr className={kostfiber ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {kostfiber ? (\n                    <Tooltip\n                      title=\"Mangler verdi i kostfiber parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Kostfiber (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"kostfiber\"\n                    value={nutrition.kostfiber}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the protein content */}\n              <tr className={protein ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {protein ? (\n                    <Tooltip\n                      title=\"Mangler verdi i protein parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Protein (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"protein\"\n                    value={nutrition.protein}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows salt content */}\n              <tr\n                className={\n                  salt ? \"alert-box\" : null || saltNull ? \"alert-box\" : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {salt ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden salt. Mengden på salt må være lavere enn eller lik 0.9 / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {saltNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i salt parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Salt (g)\n                </th>\n                <td colSpan=\"2\">\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"salt\"\n                    value={nutrition.salt}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n\n        {/* Button that submits the form and calls the onClick function */}\n        <div className=\"col-12 button-div\">\n          <button\n            type=\"submit\"\n            className=\"btn btn-primary btn-lg button-search\"\n            onClick={onClick}\n          >\n            Beregn\n          </button>\n        </div>\n      </div>\n\n      <div className=\"col-md-6\">\n        {/* positive results nøkkelhullet container\" */}\n        {showNokkelhulletResults ? (\n          <div className=\"container nøkkelhullet-food-result-container\">\n            {/* An image with class \"keyhole-logo\" and alt text \"keyhole logo\" */}\n            <img\n              src={keyholeLgog}\n              className=\"keyhole-logo img-fluid\"\n              alt=\"keyhole logo\"\n            />\n            {/* A heading with text \"Nøkkelhullet\" */}\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir Nøkkelhullet. </p>\n              </div>\n              <div className=\"col-md-2\">\n                {/* FontAwesome icon with event listener to show the \"Nøkkelhullet\" information section */}\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  {/* A paragraph with a link to Lovdata's \"Forskrift om frivillig merking a nœringsmidler med Nokkellhullet\" */}\n                  <p>\n                    Les mer om hvilke krav det stilles for merking av\n                    Nokkellhullet på Lovdatas \"Forskrift om frivillig merking a\n                    nœringsmidler med Nokkellhullet\":\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  {/* FontAwesome icon with event listener to hide the \"Nøkkelhullet\" information section */}\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        ) : null}\n        {/*Negative results nøkkelhullet container\" */}\n        {showNokkelhulletResults === false && (\n          <div className=\"container nøkkelhullet-food-negResult-container\">\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir ikke Nøkkelhullet.</p>\n                {showEmptyResult ? (\n                  <p>** Obligatoriske næringsverdier kan ikke være tomme.</p>\n                ) : null}\n\n                {fett ? <p>** Fett verdien kan være høyst 5 g/100 g.</p> : null}\n\n                {hvoravSukkerarter ? (\n                  <p>\n                    ** Tilsatte sukkerarter verdien kan være høyst 1 g/100 g.\n                  </p>\n                ) : null}\n\n                {salt ? (\n                  <p>** Salt verdien kan være høyst 0.9 g/100 g.</p>\n                ) : null}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om frivillig merking av næringsmidler med Nøkkelhullet:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for ernæringspåstander if there are all true results */}\n        {buttonClicked && (\n          <div\n            className={\n              lowSugars && withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-all\"\n                : !lowSugars && !withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-none\"\n                : \"container ernæringspåstander-food-result-container-some\"\n            }\n          >\n            <h5>Ernæringspåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                {/* Low sugars */}\n                {lowSugars ? (\n                  <div>\n                    <p>** Lavt sukkerinnhold:</p>\n                    <p>\n                      Dette produktet inneholder høyst 5 g sukkerarter per 100 g\n                      for næringsmidler i fast form, eller høyst 2,5 g\n                      sukkerarter per 100 ml for næringsmidler i flytende form\n                      og oppfyller kravet for \"Lavt sukkerinnhold\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Lavt sukkerinnhold\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        For faste næringsmidler, sukkerinnholdet må være høyst 5\n                        g per 100 g.\n                      </li>\n                      <li>\n                        For flytende næringsmidler, sukkerinnholdet må være\n                        høyst 2,5 g per 100 ml.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n\n                {/* No added sugars */}\n                {withNoAddedSugars ? (\n                  <div>\n                    <p>** Uten tilsatt sukker:</p>\n                    <p>\n                      Dette produktet er ikke tilsatt monosakkarider,\n                      disakkarider eller andre næringsmidler på grunn av deres\n                      søtende egenskaper og oppfyller kravet for \"Uten tilsatt\n                      sukker\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Uten tilsatt sukker\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        Produktet må ikke være tilsatt monosakkarider,\n                        disakkarider eller andre næringsmidler på grunn av deres\n                        søtende egenskaper.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"ernaerings\")}\n                />\n              </div>\n            </div>\n            {infoErnaerings ? (\n              // Information section for \"Ernæringspåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"ernaerings\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for Helsepåstander results  */}\n        {showHelsepåstander && (\n          <div\n            className=\"container helsepåstander-food-result-container\"\n            style={{ background: \"#f2f0b5\" }}\n          >\n            <h5>Helsepåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Under utvikling. </p>\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"helsepåstander\")}\n                />\n              </div>\n            </div>\n            {infoHelsepåstander ? (\n              // Information section for \"Helsepåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"helsepåstander\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"15px\" }}></div>\n        {/* conditional rendering for the buttons using showButtons state */}\n        {showButtons && (\n          <div className=\"d-flex justify-content-between\">\n            {/* Save button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-save\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Lagre produkt\n            </button>\n\n            {/* Share button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-share\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Del produkt\n            </button>\n\n            {/* Add a new product button */}\n            <button\n              className=\"btn btn-primary\"\n              onClick={() => window.location.reload()}\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-plus\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Legg til et nytt produkt\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Kategori18;\n","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Kategori17.js",["416","417","418","419"],[],"import React from \"react\";\nimport { useState, useEffect } from \"react\"; // import the useState and useeffect hook.\nimport { faCircleExclamation } from \"@fortawesome/free-solid-svg-icons\"; // import an icon.\nimport { faBan } from \"@fortawesome/free-solid-svg-icons\";\nimport { faSave, faShare, faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"; // import FontAwesomeIcon component.\nimport Tooltip from \"@mui/material/Tooltip\"; // import Tooltip component.\nimport keyholeLgog from \"./circle-keyhole-logo.png\"; // import an image\nimport { faCircleInfo } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport { faXmarkCircle } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport Select from \"react-select\"; // import Select component\n\nconst Kategori17 = () => {\n  // State variables for showing results and empty result message\n  const [showNokkelhulletResults, setShowNokkelhulletResults] = useState(null);\n  const [showErnaeringsResults, setShowErnaeringsResults] = useState(null);\n  const [showHelsepåstander, setShowHelsepåstander] = useState(null);\n  const [showEmptyResult, setShowEmptyResult] = useState(\"\"); // initialize state variable for showing empty result message.\n\n  //state variable to store the user's food type selection (solid or liquid) and the low sugars claim result\n  const [foodType, setFoodType] = useState(\"\");\n  const [lowSugars, setLowSugars] = useState(null);\n\n  //state variable to track whether the product meets the WITH NO ADDED SUGARS claim or not\n  const [withNoAddedSugars, setWithNoAddedSugars] = useState(false);\n\n  // State variable for tracking if the button is clicked\n  const [buttonClicked, setButtonClicked] = useState(false);\n\n  // useEffect hook for checking the condition for the \"WITH NO ADDED SUGARS\" claim when button is clicked\n  useEffect(() => {\n    if (buttonClicked) {\n      if (withNoAddedSugars) {\n        setShowErnaeringsResults(true);\n      } else {\n        setShowErnaeringsResults(false);\n      }\n    }\n  }, [withNoAddedSugars, buttonClicked]);\n\n  //state for controlling the buttons' visibility\n  const [showButtons, setShowButtons] = useState(false);\n\n  // State variables to control the visibility of the information sections\n  const [infoNokkelhullet, setInfoNokkelhullet] = useState(false);\n  const [infoErnaerings, setInfoErnaerings] = useState(false);\n  const [infoHelsepåstander, setInfoHelsepåstander] = useState(false);\n\n  // Function to show an information section based on the container parameter\n  const onClickInfo = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(true);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(true);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(true);\n    }\n  };\n\n  // Function to hide an information section based on the container parameter\n  const onClickClose = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(false);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(false);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(false);\n    }\n  };\n\n  // State variables for handling input fields and validation errors\n  const [energikj, setEnergikj] = useState(false);\n  const [energikcal, setEnergikcal] = useState(false);\n\n  const [fett, setFett] = useState(false);\n  const [fettNull, setFettNull] = useState(false);\n  const [mettede, setMettede] = useState(false);\n  const [mettedeNull, setMettedeNull] = useState(false);\n  const [karbohydrat, setKarbohydrat] = useState(false);\n  const [hvoravSukkerarter, setHvoravSukkerarter] = useState(false);\n  const [kostfiber, setKostfiber] = useState(false);\n  const [protein, setProtein] = useState(false);\n  const [salt, setSalt] = useState(false);\n  const [saltNull, setSaltNull] = useState(false);\n\n  // State variable for storing nutrition information entered by user\n  const [nutrition, setNutrition] = useState({\n    energikj: \"\",\n    energikcal: \"\",\n    fett: \"\",\n    mettede: \"\",\n    karbohydrat: \"\",\n    hvoravSukkerarter: \"\",\n    kostfiber: \"\",\n    protein: \"\",\n    salt: \"\",\n  });\n\n  // Handler for updating nutrition state/state variable based on input field changes/input values\n  const changeHandle = (event) => {\n    console.log(\"changeHandle ===\", event.target, event.target.value);\n    setNutrition({\n      ...nutrition,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  // define function to handle form submission\n  const onClick = (e) => {\n    e.preventDefault();\n    setButtonClicked(true);\n    setShowHelsepåstander(true);\n    setShowButtons(true);\n\n    console.log(\"onclick ===\", selectsPart, nutrition);\n\n    // Check if all required fields are filled out and within valid ranges\n    // The if statement checks if all required inputs are non-empty and meet the nutritional requirements\n    if (\n      nutrition.fett !== \"\" &&\n      nutrition.fett <= 17 &&\n      nutrition.mettede !== \"\" &&\n      nutrition.mettede <= 3.4 &&\n      nutrition.karbohydrat !== \"\" &&\n      nutrition.hvoravSukkerarter !== \"\" &&\n      nutrition.kostfiber !== \"\" &&\n      nutrition.protein !== \"\" &&\n      nutrition.salt !== \"\" &&\n      nutrition.salt <= 1.5\n    ) {\n      // If all requirements are met, display the nutrition results\n      setShowNokkelhulletResults(true);\n      // Hide any empty result messages or error messages\n      setShowEmptyResult(false);\n\n      // Check if the user selected \"energikj\" and if nutrition input lable of \"energikj\" is not empty\n      if (selectsPart === \"energikj\" && nutrition.energikj !== \"\") {\n        setEnergikj(false);\n      }\n\n      // Check if the user selected \"energikcal\" and if nutrition input lable of \"energikcal\" is not empty\n      if (selectsPart === \"energikcal\" && nutrition.energikcal !== \"\") {\n        setEnergikcal(false);\n      }\n      // Reset all input validation errors\n      setFett(false);\n      setFettNull(false);\n      setMettede(false);\n      setMettedeNull(false);\n      setKarbohydrat(false);\n      setHvoravSukkerarter(false);\n      setKostfiber(false);\n      setProtein(false);\n      setSalt(false);\n      setSaltNull(false);\n      // If the user has not selected any nutrients, set errors accordingly\n      // Check each nutrition value to see if it is missing or negative\n      // show input validation errors if any input is missing or negative.\n    } else {\n      if (selectsPart === \"energikj\") {\n        console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n        if (nutrition.energikj === \"\" || nutrition.energikj < 0) {\n          console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n          setEnergikj(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikj(false);\n        }\n      }\n\n      if (selectsPart === \"energikcal\") {\n        console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n        if (nutrition.energikcal === \"\" || nutrition.energikcal < 0) {\n          console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n          setEnergikcal(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikcal(false);\n        }\n      }\n\n      // repeat for each nutrition value...\n      if (nutrition.fett === \"\" || nutrition.fett < 0) {\n        setFettNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setFettNull(false);\n      }\n      if (nutrition.fett > 17) {\n        setFett(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setFett(false);\n      }\n\n      if (nutrition.mettede === \"\" || nutrition.mettede < 0) {\n        setMettedeNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setMettedeNull(false);\n      }\n      if (nutrition.mettede > 3.4) {\n        setMettede(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setMettede(false);\n      }\n\n      if (nutrition.karbohydrat === \"\" || nutrition.karbohydrat < 0) {\n        setKarbohydrat(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKarbohydrat(false);\n      }\n\n      if (\n        nutrition.hvoravSukkerarter === \"\" ||\n        nutrition.hvoravSukkerarter < 0\n      ) {\n        setHvoravSukkerarter(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setHvoravSukkerarter(false);\n      }\n\n      if (nutrition.kostfiber === \"\" || nutrition.kostfiber < 0) {\n        setKostfiber(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKostfiber(false);\n      }\n\n      if (nutrition.protein === \"\" || nutrition.protein < 0) {\n        setProtein(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setProtein(false);\n      }\n\n      if (nutrition.salt === \"\" || nutrition.salt < 0) {\n        setSaltNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setSaltNull(false);\n      }\n      if (nutrition.salt > 1.5) {\n        setSalt(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setSalt(false);\n      }\n    }\n\n    // Check for the \"LOW SUGARS\" claim\n    if (foodType === \"solid\" && parseFloat(nutrition.karbohydrat) <= 5) {\n      setLowSugars(true);\n    } else if (\n      foodType === \"liquid\" &&\n      parseFloat(nutrition.karbohydrat) <= 2.5\n    ) {\n      setLowSugars(true);\n    } else {\n      setLowSugars(false);\n    }\n\n    // Check the condition for the \"WITH NO ADDED SUGARS\" nutrition claim\n    if (nutrition.hvoravSukkerarter === \"0\" && nutrition.karbohydrat > 0) {\n      setWithNoAddedSugars(true);\n    } else {\n      setWithNoAddedSugars(false);\n    }\n  };\n\n  // create an array of energy units to select from\n  const selectUnit = [\n    {\n      value: \"energikj\",\n      label: \"(kj)\",\n    },\n    {\n      value: \"energikcal\",\n      label: \"(kcal)\",\n    },\n  ];\n\n  // Declare a state variable for the select dropdown.\n  const [selectsPart, setSelectPart] = useState(\"\");\n\n  // A function to handle changes to the select dropdown energy unit\n  const handlerPart = (event) => {\n    const inputVal = document.getElementsByName(event.value);\n    console.log(\"handlerPart ===\", event, nutrition, inputVal);\n    setSelectPart(event.value);\n  };\n\n  //create an array of food types to select from\n  const foodTypes = [\n    {\n      value: \"solid\",\n      label: \"Fast form\",\n    },\n    {\n      value: \"liquid\",\n      label: \"Flytende form\",\n    },\n  ];\n\n  return (\n    <div className=\"row\">\n      {/* This div creates a column layout for the left side of the table */}\n      <div className=\"col-md-6\">\n        {/* the selector (dropdown menu) for choosing the food type. */}\n        <div className=\"form-group\">\n          <label htmlFor=\"foodType\">Velg type matvare:</label>\n          <Select\n            className=\"form-control\"\n            id=\"foodType\"\n            options={foodTypes}\n            onChange={(e) => setFoodType(e.value)} // update the onFoodTypeChange function to directly set the food type state\n            placeholder=\"Velg type matvare\"\n          />\n        </div>\n        <h5>\n          Næringsinnhold per 100{\" \"}\n          {foodType === \"solid\" ? \"g\" : foodType === \"liquid\" ? \"ml\" : \"g/ml\"}\n        </h5>\n\n        {/* This div adds a light background color to the table */}\n        <div className=\"bg-light\">\n          {/* This table shows the nutritional information */}\n          <table className=\"table table-striped\">\n            {/* The table header */}\n            <thead>\n              <tr>\n                <th scope=\"col\" className=\"table-font\">\n                  Energi eller næringsstoff\n                </th>\n                <th scope=\"col\" className=\"table-font\">\n                  Mengde\n                </th>\n              </tr>\n            </thead>\n\n            {/* The table body */}\n            <tbody>\n              {/* This row shows the energy content */}\n              <tr className={(energikj, energikcal ? \"alert-box\" : null)}>\n                <th scope=\"row\" className=\"table-font\">\n                  {/* An icon with a tooltip to indicate missing values in energy parameters */}\n                  {energikj && energikcal ? (\n                    <Tooltip\n                      title=\"Mangler verdi i energi (kJ/Kcal) parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  {/* This div displays the energy label and unit */}\n                  <div className=\"row\">\n                    <div className=\"col-md-3\">\n                      <label for=\"energiunit\" class=\"form-label\">\n                        Energi\n                      </label>\n                    </div>\n                    {/* A dropdown menu for selecting the energy unit */}\n                    <div className=\"col-md-6\">\n                      <Select\n                        placeholder={<div>Velg enhet</div>}\n                        className=\"form-select-md mb-3\"\n                        options={selectUnit}\n                        onChange={(e) => handlerPart(e)}\n                      />\n                    </div>\n                  </div>\n                </th>\n                {/* An input field for entering the energy value */}\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name={selectsPart}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* Additional rows for other nutrient selections */}\n              {/* This row shows the fat content */}\n              <tr\n                className={\n                  fett ? \"alert-box\" : null || fettNull ? \"alert-box\" : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {fett ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden fett. Mengden på fett må være lavere enn eller lik 17 / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {fettNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i fett parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Fett (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"fett\"\n                    value={nutrition.fett}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the saturated fat content */}\n              <tr\n                className={\n                  mettede\n                    ? \"alert-box\"\n                    : null || mettedeNull\n                    ? \"alert-box\"\n                    : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {mettede ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden mettede fettsyrer. Mengden på mettede fettsyrer må være lavere enn eller lik 3.4 / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {mettedeNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i mettede fettsyrer parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Mettede fettsyrer (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"mettede\"\n                    value={nutrition.mettede}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the carbohydrate content */}\n              <tr className={karbohydrat ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {karbohydrat ? (\n                    <Tooltip\n                      title=\"Mangler verdi i karbohydrat parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Karbohydrat (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"karbohydrat\"\n                    value={nutrition.karbohydrat}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows hvorav sukkerarter content */}\n              <tr className={hvoravSukkerarter ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {hvoravSukkerarter ? (\n                    <Tooltip\n                      title=\"Mangler verdi i hvorav sukkerarter parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Hvorav tilsatte sukkerarter (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"hvoravSukkerarter\"\n                    value={nutrition.hvoravSukkerarter}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows kostfiber content */}\n              <tr className={kostfiber ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {kostfiber ? (\n                    <Tooltip\n                      title=\"Mangler verdi i kostfiber parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Kostfiber (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"kostfiber\"\n                    value={nutrition.kostfiber}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the protein content */}\n              <tr className={protein ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {protein ? (\n                    <Tooltip\n                      title=\"Mangler verdi i protein parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Protein (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"protein\"\n                    value={nutrition.protein}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows salt content */}\n              <tr\n                className={\n                  salt ? \"alert-box\" : null || saltNull ? \"alert-box\" : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {salt ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden salt. Mengden på salt må være lavere enn eller lik 1.5 / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {saltNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i salt parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Salt (g)\n                </th>\n                <td colSpan=\"2\">\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"salt\"\n                    value={nutrition.salt}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n        {/* Button that submits the form and calls the onClick function */}\n        <div className=\"col-12 button-div\">\n          <button\n            type=\"submit\"\n            className=\"btn btn-primary btn-lg button-search\"\n            onClick={onClick}\n          >\n            Beregn\n          </button>\n        </div>\n      </div>\n\n      <div className=\"col-md-6\">\n        {/* positive results nøkkelhullet container\" */}\n        {showNokkelhulletResults ? (\n          <div className=\"container nøkkelhullet-food-result-container\">\n            {/* An image with class \"keyhole-logo\" and alt text \"keyhole logo\" */}\n            <img\n              src={keyholeLgog}\n              className=\"keyhole-logo img-fluid\"\n              alt=\"keyhole logo\"\n            />\n            {/* A heading with text \"Nøkkelhullet\" */}\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir Nøkkelhullet. </p>\n              </div>\n              <div className=\"col-md-2\">\n                {/* FontAwesome icon with event listener to show the \"Nøkkelhullet\" information section */}\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  {/* A paragraph with a link to Lovdata's \"Forskrift om frivillig merking a nœringsmidler med Nokkellhullet\" */}\n                  <p>\n                    Les mer om hvilke krav det stilles for merking av\n                    Nokkellhullet på Lovdatas \"Forskrift om frivillig merking a\n                    nœringsmidler med Nokkellhullet\":\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  {/* FontAwesome icon with event listener to hide the \"Nøkkelhullet\" information section */}\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        ) : null}\n        {/*Negative results nøkkelhullet container\" */}\n        {showNokkelhulletResults === false && (\n          <div className=\"container nøkkelhullet-food-negResult-container\">\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir ikke Nøkkelhullet.</p>\n                {showEmptyResult ? (\n                  <p>** Obligatoriske næringsverdier kan ikke være tomme.</p>\n                ) : null}\n\n                {mettede ? (\n                  <p>\n                    ** Mettede fettsyrer verdien kan være høyst 3.4 g/100 g.\n                  </p>\n                ) : null}\n\n                {fett ? (\n                  <p>** Fett verdien kan være høyst 17 g/100 g.</p>\n                ) : null}\n                {salt ? (\n                  <p>** Salt verdien kan være høyst 1.5 g/100 g.</p>\n                ) : null}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om frivillig merking av næringsmidler med Nøkkelhullet:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for ernæringspåstander if there are all true results */}\n        {buttonClicked && (\n          <div\n            className={\n              lowSugars && withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-all\"\n                : !lowSugars && !withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-none\"\n                : \"container ernæringspåstander-food-result-container-some\"\n            }\n          >\n            <h5>Ernæringspåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                {/* Low sugars */}\n                {lowSugars ? (\n                  <div>\n                    <p>** Lavt sukkerinnhold:</p>\n                    <p>\n                      Dette produktet inneholder høyst 5 g sukkerarter per 100 g\n                      for næringsmidler i fast form, eller høyst 2,5 g\n                      sukkerarter per 100 ml for næringsmidler i flytende form\n                      og oppfyller kravet for \"Lavt sukkerinnhold\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Lavt sukkerinnhold\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        For faste næringsmidler, sukkerinnholdet må være høyst 5\n                        g per 100 g.\n                      </li>\n                      <li>\n                        For flytende næringsmidler, sukkerinnholdet må være\n                        høyst 2,5 g per 100 ml.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n\n                {/* No added sugars */}\n                {withNoAddedSugars ? (\n                  <div>\n                    <p>** Uten tilsatt sukker:</p>\n                    <p>\n                      Dette produktet er ikke tilsatt monosakkarider,\n                      disakkarider eller andre næringsmidler på grunn av deres\n                      søtende egenskaper og oppfyller kravet for \"Uten tilsatt\n                      sukker\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Uten tilsatt sukker\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        Produktet må ikke være tilsatt monosakkarider,\n                        disakkarider eller andre næringsmidler på grunn av deres\n                        søtende egenskaper.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"ernaerings\")}\n                />\n              </div>\n            </div>\n            {infoErnaerings ? (\n              // Information section for \"Ernæringspåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"ernaerings\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for Helsepåstander results  */}\n        {showHelsepåstander && (\n          <div\n            className=\"container helsepåstander-food-result-container\"\n            style={{ background: \"#f2f0b5\" }}\n          >\n            <h5>Helsepåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Under utvikling. </p>\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"helsepåstander\")}\n                />\n              </div>\n            </div>\n            {infoHelsepåstander ? (\n              // Information section for \"Helsepåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"helsepåstander\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"15px\" }}></div>\n        {/* conditional rendering for the buttons using showButtons state */}\n        {showButtons && (\n          <div className=\"d-flex justify-content-between\">\n            {/* Save button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-save\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Lagre produkt\n            </button>\n\n            {/* Share button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-share\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Del produkt\n            </button>\n\n            {/* Add a new product button */}\n            <button\n              className=\"btn btn-primary\"\n              onClick={() => window.location.reload()}\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-plus\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Legg til et nytt produkt\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Kategori17;\n","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Melk15a.js",["420","421","422","423"],[],"import React from \"react\";\nimport { useState, useEffect } from \"react\"; // import the useState and useeffect hook.\nimport { faCircleExclamation } from \"@fortawesome/free-solid-svg-icons\"; // import an icon.\nimport { faBan } from \"@fortawesome/free-solid-svg-icons\";\nimport { faSave, faShare, faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"; // import FontAwesomeIcon component.\nimport Tooltip from \"@mui/material/Tooltip\"; // import Tooltip component.\nimport keyholeLgog from \"./circle-keyhole-logo.png\"; // import an image\nimport { faCircleInfo } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport { faXmarkCircle } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport Select from \"react-select\"; // import Select component\n\nconst Melk15a = () => {\n  // State variables for showing results and empty result message\n  const [showNokkelhulletResults, setShowNokkelhulletResults] = useState(null);\n  const [showErnaeringsResults, setShowErnaeringsResults] = useState(null);\n  const [showHelsepåstander, setShowHelsepåstander] = useState(null);\n  const [showEmptyResult, setShowEmptyResult] = useState(\"\"); // initialize state variable for showing empty result message.\n\n  //state variable to store the user's food type selection (solid or liquid) and the low sugars claim result\n  const [foodType, setFoodType] = useState(\"\");\n  const [lowSugars, setLowSugars] = useState(null);\n\n  //state variable to track whether the product meets the WITH NO ADDED SUGARS claim or not\n  const [withNoAddedSugars, setWithNoAddedSugars] = useState(false);\n\n  // State variable for tracking if the button is clicked\n  const [buttonClicked, setButtonClicked] = useState(false);\n\n  // useEffect hook for checking the condition for the \"WITH NO ADDED SUGARS\" claim when button is clicked\n  useEffect(() => {\n    if (buttonClicked) {\n      if (withNoAddedSugars) {\n        setShowErnaeringsResults(true);\n      } else {\n        setShowErnaeringsResults(false);\n      }\n    }\n  }, [withNoAddedSugars, buttonClicked]);\n\n  //state for controlling the buttons' visibility\n  const [showButtons, setShowButtons] = useState(false);\n\n  // State variables to control the visibility of the information sections\n  const [infoNokkelhullet, setInfoNokkelhullet] = useState(false);\n  const [infoErnaerings, setInfoErnaerings] = useState(false);\n  const [infoHelsepåstander, setInfoHelsepåstander] = useState(false);\n\n  // Function to show an information section based on the container parameter\n  const onClickInfo = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(true);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(true);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(true);\n    }\n  };\n\n  // Function to hide an information section based on the container parameter\n  const onClickClose = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(false);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(false);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(false);\n    }\n  };\n\n  // State variables for handling input fields and validation errors\n  const [energikj, setEnergikj] = useState(false);\n  const [energikcal, setEnergikcal] = useState(false);\n\n  const [fett, setFett] = useState(false);\n  const [fettNull, setFettNull] = useState(false);\n  const [mettede, setMettede] = useState(false);\n  const [karbohydrat, setKarbohydrat] = useState(false);\n  const [karbohydratNull, setKarbohydratNull] = useState(false);\n  const [hvoravSukkerarter, setHvoravSukkerarter] = useState(false);\n  const [kostfiber, setKostfiber] = useState(false);\n  const [protein, setProtein] = useState(false);\n  const [salt, setSalt] = useState(false);\n  const [saltNull, setSaltNull] = useState(false);\n\n  // State variable for storing nutrition information entered by user\n  const [nutrition, setNutrition] = useState({\n    energikj: \"\",\n    energikcal: \"\",\n    fett: \"\",\n    mettede: \"\",\n    karbohydrat: \"\",\n    hvoravSukkerarter: \"\",\n    kostfiber: \"\",\n    protein: \"\",\n    salt: \"\",\n  });\n\n  // Handler for updating nutrition state/state variable based on input field changes/input values\n  const changeHandle = (event) => {\n    console.log(\"changeHandle ===\", event.target, event.target.value);\n    setNutrition({\n      ...nutrition,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  // define function to handle form submission\n  const onClick = (e) => {\n    e.preventDefault();\n    setButtonClicked(true);\n    setShowHelsepåstander(true);\n    setShowButtons(true);\n\n    console.log(\"onclick ===\", selectsPart, nutrition);\n\n    // Check if all required fields are filled out and within valid ranges\n    // The if statement checks if all required inputs are non-empty and meet the nutritional requirements\n    if (\n      nutrition.fett !== \"\" &&\n      nutrition.fett <= 5 &&\n      nutrition.mettede !== \"\" &&\n      nutrition.karbohydrat !== \"\" &&\n      nutrition.karbohydrat <= 5 &&\n      nutrition.hvoravSukkerarter !== \"\" &&\n      nutrition.kostfiber !== \"\" &&\n      nutrition.protein !== \"\" &&\n      nutrition.salt !== \"\" &&\n      nutrition.salt <= 0.8\n    ) {\n      // If all requirements are met, display the nutrition results\n      setShowNokkelhulletResults(true);\n      // Hide any empty result messages or error messages\n      setShowEmptyResult(false);\n\n      // Check if the user selected \"energikj\" and if nutrition input lable of \"energikj\" is not empty\n      if (selectsPart === \"energikj\" && nutrition.energikj !== \"\") {\n        setEnergikj(false);\n      }\n\n      // Check if the user selected \"energikcal\" and if nutrition input lable of \"energikcal\" is not empty\n      if (selectsPart === \"energikcal\" && nutrition.energikcal !== \"\") {\n        setEnergikcal(false);\n      }\n      // Reset all input validation errors\n      setFett(false);\n      setFettNull(false);\n      setMettede(false);\n      setKarbohydrat(false);\n      setKarbohydratNull(false);\n      setHvoravSukkerarter(false);\n      setKostfiber(false);\n      setProtein(false);\n      setSalt(false);\n      setSaltNull(false);\n      // If the user has not selected any nutrients, set errors accordingly\n      // Check each nutrition value to see if it is missing or negative\n      // show input validation errors if any input is missing or negative.\n    } else {\n      if (selectsPart === \"energikj\") {\n        console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n        if (nutrition.energikj === \"\" || nutrition.energikj < 0) {\n          console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n          setEnergikj(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikj(false);\n        }\n      }\n\n      if (selectsPart === \"energikcal\") {\n        console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n        if (nutrition.energikcal === \"\" || nutrition.energikcal < 0) {\n          console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n          setEnergikcal(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikcal(false);\n        }\n      }\n\n      // repeat for each nutrition value...\n      if (nutrition.fett === \"\" || nutrition.fett < 0) {\n        setFettNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setFettNull(false);\n      }\n      if (nutrition.fett > 5) {\n        setFett(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setFett(false);\n      }\n\n      if (nutrition.mettede === \"\" || nutrition.mettede < 0) {\n        setMettede(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setMettede(false);\n      }\n\n      if (nutrition.karbohydrat === \"\" || nutrition.karbohydrat < 0) {\n        setKarbohydratNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKarbohydratNull(false);\n      }\n      if (nutrition.karbohydrat > 5) {\n        setKarbohydrat(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setKarbohydrat(false);\n      }\n\n      if (\n        nutrition.hvoravSukkerarter === \"\" ||\n        nutrition.hvoravSukkerarter < 0\n      ) {\n        setHvoravSukkerarter(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setHvoravSukkerarter(false);\n      }\n\n      if (nutrition.kostfiber === \"\" || nutrition.kostfiber < 0) {\n        setKostfiber(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKostfiber(false);\n      }\n\n      if (nutrition.protein === \"\" || nutrition.protein < 0) {\n        setProtein(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setProtein(false);\n      }\n\n      if (nutrition.salt === \"\" || nutrition.salt < 0) {\n        setSaltNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setSaltNull(false);\n      }\n      if (nutrition.salt > 0.8) {\n        setSalt(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setSalt(false);\n      }\n    }\n\n    // Check for the \"LOW SUGARS\" claim\n    if (foodType === \"solid\" && parseFloat(nutrition.karbohydrat) <= 5) {\n      setLowSugars(true);\n    } else if (\n      foodType === \"liquid\" &&\n      parseFloat(nutrition.karbohydrat) <= 2.5\n    ) {\n      setLowSugars(true);\n    } else {\n      setLowSugars(false);\n    }\n\n    // Check the condition for the \"WITH NO ADDED SUGARS\" nutrition claim\n    if (nutrition.hvoravSukkerarter === \"0\" && nutrition.karbohydrat > 0) {\n      setWithNoAddedSugars(true);\n    } else {\n      setWithNoAddedSugars(false);\n    }\n  };\n\n  // create an array of energy units to select from\n  const selectUnit = [\n    {\n      value: \"energikj\",\n      label: \"(kj)\",\n    },\n    {\n      value: \"energikcal\",\n      label: \"(kcal)\",\n    },\n  ];\n\n  // Declare a state variable for the select dropdown.\n  const [selectsPart, setSelectPart] = useState(\"\");\n\n  // A function to handle changes to the select dropdown energy unit\n  const handlerPart = (event) => {\n    const inputVal = document.getElementsByName(event.value);\n    console.log(\"handlerPart ===\", event, nutrition, inputVal);\n    setSelectPart(event.value);\n  };\n\n  //create an array of food types to select from\n  const foodTypes = [\n    {\n      value: \"solid\",\n      label: \"Fast form\",\n    },\n    {\n      value: \"liquid\",\n      label: \"Flytende form\",\n    },\n  ];\n\n  return (\n    <div className=\"row\">\n      {/* This div creates a column layout for the left side of the table */}\n      <div className=\"col-md-6\">\n        {/* the selector (dropdown menu) for choosing the food type. */}\n        <div className=\"form-group\">\n          <label htmlFor=\"foodType\">Velg type matvare:</label>\n          <Select\n            className=\"form-control\"\n            id=\"foodType\"\n            options={foodTypes}\n            onChange={(e) => setFoodType(e.value)} // update the onFoodTypeChange function to directly set the food type state\n            placeholder=\"Velg type matvare\"\n          />\n        </div>\n\n        <h5>\n          Næringsinnhold per 100{\" \"}\n          {foodType === \"solid\" ? \"g\" : foodType === \"liquid\" ? \"ml\" : \"g/ml\"}\n        </h5>\n\n        {/* This div adds a light background color to the table */}\n        <div className=\"bg-light\">\n          {/* This table shows the nutritional information */}\n          <table className=\"table table-striped\">\n            {/* The table header */}\n            <thead>\n              <tr>\n                <th scope=\"col\" className=\"table-font\">\n                  Energi eller næringsstoff\n                </th>\n                <th scope=\"col\" className=\"table-font\">\n                  Mengde\n                </th>\n              </tr>\n            </thead>\n\n            {/* The table body */}\n            <tbody>\n              {/* This row shows the energy content */}\n              <tr className={(energikj, energikcal ? \"alert-box\" : null)}>\n                <th scope=\"row\" className=\"table-font\">\n                  {/* An icon with a tooltip to indicate missing values in energy parameters */}\n                  {energikj && energikcal ? (\n                    <Tooltip\n                      title=\"Mangler verdi i energi (kJ/Kcal) parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  {/* This div displays the energy label and unit */}\n                  <div className=\"row\">\n                    <div className=\"col-md-3\">\n                      <label for=\"energiunit\" class=\"form-label\">\n                        Energi\n                      </label>\n                    </div>\n                    {/* A dropdown menu for selecting the energy unit */}\n                    <div className=\"col-md-6\">\n                      <Select\n                        placeholder={<div>Velg enhet</div>}\n                        className=\"form-select-md mb-3\"\n                        options={selectUnit}\n                        onChange={(e) => handlerPart(e)}\n                      />\n                    </div>\n                  </div>\n                </th>\n                {/* An input field for entering the energy value */}\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name={selectsPart}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* Additional rows for other nutrient selections */}\n              {/* This row shows the fat content */}\n              <tr\n                className={\n                  fett ? \"alert-box\" : null || fettNull ? \"alert-box\" : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {fett ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden fett. Mengden på fett må være lavere enn eller lik 5 / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {fettNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i fett parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Fett (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"fett\"\n                    value={nutrition.fett}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the saturated fat content */}\n              <tr className={mettede ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {mettede ? (\n                    <Tooltip\n                      title=\"Mangler verdi i mettede fettsyrer parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Mettede fettsyrer (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"mettede\"\n                    value={nutrition.mettede}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the carbohydrate content */}\n              <tr\n                className={\n                  karbohydrat\n                    ? \"alert-box\"\n                    : null || karbohydratNull\n                    ? \"alert-box\"\n                    : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {karbohydrat ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden sukkerarter. Mengden på sukkerarter må være lavere enn eller lik 5 g / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {karbohydratNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i karbohydrat parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Karbohydrat (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"karbohydrat\"\n                    value={nutrition.karbohydrat}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows hvorav sukkerarter content */}\n              <tr className={hvoravSukkerarter ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {hvoravSukkerarter ? (\n                    <Tooltip\n                      title=\"Mangler verdi i hvorav sukkerarter parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Hvorav tilsatte sukkerarter (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"hvoravSukkerarter\"\n                    value={nutrition.hvoravSukkerarter}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows kostfiber content */}\n              <tr className={kostfiber ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {kostfiber ? (\n                    <Tooltip\n                      title=\"Mangler verdi i kostfiber parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Kostfiber (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"kostfiber\"\n                    value={nutrition.kostfiber}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the protein content */}\n              <tr className={protein ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {protein ? (\n                    <Tooltip\n                      title=\"Mangler verdi i protein parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Protein (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"protein\"\n                    value={nutrition.protein}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows salt content */}\n              <tr\n                className={\n                  salt ? \"alert-box\" : null || saltNull ? \"alert-box\" : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {salt ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden salt. Mengden på salt må være lavere enn eller lik 0.8 / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {saltNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i salt parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Salt (g)\n                </th>\n                <td colSpan=\"2\">\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"salt\"\n                    value={nutrition.salt}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n\n        {/* Button that submits the form and calls the onClick function */}\n        <div className=\"col-12 button-div\">\n          <button\n            type=\"submit\"\n            className=\"btn btn-primary btn-lg button-search\"\n            onClick={onClick}\n          >\n            Beregn\n          </button>\n        </div>\n      </div>\n\n      <div className=\"col-md-6\">\n        {/* positive results nøkkelhullet container\" */}\n        {showNokkelhulletResults ? (\n          <div className=\"container nøkkelhullet-food-result-container\">\n            {/* An image with class \"keyhole-logo\" and alt text \"keyhole logo\" */}\n            <img\n              src={keyholeLgog}\n              className=\"keyhole-logo img-fluid\"\n              alt=\"keyhole logo\"\n            />\n            {/* A heading with text \"Nøkkelhullet\" */}\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir Nøkkelhullet. </p>\n              </div>\n              <div className=\"col-md-2\">\n                {/* FontAwesome icon with event listener to show the \"Nøkkelhullet\" information section */}\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  {/* A paragraph with a link to Lovdata's \"Forskrift om frivillig merking a nœringsmidler med Nokkellhullet\" */}\n                  <p>\n                    Les mer om hvilke krav det stilles for merking av\n                    Nokkellhullet på Lovdatas \"Forskrift om frivillig merking a\n                    nœringsmidler med Nokkellhullet\":\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  {/* FontAwesome icon with event listener to hide the \"Nøkkelhullet\" information section */}\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        ) : null}\n        {/*Negative results nøkkelhullet container\" */}\n        {showNokkelhulletResults === false && (\n          <div className=\"container nøkkelhullet-food-negResult-container\">\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir ikke Nøkkelhullet.</p>\n                {showEmptyResult ? (\n                  <p>** Obligatoriske næringsverdier kan ikke være tomme.</p>\n                ) : null}\n\n                {fett ? <p>** Fett verdien kan være høyst 5 g/100 g.</p> : null}\n\n                {karbohydrat ? (\n                  <p>** Sukkerarter verdien kan være høyst 5 g/100 g.</p>\n                ) : null}\n                {salt ? (\n                  <p>** Salt verdien kan være høyst 0.8 g/100 g.</p>\n                ) : null}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om frivillig merking av næringsmidler med Nøkkelhullet:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for ernæringspåstander if there are all true results */}\n        {buttonClicked && (\n          <div\n            className={\n              lowSugars && withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-all\"\n                : !lowSugars && !withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-none\"\n                : \"container ernæringspåstander-food-result-container-some\"\n            }\n          >\n            <h5>Ernæringspåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                {/* Low sugars */}\n                {lowSugars ? (\n                  <div>\n                    <p>** Lavt sukkerinnhold:</p>\n                    <p>\n                      Dette produktet inneholder høyst 5 g sukkerarter per 100 g\n                      for næringsmidler i fast form, eller høyst 2,5 g\n                      sukkerarter per 100 ml for næringsmidler i flytende form\n                      og oppfyller kravet for \"Lavt sukkerinnhold\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Lavt sukkerinnhold\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        For faste næringsmidler, sukkerinnholdet må være høyst 5\n                        g per 100 g.\n                      </li>\n                      <li>\n                        For flytende næringsmidler, sukkerinnholdet må være\n                        høyst 2,5 g per 100 ml.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n\n                {/* No added sugars */}\n                {withNoAddedSugars ? (\n                  <div>\n                    <p>** Uten tilsatt sukker:</p>\n                    <p>\n                      Dette produktet er ikke tilsatt monosakkarider,\n                      disakkarider eller andre næringsmidler på grunn av deres\n                      søtende egenskaper og oppfyller kravet for \"Uten tilsatt\n                      sukker\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Uten tilsatt sukker\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        Produktet må ikke være tilsatt monosakkarider,\n                        disakkarider eller andre næringsmidler på grunn av deres\n                        søtende egenskaper.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"ernaerings\")}\n                />\n              </div>\n            </div>\n            {infoErnaerings ? (\n              // Information section for \"Ernæringspåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"ernaerings\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for Helsepåstander results  */}\n        {showHelsepåstander && (\n          <div\n            className=\"container helsepåstander-food-result-container\"\n            style={{ background: \"#f2f0b5\" }}\n          >\n            <h5>Helsepåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Under utvikling. </p>\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"helsepåstander\")}\n                />\n              </div>\n            </div>\n            {infoHelsepåstander ? (\n              // Information section for \"Helsepåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"helsepåstander\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"15px\" }}></div>\n        {/* conditional rendering for the buttons using showButtons state */}\n        {showButtons && (\n          <div className=\"d-flex justify-content-between\">\n            {/* Save button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-save\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Lagre produkt\n            </button>\n\n            {/* Share button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-share\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Del produkt\n            </button>\n\n            {/* Add a new product button */}\n            <button\n              className=\"btn btn-primary\"\n              onClick={() => window.location.reload()}\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-plus\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Legg til et nytt produkt\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Melk15a;\n","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Melk15b.js",["424","425","426","427"],[],"import React from \"react\";\nimport { useState, useEffect } from \"react\"; // import the useState and useeffect hook.\nimport { faCircleExclamation } from \"@fortawesome/free-solid-svg-icons\"; // import an icon.\nimport { faBan } from \"@fortawesome/free-solid-svg-icons\";\nimport { faSave, faShare, faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"; // import FontAwesomeIcon component.\nimport Tooltip from \"@mui/material/Tooltip\"; // import Tooltip component.\nimport keyholeLgog from \"./circle-keyhole-logo.png\"; // import an image\nimport { faCircleInfo } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport { faXmarkCircle } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport Select from \"react-select\"; // import Select component\n\nconst Melk15b = () => {\n  // State variables for showing/ results and empty result message\n  const [showNokkelhulletResults, setShowNokkelhulletResults] = useState(null);\n  const [showErnaeringsResults, setShowErnaeringsResults] = useState(null);\n  const [showHelsepåstander, setShowHelsepåstander] = useState(null);\n  const [showEmptyResult, setShowEmptyResult] = useState(\"\"); // initialize state variable for showing empty result message.\n\n  //state variable to store the user's food type selection (solid or liquid) and the low sugars claim result\n  const [foodType, setFoodType] = useState(\"\");\n  const [lowSugars, setLowSugars] = useState(null);\n\n  //state variable to track whether the product meets the WITH NO ADDED SUGARS claim or not\n  const [withNoAddedSugars, setWithNoAddedSugars] = useState(false);\n\n  // State variable for tracking if the button is clicked\n  const [buttonClicked, setButtonClicked] = useState(false);\n\n  // useEffect hook for checking the condition for the \"WITH NO ADDED SUGARS\" claim when button is clicked\n  useEffect(() => {\n    if (buttonClicked) {\n      if (withNoAddedSugars) {\n        setShowErnaeringsResults(true);\n      } else {\n        setShowErnaeringsResults(false);\n      }\n    }\n  }, [withNoAddedSugars, buttonClicked]);\n\n  //state for controlling the buttons' visibility\n  const [showButtons, setShowButtons] = useState(false);\n\n  // State variables to control the visibility of the information sections\n  const [infoNokkelhullet, setInfoNokkelhullet] = useState(false);\n  const [infoErnaerings, setInfoErnaerings] = useState(false);\n  const [infoHelsepåstander, setInfoHelsepåstander] = useState(false);\n\n  // Function to show an information section based on the container parameter\n  const onClickInfo = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(true);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(true);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(true);\n    }\n  };\n\n  // Function to hide an information section based on the container parameter\n  const onClickClose = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(false);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(false);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(false);\n    }\n  };\n\n  // State variables for handling input fields and validation errors\n  const [energikj, setEnergikj] = useState(false);\n  const [energikcal, setEnergikcal] = useState(false);\n\n  const [fett, setFett] = useState(false);\n  const [fettNull, setFettNull] = useState(false);\n  const [mettede, setMettede] = useState(false);\n  const [mettedeNull, setMettedeNull] = useState(false);\n  const [karbohydrat, setKarbohydrat] = useState(false);\n  const [karbohydratNull, setKarbohydratNull] = useState(false);\n  const [hvoravSukkerarter, setHvoravSukkerarter] = useState(false);\n  const [kostfiber, setKostfiber] = useState(false);\n  const [protein, setProtein] = useState(false);\n  const [salt, setSalt] = useState(false);\n  const [saltNull, setSaltNull] = useState(false);\n\n  // State variable for storing nutrition information entered by user\n  const [nutrition, setNutrition] = useState({\n    energikj: \"\",\n    energikcal: \"\",\n    fett: \"\",\n    mettede: \"\",\n    karbohydrat: \"\",\n    hvoravSukkerarter: \"\",\n    kostfiber: \"\",\n    protein: \"\",\n    salt: \"\",\n  });\n\n  // Handler for updating nutrition state/state variable based on input field changes/input values\n  const changeHandle = (event) => {\n    console.log(\"changeHandle ===\", event.target, event.target.value);\n    setNutrition({\n      ...nutrition,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  // define function to handle form submission\n  const onClick = (e) => {\n    e.preventDefault();\n    setButtonClicked(true);\n    setShowHelsepåstander(true);\n    setShowButtons(true);\n\n    console.log(\"onclick ===\", selectsPart, nutrition);\n\n    // Check if all required fields are filled out and within valid ranges\n    // The if statement checks if all required inputs are non-empty and meet the nutritional requirements\n    if (\n      nutrition.fett !== \"\" &&\n      nutrition.fett <= 5 &&\n      nutrition.mettede !== \"\" &&\n      nutrition.mettede <= 1.65 &&\n      nutrition.karbohydrat !== \"\" &&\n      nutrition.karbohydrat <= 5 &&\n      nutrition.hvoravSukkerarter !== \"\" &&\n      nutrition.kostfiber !== \"\" &&\n      nutrition.protein !== \"\" &&\n      nutrition.salt !== \"\" &&\n      nutrition.salt <= 0.8\n    ) {\n      // If all requirements are met, display the nutrition results\n      setShowNokkelhulletResults(true);\n      // Hide any empty result messages or error messages\n      setShowEmptyResult(false);\n\n      // Check if the user selected \"energikj\" and if nutrition input lable of \"energikj\" is not empty\n      if (selectsPart === \"energikj\" && nutrition.energikj !== \"\") {\n        setEnergikj(false);\n      }\n\n      // Check if the user selected \"energikcal\" and if nutrition input lable of \"energikcal\" is not empty\n      if (selectsPart === \"energikcal\" && nutrition.energikcal !== \"\") {\n        setEnergikcal(false);\n      }\n      // Reset all input validation errors\n      setFett(false);\n      setFettNull(false);\n      setMettede(false);\n      setMettedeNull(false);\n      setKarbohydrat(false);\n      setKarbohydratNull(false);\n      setHvoravSukkerarter(false);\n      setKostfiber(false);\n      setProtein(false);\n      setSalt(false);\n      setSaltNull(false);\n\n      // If the user has not selected any nutrients, set errors accordingly\n      // Check each nutrition value to see if it is missing or negative\n      // show input validation errors if any input is missing or negative.\n    } else {\n      if (selectsPart === \"energikj\") {\n        console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n        if (nutrition.energikj === \"\" || nutrition.energikj < 0) {\n          console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n          setEnergikj(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikj(false);\n        }\n      }\n\n      if (selectsPart === \"energikcal\") {\n        console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n        if (nutrition.energikcal === \"\" || nutrition.energikcal < 0) {\n          console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n          setEnergikcal(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikcal(false);\n        }\n      }\n\n      // repeat for each nutrition value...\n      if (nutrition.fett === \"\" || nutrition.fett < 0) {\n        setFettNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setFettNull(false);\n      }\n      if (nutrition.fett > 5) {\n        setFett(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setFett(false);\n      }\n\n      if (nutrition.mettede === \"\" || nutrition.mettede < 0) {\n        setMettedeNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setMettedeNull(false);\n      }\n      if (nutrition.mettede > 1.65) {\n        setMettede(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setMettede(false);\n      }\n\n      if (nutrition.karbohydrat === \"\" || nutrition.karbohydrat < 0) {\n        setKarbohydratNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKarbohydratNull(false);\n      }\n      if (nutrition.karbohydrat > 5) {\n        setKarbohydrat(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setKarbohydrat(false);\n      }\n\n      if (\n        nutrition.hvoravSukkerarter === \"\" ||\n        nutrition.hvoravSukkerarter < 0\n      ) {\n        setHvoravSukkerarter(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setHvoravSukkerarter(false);\n      }\n\n      if (nutrition.kostfiber === \"\" || nutrition.kostfiber < 0) {\n        setKostfiber(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKostfiber(false);\n      }\n\n      if (nutrition.protein === \"\" || nutrition.protein < 0) {\n        setProtein(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setProtein(false);\n      }\n\n      if (nutrition.salt === \"\" || nutrition.salt < 0) {\n        setSaltNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setSaltNull(false);\n      }\n      if (nutrition.salt > 0.8) {\n        setSalt(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setSalt(false);\n      }\n    }\n\n    // Check for the \"LOW SUGARS\" claim\n    if (foodType === \"solid\" && parseFloat(nutrition.karbohydrat) <= 5) {\n      setLowSugars(true);\n    } else if (\n      foodType === \"liquid\" &&\n      parseFloat(nutrition.karbohydrat) <= 2.5\n    ) {\n      setLowSugars(true);\n    } else {\n      setLowSugars(false);\n    }\n\n    // Check the condition for the \"WITH NO ADDED SUGARS\" nutrition claim\n    if (nutrition.hvoravSukkerarter === \"0\" && nutrition.karbohydrat > 0) {\n      setWithNoAddedSugars(true);\n    } else {\n      setWithNoAddedSugars(false);\n    }\n  };\n\n  // create an array of energy units to select from\n  const selectUnit = [\n    {\n      value: \"energikj\",\n      label: \"(kj)\",\n    },\n    {\n      value: \"energikcal\",\n      label: \"(kcal)\",\n    },\n  ];\n\n  // Declare a state variable for the select dropdown.\n  const [selectsPart, setSelectPart] = useState(\"\");\n\n  // A function to handle changes to the select dropdown energy unit\n  const handlerPart = (event) => {\n    const inputVal = document.getElementsByName(event.value);\n    console.log(\"handlerPart ===\", event, nutrition, inputVal);\n    setSelectPart(event.value);\n  };\n\n  //create an array of food types to select from\n  const foodTypes = [\n    {\n      value: \"solid\",\n      label: \"Fast form\",\n    },\n    {\n      value: \"liquid\",\n      label: \"Flytende form\",\n    },\n  ];\n\n  return (\n    <div className=\"row\">\n      {/* This div creates a column layout for the left side of the table */}\n      <div className=\"col-md-6\">\n        {/* the selector (dropdown menu) for choosing the food type. */}\n        <div className=\"form-group\">\n          <label htmlFor=\"foodType\">Velg type matvare:</label>\n          <Select\n            className=\"form-control\"\n            id=\"foodType\"\n            options={foodTypes}\n            onChange={(e) => setFoodType(e.value)} // update the onFoodTypeChange function to directly set the food type state\n            placeholder=\"Velg type matvare\"\n          />\n        </div>\n\n        <h5>\n          Næringsinnhold per 100{\" \"}\n          {foodType === \"solid\" ? \"g\" : foodType === \"liquid\" ? \"ml\" : \"g/ml\"}\n        </h5>\n\n        {/* This div adds a light background color to the table */}\n        <div className=\"bg-light\">\n          {/* This table shows the nutritional information */}\n          <table className=\"table table-striped\">\n            {/* The table header */}\n            <thead>\n              <tr>\n                <th scope=\"col\" className=\"table-font\">\n                  Energi eller næringsstoff\n                </th>\n                <th scope=\"col\" className=\"table-font\">\n                  Mengde\n                </th>\n              </tr>\n            </thead>\n\n            {/* The table body */}\n            <tbody>\n              {/* This row shows the energy content */}\n              <tr className={(energikj, energikcal ? \"alert-box\" : null)}>\n                <th scope=\"row\" className=\"table-font\">\n                  {/* An icon with a tooltip to indicate missing values in energy parameters */}\n                  {energikj && energikcal ? (\n                    <Tooltip\n                      title=\"Mangler verdi i energi (kJ/Kcal) parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  {/* This div displays the energy label and unit */}\n                  <div className=\"row\">\n                    <div className=\"col-md-3\">\n                      <label for=\"energiunit\" class=\"form-label\">\n                        Energi\n                      </label>\n                    </div>\n                    {/* A dropdown menu for selecting the energy unit */}\n                    <div className=\"col-md-6\">\n                      <Select\n                        placeholder={<div>Velg enhet</div>}\n                        className=\"form-select-md mb-3\"\n                        options={selectUnit}\n                        onChange={(e) => handlerPart(e)}\n                      />\n                    </div>\n                  </div>\n                </th>\n                {/* An input field for entering the energy value */}\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name={selectsPart}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* Additional rows for other nutrient selections */}\n              {/* This row shows the fat content */}\n              <tr\n                className={\n                  fett ? \"alert-box\" : null || fettNull ? \"alert-box\" : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {fett ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden fett. Mengden på fett må være lavere enn eller lik 5/ 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {fettNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i fett parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Fett (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"fett\"\n                    value={nutrition.fett}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the saturated fat content */}\n              <tr\n                className={\n                  mettede\n                    ? \"alert-box\"\n                    : null || mettedeNull\n                    ? \"alert-box\"\n                    : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {mettede ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden mettede fettsyrer. Mengden på mettede fettsyrer må være lavere enn eller lik 1.65 / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {mettedeNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i mettede fettsyrer parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Mettede fettsyrer (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"mettede\"\n                    value={nutrition.mettede}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the carbohydrate content */}\n              <tr\n                className={\n                  karbohydrat\n                    ? \"alert-box\"\n                    : null || karbohydratNull\n                    ? \"alert-box\"\n                    : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {karbohydrat ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden sukkerarter. Mengden på sukkerarter må være lavere enn eller lik 5 g / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {karbohydratNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i karbohydrat parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Karbohydrat (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"karbohydrat\"\n                    value={nutrition.karbohydrat}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows hvorav sukkerarter content */}\n              <tr className={hvoravSukkerarter ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {hvoravSukkerarter ? (\n                    <Tooltip\n                      title=\"Mangler verdi i hvorav sukkerarter parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Hvorav tilsatte sukkerarter (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"hvoravSukkerarter\"\n                    value={nutrition.hvoravSukkerarter}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows kostfiber content */}\n              <tr className={kostfiber ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {kostfiber ? (\n                    <Tooltip\n                      title=\"Mangler verdi i kostfiber parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Kostfiber (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"kostfiber\"\n                    value={nutrition.kostfiber}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the protein content */}\n              <tr className={protein ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {protein ? (\n                    <Tooltip\n                      title=\"Mangler verdi i protein parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Protein (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"protein\"\n                    value={nutrition.protein}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows salt content */}\n              <tr\n                className={\n                  salt ? \"alert-box\" : null || saltNull ? \"alert-box\" : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {salt ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden salt. Mengden på salt må være lavere enn eller lik 0.8 / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {saltNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i salt parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Salt (g)\n                </th>\n                <td colSpan=\"2\">\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"salt\"\n                    value={nutrition.salt}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n\n        {/* Button that submits the form and calls the onClick function */}\n        <div className=\"col-12 button-div\">\n          <button\n            type=\"submit\"\n            className=\"btn btn-primary btn-lg button-search\"\n            onClick={onClick}\n          >\n            Beregn\n          </button>\n        </div>\n      </div>\n\n      <div className=\"col-md-6\">\n        {/* positive results nøkkelhullet container\" */}\n        {showNokkelhulletResults ? (\n          <div className=\"container nøkkelhullet-food-result-container\">\n            {/* An image with class \"keyhole-logo\" and alt text \"keyhole logo\" */}\n            <img\n              src={keyholeLgog}\n              className=\"keyhole-logo img-fluid\"\n              alt=\"keyhole logo\"\n            />\n            {/* A heading with text \"Nøkkelhullet\" */}\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir Nøkkelhullet. </p>\n              </div>\n              <div className=\"col-md-2\">\n                {/* FontAwesome icon with event listener to show the \"Nøkkelhullet\" information section */}\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  {/* A paragraph with a link to Lovdata's \"Forskrift om frivillig merking a nœringsmidler med Nokkellhullet\" */}\n                  <p>\n                    Les mer om hvilke krav det stilles for merking av\n                    Nokkellhullet på Lovdatas \"Forskrift om frivillig merking a\n                    nœringsmidler med Nokkellhullet\":\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  {/* FontAwesome icon with event listener to hide the \"Nøkkelhullet\" information section */}\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        ) : null}\n        {/*Negative results nøkkelhullet container\" */}\n        {showNokkelhulletResults === false && (\n          <div className=\"container nøkkelhullet-food-negResult-container\">\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir ikke Nøkkelhullet.</p>\n                {showEmptyResult ? (\n                  <p>** Obligatoriske næringsverdier kan ikke være tomme.</p>\n                ) : null}\n\n                {mettede ? (\n                  <p>\n                    ** Mettede fettsyrer verdien kan være høyst 33 % av\n                    fettinnholdet /100 g.\n                  </p>\n                ) : null}\n\n                {fett ? <p>** Fett verdien kan være høyst 5 g/100 g.</p> : null}\n\n                {karbohydrat ? (\n                  <p>** Sukkerarter verdien kan være høyst 5 g/100 g.</p>\n                ) : null}\n\n                {salt ? (\n                  <p>** Salt verdien kan være høyst 0.8 g/100 g.</p>\n                ) : null}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om frivillig merking av næringsmidler med Nøkkelhullet:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for ernæringspåstander if there are all true results */}\n        {buttonClicked && (\n          <div\n            className={\n              lowSugars && withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-all\"\n                : !lowSugars && !withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-none\"\n                : \"container ernæringspåstander-food-result-container-some\"\n            }\n          >\n            <h5>Ernæringspåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                {/* Low sugars */}\n                {lowSugars ? (\n                  <div>\n                    <p>** Lavt sukkerinnhold:</p>\n                    <p>\n                      Dette produktet inneholder høyst 5 g sukkerarter per 100 g\n                      for næringsmidler i fast form, eller høyst 2,5 g\n                      sukkerarter per 100 ml for næringsmidler i flytende form\n                      og oppfyller kravet for \"Lavt sukkerinnhold\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Lavt sukkerinnhold\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        For faste næringsmidler, sukkerinnholdet må være høyst 5\n                        g per 100 g.\n                      </li>\n                      <li>\n                        For flytende næringsmidler, sukkerinnholdet må være\n                        høyst 2,5 g per 100 ml.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n\n                {/* No added sugars */}\n                {withNoAddedSugars ? (\n                  <div>\n                    <p>** Uten tilsatt sukker:</p>\n                    <p>\n                      Dette produktet er ikke tilsatt monosakkarider,\n                      disakkarider eller andre næringsmidler på grunn av deres\n                      søtende egenskaper og oppfyller kravet for \"Uten tilsatt\n                      sukker\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Uten tilsatt sukker\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        Produktet må ikke være tilsatt monosakkarider,\n                        disakkarider eller andre næringsmidler på grunn av deres\n                        søtende egenskaper.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"ernaerings\")}\n                />\n              </div>\n            </div>\n            {infoErnaerings ? (\n              // Information section for \"Ernæringspåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"ernaerings\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for Helsepåstander results  */}\n        {showHelsepåstander && (\n          <div\n            className=\"container helsepåstander-food-result-container\"\n            style={{ background: \"#f2f0b5\" }}\n          >\n            <h5>Helsepåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Under utvikling. </p>\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"helsepåstander\")}\n                />\n              </div>\n            </div>\n            {infoHelsepåstander ? (\n              // Information section for \"Helsepåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"helsepåstander\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"15px\" }}></div>\n        {/* conditional rendering for the buttons using showButtons state */}\n        {showButtons && (\n          <div className=\"d-flex justify-content-between\">\n            {/* Save button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-save\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Lagre produkt\n            </button>\n\n            {/* Share button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-share\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Del produkt\n            </button>\n\n            {/* Add a new product button */}\n            <button\n              className=\"btn btn-primary\"\n              onClick={() => window.location.reload()}\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-plus\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Legg til et nytt produkt\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Melk15b;\n","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Kategori16.js",["428","429","430","431"],[],"import React from \"react\";\nimport { useState, useEffect } from \"react\"; // import the useState and useeffect hook.\nimport { faCircleExclamation } from \"@fortawesome/free-solid-svg-icons\"; // import an icon.\nimport { faBan } from \"@fortawesome/free-solid-svg-icons\";\nimport { faSave, faShare, faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"; // import FontAwesomeIcon component.\nimport Tooltip from \"@mui/material/Tooltip\"; // import Tooltip component.\nimport keyholeLgog from \"./circle-keyhole-logo.png\"; // import an image\nimport { faCircleInfo } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport { faXmarkCircle } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport Select from \"react-select\"; // import Select component\n\nconst Kategori16 = () => {\n  // State variables for showing results and empty result message\n  const [showNokkelhulletResults, setShowNokkelhulletResults] = useState(null);\n  const [showErnaeringsResults, setShowErnaeringsResults] = useState(null);\n  const [showHelsepåstander, setShowHelsepåstander] = useState(null);\n  const [showEmptyResult, setShowEmptyResult] = useState(\"\"); // initialize state variable for showing empty result message.\n\n  //state variable to store the user's food type selection (solid or liquid) and the low sugars claim result\n  const [foodType, setFoodType] = useState(\"\");\n  const [lowSugars, setLowSugars] = useState(null);\n\n  //state variable to track whether the product meets the WITH NO ADDED SUGARS claim or not\n  const [withNoAddedSugars, setWithNoAddedSugars] = useState(false);\n\n  // State variable for tracking if the button is clicked\n  const [buttonClicked, setButtonClicked] = useState(false);\n\n  // useEffect hook for checking the condition for the \"WITH NO ADDED SUGARS\" claim when button is clicked\n  useEffect(() => {\n    if (buttonClicked) {\n      if (withNoAddedSugars) {\n        setShowErnaeringsResults(true);\n      } else {\n        setShowErnaeringsResults(false);\n      }\n    }\n  }, [withNoAddedSugars, buttonClicked]);\n\n  //state for controlling the buttons' visibility\n  const [showButtons, setShowButtons] = useState(false);\n\n  // State variables to control the visibility of the information sections\n  const [infoNokkelhullet, setInfoNokkelhullet] = useState(false);\n  const [infoErnaerings, setInfoErnaerings] = useState(false);\n  const [infoHelsepåstander, setInfoHelsepåstander] = useState(false);\n\n  // Function to show an information section based on the container parameter\n  const onClickInfo = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(true);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(true);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(true);\n    }\n  };\n\n  // Function to hide an information section based on the container parameter\n  const onClickClose = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(false);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(false);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(false);\n    }\n  };\n\n  // State variables for handling input fields and validation errors\n  const [energikj, setEnergikj] = useState(false);\n  const [energikcal, setEnergikcal] = useState(false);\n\n  const [fett, setFett] = useState(false);\n  const [fettNull, setFettNull] = useState(false);\n  const [mettede, setMettede] = useState(false);\n  const [karbohydrat, setKarbohydrat] = useState(false);\n  const [hvoravSukkerarter, setHvoravSukkerarter] = useState(false);\n  const [kostfiber, setKostfiber] = useState(false);\n  const [protein, setProtein] = useState(false);\n  const [salt, setSalt] = useState(false);\n  const [saltNull, setSaltNull] = useState(false);\n\n  // State variable for storing nutrition information entered by user\n  const [nutrition, setNutrition] = useState({\n    energikj: \"\",\n    energikcal: \"\",\n    fett: \"\",\n    mettede: \"\",\n    karbohydrat: \"\",\n    hvoravSukkerarter: \"\",\n    kostfiber: \"\",\n    protein: \"\",\n    salt: \"\",\n  });\n\n  // Handler for updating nutrition state/state variable based on input field changes/input values\n  const changeHandle = (event) => {\n    console.log(\"changeHandle ===\", event.target, event.target.value);\n    setNutrition({\n      ...nutrition,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  // define function to handle form submission\n  const onClick = (e) => {\n    e.preventDefault();\n    setButtonClicked(true);\n    setShowHelsepåstander(true);\n    setShowButtons(true);\n\n    console.log(\"onclick ===\", selectsPart, nutrition);\n\n    // Check if all required fields are filled out and within valid ranges\n    // The if statement checks if all required inputs are non-empty and meet the nutritional requirements\n    if (\n      nutrition.fett !== \"\" &&\n      nutrition.fett <= 17 &&\n      nutrition.mettede !== \"\" &&\n      nutrition.karbohydrat !== \"\" &&\n      nutrition.hvoravSukkerarter !== \"\" &&\n      nutrition.kostfiber !== \"\" &&\n      nutrition.protein !== \"\" &&\n      nutrition.salt !== \"\" &&\n      nutrition.salt <= 1.6\n    ) {\n      // If all requirements are met, display the nutrition results\n      setShowNokkelhulletResults(true);\n      // Hide any empty result messages or error messages\n      setShowEmptyResult(false);\n\n      // Check if the user selected \"energikj\" and if nutrition input lable of \"energikj\" is not empty\n      if (selectsPart === \"energikj\" && nutrition.energikj !== \"\") {\n        setEnergikj(false);\n      }\n\n      // Check if the user selected \"energikcal\" and if nutrition input lable of \"energikcal\" is not empty\n      if (selectsPart === \"energikcal\" && nutrition.energikcal !== \"\") {\n        setEnergikcal(false);\n      }\n      // Reset all input validation errors\n      setFett(false);\n      setFettNull(false);\n      setMettede(false);\n      setKarbohydrat(false);\n      setHvoravSukkerarter(false);\n      setKostfiber(false);\n      setProtein(false);\n      setSalt(false);\n      setSaltNull(false);\n      // If the user has not selected any nutrients, set errors accordingly\n      // Check each nutrition value to see if it is missing or negative\n      // show input validation errors if any input is missing or negative.\n    } else {\n      if (selectsPart === \"energikj\") {\n        console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n        if (nutrition.energikj === \"\" || nutrition.energikj < 0) {\n          console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n          setEnergikj(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikj(false);\n        }\n      }\n\n      if (selectsPart === \"energikcal\") {\n        console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n        if (nutrition.energikcal === \"\" || nutrition.energikcal < 0) {\n          console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n          setEnergikcal(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikcal(false);\n        }\n      }\n\n      // repeat for each nutrition value...\n      if (nutrition.fett === \"\" || nutrition.fett < 0) {\n        setFettNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setFettNull(false);\n      }\n      if (nutrition.fett > 17) {\n        setFett(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setFett(false);\n      }\n\n      if (nutrition.mettede === \"\" || nutrition.mettede < 0) {\n        setMettede(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setMettede(false);\n      }\n\n      if (nutrition.karbohydrat === \"\" || nutrition.karbohydrat < 0) {\n        setKarbohydrat(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKarbohydrat(false);\n      }\n\n      if (\n        nutrition.hvoravSukkerarter === \"\" ||\n        nutrition.hvoravSukkerarter < 0\n      ) {\n        setHvoravSukkerarter(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setHvoravSukkerarter(false);\n      }\n\n      if (nutrition.kostfiber === \"\" || nutrition.kostfiber < 0) {\n        setKostfiber(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKostfiber(false);\n      }\n\n      if (nutrition.protein === \"\" || nutrition.protein < 0) {\n        setProtein(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setProtein(false);\n      }\n\n      if (nutrition.salt === \"\" || nutrition.salt < 0) {\n        setSaltNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setSaltNull(false);\n      }\n      if (nutrition.salt > 1.6) {\n        setSalt(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setSalt(false);\n      }\n    }\n\n    // Check for the \"LOW SUGARS\" claim\n    if (foodType === \"solid\" && parseFloat(nutrition.karbohydrat) <= 5) {\n      setLowSugars(true);\n    } else if (\n      foodType === \"liquid\" &&\n      parseFloat(nutrition.karbohydrat) <= 2.5\n    ) {\n      setLowSugars(true);\n    } else {\n      setLowSugars(false);\n    }\n\n    // Check the condition for the \"WITH NO ADDED SUGARS\" nutrition claim\n    if (nutrition.hvoravSukkerarter === \"0\" && nutrition.karbohydrat > 0) {\n      setWithNoAddedSugars(true);\n    } else {\n      setWithNoAddedSugars(false);\n    }\n  };\n\n  // create an array of energy units to select from\n  const selectUnit = [\n    {\n      value: \"energikj\",\n      label: \"(kj)\",\n    },\n    {\n      value: \"energikcal\",\n      label: \"(kcal)\",\n    },\n  ];\n\n  // Declare a state variable for the select dropdown.\n  const [selectsPart, setSelectPart] = useState(\"\");\n\n  // A function to handle changes to the select dropdown energy unit\n  const handlerPart = (event) => {\n    const inputVal = document.getElementsByName(event.value);\n    console.log(\"handlerPart ===\", event, nutrition, inputVal);\n    setSelectPart(event.value);\n  };\n\n  //create an array of food types to select from\n  const foodTypes = [\n    {\n      value: \"solid\",\n      label: \"Fast form\",\n    },\n    {\n      value: \"liquid\",\n      label: \"Flytende form\",\n    },\n  ];\n\n  return (\n    <div className=\"row\">\n      {/* This div creates a column layout for the left side of the table */}\n      <div className=\"col-md-6\">\n        {/* the selector (dropdown menu) for choosing the food type. */}\n        <div className=\"form-group\">\n          <label htmlFor=\"foodType\">Velg type matvare:</label>\n          <Select\n            className=\"form-control\"\n            id=\"foodType\"\n            options={foodTypes}\n            onChange={(e) => setFoodType(e.value)} // update the onFoodTypeChange function to directly set the food type state\n            placeholder=\"Velg type matvare\"\n          />\n        </div>\n\n        <h5>\n          Næringsinnhold per 100{\" \"}\n          {foodType === \"solid\" ? \"g\" : foodType === \"liquid\" ? \"ml\" : \"g/ml\"}\n        </h5>\n\n        {/* This div adds a light background color to the table */}\n        <div className=\"bg-light\">\n          {/* This table shows the nutritional information */}\n          <table className=\"table table-striped\">\n            {/* The table header */}\n            <thead>\n              <tr>\n                <th scope=\"col\" className=\"table-font\">\n                  Energi eller næringsstoff\n                </th>\n                <th scope=\"col\" className=\"table-font\">\n                  Mengde\n                </th>\n              </tr>\n            </thead>\n\n            {/* The table body */}\n            <tbody>\n              {/* This row shows the energy content */}\n              <tr className={(energikj, energikcal ? \"alert-box\" : null)}>\n                <th scope=\"row\" className=\"table-font\">\n                  {/* An icon with a tooltip to indicate missing values in energy parameters */}\n                  {energikj && energikcal ? (\n                    <Tooltip\n                      title=\"Mangler verdi i energi (kJ/Kcal) parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  {/* This div displays the energy label and unit */}\n                  <div className=\"row\">\n                    <div className=\"col-md-3\">\n                      <label for=\"energiunit\" class=\"form-label\">\n                        Energi\n                      </label>\n                    </div>\n                    {/* A dropdown menu for selecting the energy unit */}\n                    <div className=\"col-md-6\">\n                      <Select\n                        placeholder={<div>Velg enhet</div>}\n                        className=\"form-select-md mb-3\"\n                        options={selectUnit}\n                        onChange={(e) => handlerPart(e)}\n                      />\n                    </div>\n                  </div>\n                </th>\n                {/* An input field for entering the energy value */}\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name={selectsPart}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* Additional rows for other nutrient selections */}\n              {/* This row shows the fat content */}\n              <tr\n                className={\n                  fett ? \"alert-box\" : null || fettNull ? \"alert-box\" : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {fett ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden fett. Mengden på fett må være lavere enn eller lik 17 / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {fettNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i fett parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Fett (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"fett\"\n                    value={nutrition.fett}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the saturated fat content */}\n              <tr className={mettede ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {mettede ? (\n                    <Tooltip\n                      title=\"Mangler verdi i mettede fettsyrer parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Mettede fettsyrer (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"mettede\"\n                    value={nutrition.mettede}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the carbohydrate content */}\n              <tr className={karbohydrat ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {karbohydrat ? (\n                    <Tooltip\n                      title=\"Mangler verdi i karbohydrat parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Karbohydrat (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"karbohydrat\"\n                    value={nutrition.karbohydrat}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows hvorav sukkerarter content */}\n              <tr className={hvoravSukkerarter ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {hvoravSukkerarter ? (\n                    <Tooltip\n                      title=\"Mangler verdi i hvorav sukkerarter parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Hvorav tilsatte sukkerarter (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"hvoravSukkerarter\"\n                    value={nutrition.hvoravSukkerarter}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows kostfiber content */}\n              <tr className={kostfiber ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {kostfiber ? (\n                    <Tooltip\n                      title=\"Mangler verdi i kostfiber parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Kostfiber (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"kostfiber\"\n                    value={nutrition.kostfiber}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the protein content */}\n              <tr className={protein ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {protein ? (\n                    <Tooltip\n                      title=\"Mangler verdi i protein parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Protein (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"protein\"\n                    value={nutrition.protein}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows salt content */}\n              <tr\n                className={\n                  salt ? \"alert-box\" : null || saltNull ? \"alert-box\" : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {salt ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden salt. Mengden på salt må være lavere enn eller lik 1.6 / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {saltNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i salt parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Salt (g)\n                </th>\n                <td colSpan=\"2\">\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"salt\"\n                    value={nutrition.salt}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n\n        {/* Button that submits the form and calls the onClick function */}\n        <div className=\"col-12 button-div\">\n          <button\n            type=\"submit\"\n            className=\"btn btn-primary btn-lg button-search\"\n            onClick={onClick}\n          >\n            Beregn\n          </button>\n        </div>\n      </div>\n\n      <div className=\"col-md-6\">\n        {/* positive results nøkkelhullet container\" */}\n        {showNokkelhulletResults ? (\n          <div className=\"container nøkkelhullet-food-result-container\">\n            {/* An image with class \"keyhole-logo\" and alt text \"keyhole logo\" */}\n            <img\n              src={keyholeLgog}\n              className=\"keyhole-logo img-fluid\"\n              alt=\"keyhole logo\"\n            />\n            {/* A heading with text \"Nøkkelhullet\" */}\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir Nøkkelhullet. </p>\n              </div>\n              <div className=\"col-md-2\">\n                {/* FontAwesome icon with event listener to show the \"Nøkkelhullet\" information section */}\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  {/* A paragraph with a link to Lovdata's \"Forskrift om frivillig merking a nœringsmidler med Nokkellhullet\" */}\n                  <p>\n                    Les mer om hvilke krav det stilles for merking av\n                    Nokkellhullet på Lovdatas \"Forskrift om frivillig merking a\n                    nœringsmidler med Nokkellhullet\":\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  {/* FontAwesome icon with event listener to hide the \"Nøkkelhullet\" information section */}\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        ) : null}\n        {/*Negative results nøkkelhullet container\" */}\n        {showNokkelhulletResults === false && (\n          <div className=\"container nøkkelhullet-food-negResult-container\">\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir ikke Nøkkelhullet.</p>\n                {showEmptyResult ? (\n                  <p>** Obligatoriske næringsverdier kan ikke være tomme.</p>\n                ) : null}\n\n                {fett ? (\n                  <p>** Fett verdien kan være høyst 17 g/100 g.</p>\n                ) : null}\n                {salt ? (\n                  <p>** Salt verdien kan være høyst 1.6 g/100 g.</p>\n                ) : null}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om frivillig merking av næringsmidler med Nøkkelhullet:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for ernæringspåstander if there are all true results */}\n        {buttonClicked && (\n          <div\n            className={\n              lowSugars && withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-all\"\n                : !lowSugars && !withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-none\"\n                : \"container ernæringspåstander-food-result-container-some\"\n            }\n          >\n            <h5>Ernæringspåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                {/* Low sugars */}\n                {lowSugars ? (\n                  <div>\n                    <p>** Lavt sukkerinnhold:</p>\n                    <p>\n                      Dette produktet inneholder høyst 5 g sukkerarter per 100 g\n                      for næringsmidler i fast form, eller høyst 2,5 g\n                      sukkerarter per 100 ml for næringsmidler i flytende form\n                      og oppfyller kravet for \"Lavt sukkerinnhold\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Lavt sukkerinnhold\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        For faste næringsmidler, sukkerinnholdet må være høyst 5\n                        g per 100 g.\n                      </li>\n                      <li>\n                        For flytende næringsmidler, sukkerinnholdet må være\n                        høyst 2,5 g per 100 ml.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n\n                {/* No added sugars */}\n                {withNoAddedSugars ? (\n                  <div>\n                    <p>** Uten tilsatt sukker:</p>\n                    <p>\n                      Dette produktet er ikke tilsatt monosakkarider,\n                      disakkarider eller andre næringsmidler på grunn av deres\n                      søtende egenskaper og oppfyller kravet for \"Uten tilsatt\n                      sukker\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Uten tilsatt sukker\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        Produktet må ikke være tilsatt monosakkarider,\n                        disakkarider eller andre næringsmidler på grunn av deres\n                        søtende egenskaper.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"ernaerings\")}\n                />\n              </div>\n            </div>\n            {infoErnaerings ? (\n              // Information section for \"Ernæringspåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"ernaerings\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for Helsepåstander results  */}\n        {showHelsepåstander && (\n          <div\n            className=\"container helsepåstander-food-result-container\"\n            style={{ background: \"#f2f0b5\" }}\n          >\n            <h5>Helsepåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Under utvikling. </p>\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"helsepåstander\")}\n                />\n              </div>\n            </div>\n            {infoHelsepåstander ? (\n              // Information section for \"Helsepåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"helsepåstander\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"15px\" }}></div>\n        {/* conditional rendering for the buttons using showButtons state */}\n        {showButtons && (\n          <div className=\"d-flex justify-content-between\">\n            {/* Save button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-save\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Lagre produkt\n            </button>\n\n            {/* Share button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-share\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Del produkt\n            </button>\n\n            {/* Add a new product button */}\n            <button\n              className=\"btn btn-primary\"\n              onClick={() => window.location.reload()}\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-plus\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Legg til et nytt produkt\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Kategori16;\n","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Kategori19.js",["432","433","434","435"],[],"import React from \"react\";\nimport { useState, useEffect } from \"react\"; // import the useState and useeffect hook.\nimport { faCircleExclamation } from \"@fortawesome/free-solid-svg-icons\"; // import an icon.\nimport { faBan } from \"@fortawesome/free-solid-svg-icons\";\nimport { faSave, faShare, faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"; // import FontAwesomeIcon component.\nimport Tooltip from \"@mui/material/Tooltip\"; // import Tooltip component.\nimport keyholeLgog from \"./circle-keyhole-logo.png\"; // import an image\nimport { faCircleInfo } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport { faXmarkCircle } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport Select from \"react-select\"; // import Select component\n\nconst Kategori19 = () => {\n  // State variables for showing results and empty result message\n  const [showNokkelhulletResults, setShowNokkelhulletResults] = useState(null);\n  const [showErnaeringsResults, setShowErnaeringsResults] = useState(null);\n  const [showHelsepåstander, setShowHelsepåstander] = useState(null);\n  const [showEmptyResult, setShowEmptyResult] = useState(\"\"); // initialize state variable for showing empty result message.\n\n  //state variable to store the user's food type selection (solid or liquid) and the low sugars claim result\n  const [foodType, setFoodType] = useState(\"\");\n  const [lowSugars, setLowSugars] = useState(null);\n\n  //state variable to track whether the product meets the WITH NO ADDED SUGARS claim or not\n  const [withNoAddedSugars, setWithNoAddedSugars] = useState(false);\n\n  // State variable for tracking if the button is clicked\n  const [buttonClicked, setButtonClicked] = useState(false);\n\n  // useEffect hook for checking the condition for the \"WITH NO ADDED SUGARS\" claim when button is clicked\n  useEffect(() => {\n    if (buttonClicked) {\n      if (withNoAddedSugars) {\n        setShowErnaeringsResults(true);\n      } else {\n        setShowErnaeringsResults(false);\n      }\n    }\n  }, [withNoAddedSugars, buttonClicked]);\n\n  //state for controlling the buttons' visibility\n  const [showButtons, setShowButtons] = useState(false);\n\n  // State variables to control the visibility of the information sections\n  const [infoNokkelhullet, setInfoNokkelhullet] = useState(false);\n  const [infoErnaerings, setInfoErnaerings] = useState(false);\n  const [infoHelsepåstander, setInfoHelsepåstander] = useState(false);\n\n  // Function to show an information section based on the container parameter\n  const onClickInfo = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(true);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(true);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(true);\n    }\n  };\n\n  // Function to hide an information section based on the container parameter\n  const onClickClose = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(false);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(false);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(false);\n    }\n  };\n\n  // State variables for handling input fields and validation errors\n  const [energikj, setEnergikj] = useState(false);\n  const [energikcal, setEnergikcal] = useState(false);\n\n  const [fett, setFett] = useState(false);\n  const [fettNull, setFettNull] = useState(false);\n  const [mettede, setMettede] = useState(false);\n  const [mettedeNull, setMettedeNull] = useState(false);\n  const [karbohydrat, setKarbohydrat] = useState(false);\n  const [hvoravSukkerarter, setHvoravSukkerarter] = useState(false);\n  const [kostfiber, setKostfiber] = useState(false);\n  const [protein, setProtein] = useState(false);\n  const [salt, setSalt] = useState(false);\n  const [saltNull, setSaltNull] = useState(false);\n\n  // State variable for storing nutrition information entered by user\n  const [nutrition, setNutrition] = useState({\n    energikj: \"\",\n    energikcal: \"\",\n    fett: \"\",\n    mettede: \"\",\n    karbohydrat: \"\",\n    hvoravSukkerarter: \"\",\n    kostfiber: \"\",\n    protein: \"\",\n    salt: \"\",\n  });\n\n  // Handler for updating nutrition state/state variable based on input field changes/input values\n  const changeHandle = (event) => {\n    console.log(\"changeHandle ===\", event.target, event.target.value);\n    setNutrition({\n      ...nutrition,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  // define function to handle form submission\n  const onClick = (e) => {\n    e.preventDefault();\n    setButtonClicked(true);\n    setShowHelsepåstander(true);\n    setShowButtons(true);\n\n    console.log(\"onclick ===\", selectsPart, nutrition);\n\n    // Check if all required fields are filled out and within valid ranges\n    // The if statement checks if all required inputs are non-empty and meet the nutritional requirements\n    if (\n      nutrition.fett !== \"\" &&\n      nutrition.fett <= 80 &&\n      nutrition.mettede !== \"\" &&\n      nutrition.mettede <= 26.4 &&\n      nutrition.karbohydrat !== \"\" &&\n      nutrition.hvoravSukkerarter !== \"\" &&\n      nutrition.kostfiber !== \"\" &&\n      nutrition.protein !== \"\" &&\n      nutrition.salt !== \"\" &&\n      nutrition.salt <= 1.1\n    ) {\n      // If all requirements are met, display the nutrition results\n      setShowNokkelhulletResults(true);\n      // Hide any empty result messages or error messages\n      setShowEmptyResult(false);\n\n      // Check if the user selected \"energikj\" and if nutrition input lable of \"energikj\" is not empty\n      if (selectsPart === \"energikj\" && nutrition.energikj !== \"\") {\n        setEnergikj(false);\n      }\n\n      // Check if the user selected \"energikcal\" and if nutrition input lable of \"energikcal\" is not empty\n      if (selectsPart === \"energikcal\" && nutrition.energikcal !== \"\") {\n        setEnergikcal(false);\n      }\n      // Reset all input validation errors\n      setFett(false);\n      setFettNull(false);\n      setMettede(false);\n      setMettedeNull(false);\n      setKarbohydrat(false);\n      setHvoravSukkerarter(false);\n      setKostfiber(false);\n      setProtein(false);\n      setSalt(false);\n      setSaltNull(false);\n      // If the user has not selected any nutrients, set errors accordingly\n      // Check each nutrition value to see if it is missing or negative\n      // show input validation errors if any input is missing or negative.\n    } else {\n      if (selectsPart === \"energikj\") {\n        console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n        if (nutrition.energikj === \"\" || nutrition.energikj < 0) {\n          console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n          setEnergikj(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikj(false);\n        }\n      }\n\n      if (selectsPart === \"energikcal\") {\n        console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n        if (nutrition.energikcal === \"\" || nutrition.energikcal < 0) {\n          console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n          setEnergikcal(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikcal(false);\n        }\n      }\n\n      // repeat for each nutrition value...\n      if (nutrition.fett === \"\" || nutrition.fett < 0) {\n        setFettNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setFettNull(false);\n      }\n      if (nutrition.fett > 80) {\n        setFett(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setFett(false);\n      }\n\n      if (nutrition.mettede === \"\" || nutrition.mettede < 0) {\n        setMettedeNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setMettedeNull(false);\n      }\n      if (nutrition.mettede > 26.4) {\n        setMettede(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setMettede(false);\n      }\n\n      if (nutrition.karbohydrat === \"\" || nutrition.karbohydrat < 0) {\n        setKarbohydrat(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKarbohydrat(false);\n      }\n\n      if (\n        nutrition.hvoravSukkerarter === \"\" ||\n        nutrition.hvoravSukkerarter < 0\n      ) {\n        setHvoravSukkerarter(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setHvoravSukkerarter(false);\n      }\n\n      if (nutrition.kostfiber === \"\" || nutrition.kostfiber < 0) {\n        setKostfiber(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKostfiber(false);\n      }\n\n      if (nutrition.protein === \"\" || nutrition.protein < 0) {\n        setProtein(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setProtein(false);\n      }\n\n      if (nutrition.salt === \"\" || nutrition.salt < 0) {\n        setSaltNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setSaltNull(false);\n      }\n      if (nutrition.salt > 1.1) {\n        setSalt(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setSalt(false);\n      }\n    }\n\n    // Check for the \"LOW SUGARS\" claim\n    if (foodType === \"solid\" && parseFloat(nutrition.karbohydrat) <= 5) {\n      setLowSugars(true);\n    } else if (\n      foodType === \"liquid\" &&\n      parseFloat(nutrition.karbohydrat) <= 2.5\n    ) {\n      setLowSugars(true);\n    } else {\n      setLowSugars(false);\n    }\n\n    // Check the condition for the \"WITH NO ADDED SUGARS\" nutrition claim\n    if (nutrition.hvoravSukkerarter === \"0\" && nutrition.karbohydrat > 0) {\n      setWithNoAddedSugars(true);\n    } else {\n      setWithNoAddedSugars(false);\n    }\n  };\n\n  // create an array of energy units to select from\n  const selectUnit = [\n    {\n      value: \"energikj\",\n      label: \"(kj)\",\n    },\n    {\n      value: \"energikcal\",\n      label: \"(kcal)\",\n    },\n  ];\n\n  // Declare a state variable for the select dropdown.\n  const [selectsPart, setSelectPart] = useState(\"\");\n\n  // A function to handle changes to the select dropdown energy unit\n  const handlerPart = (event) => {\n    const inputVal = document.getElementsByName(event.value);\n    console.log(\"handlerPart ===\", event, nutrition, inputVal);\n    setSelectPart(event.value);\n  };\n\n  //create an array of food types to select from\n  const foodTypes = [\n    {\n      value: \"solid\",\n      label: \"Fast form\",\n    },\n    {\n      value: \"liquid\",\n      label: \"Flytende form\",\n    },\n  ];\n\n  return (\n    <div className=\"row\">\n      {/* This div creates a column layout for the left side of the table */}\n      <div className=\"col-md-6\">\n        {/* the selector (dropdown menu) for choosing the food type. */}\n        <div className=\"form-group\">\n          <label htmlFor=\"foodType\">Velg type matvare:</label>\n          <Select\n            className=\"form-control\"\n            id=\"foodType\"\n            options={foodTypes}\n            onChange={(e) => setFoodType(e.value)} // update the onFoodTypeChange function to directly set the food type state\n            placeholder=\"Velg type matvare\"\n          />\n        </div>\n        <h5>\n          Næringsinnhold per 100{\" \"}\n          {foodType === \"solid\" ? \"g\" : foodType === \"liquid\" ? \"ml\" : \"g/ml\"}\n        </h5>\n\n        {/* This div adds a light background color to the table */}\n        <div className=\"bg-light\">\n          {/* This table shows the nutritional information */}\n          <table className=\"table table-striped\">\n            {/* The table header */}\n            <thead>\n              <tr>\n                <th scope=\"col\" className=\"table-font\">\n                  Energi eller næringsstoff\n                </th>\n                <th scope=\"col\" className=\"table-font\">\n                  Mengde\n                </th>\n              </tr>\n            </thead>\n\n            {/* The table body */}\n            <tbody>\n              {/* This row shows the energy content */}\n              <tr className={(energikj, energikcal ? \"alert-box\" : null)}>\n                <th scope=\"row\" className=\"table-font\">\n                  {/* An icon with a tooltip to indicate missing values in energy parameters */}\n                  {energikj && energikcal ? (\n                    <Tooltip\n                      title=\"Mangler verdi i energi (kJ/Kcal) parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  {/* This div displays the energy label and unit */}\n                  <div className=\"row\">\n                    <div className=\"col-md-3\">\n                      <label for=\"energiunit\" class=\"form-label\">\n                        Energi\n                      </label>\n                    </div>\n                    {/* A dropdown menu for selecting the energy unit */}\n                    <div className=\"col-md-6\">\n                      <Select\n                        placeholder={<div>Velg enhet</div>}\n                        className=\"form-select-md mb-3\"\n                        options={selectUnit}\n                        onChange={(e) => handlerPart(e)}\n                      />\n                    </div>\n                  </div>\n                </th>\n                {/* An input field for entering the energy value */}\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name={selectsPart}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* Additional rows for other nutrient selections */}\n              {/* This row shows the fat content */}\n              <tr\n                className={\n                  fett ? \"alert-box\" : null || fettNull ? \"alert-box\" : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {fett ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden fett. Mengden på fett må være lavere enn eller lik 80 / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {fettNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i fett parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Fett (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"fett\"\n                    value={nutrition.fett}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the saturated fat content */}\n              <tr\n                className={\n                  mettede\n                    ? \"alert-box\"\n                    : null || mettedeNull\n                    ? \"alert-box\"\n                    : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {mettede ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden mettede fettsyrer. Mengden på mettede fettsyrer må være lavere enn eller lik 26.4 / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {mettedeNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i mettede fettsyrer parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Mettede fettsyrer (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"mettede\"\n                    value={nutrition.mettede}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the carbohydrate content */}\n              <tr className={karbohydrat ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {karbohydrat ? (\n                    <Tooltip\n                      title=\"Mangler verdi i karbohydrat parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Karbohydrat (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"karbohydrat\"\n                    value={nutrition.karbohydrat}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows hvorav sukkerarter content */}\n              <tr className={hvoravSukkerarter ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {hvoravSukkerarter ? (\n                    <Tooltip\n                      title=\"Mangler verdi i hvorav sukkerarter parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Hvorav tilsatte sukkerarter (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"hvoravSukkerarter\"\n                    value={nutrition.hvoravSukkerarter}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows kostfiber content */}\n              <tr className={kostfiber ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {kostfiber ? (\n                    <Tooltip\n                      title=\"Mangler verdi i kostfiber parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Kostfiber (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"kostfiber\"\n                    value={nutrition.kostfiber}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the protein content */}\n              <tr className={protein ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {protein ? (\n                    <Tooltip\n                      title=\"Mangler verdi i protein parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Protein (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"protein\"\n                    value={nutrition.protein}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows salt content */}\n              <tr\n                className={\n                  salt ? \"alert-box\" : null || saltNull ? \"alert-box\" : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {salt ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden salt. Mengden på salt må være lavere enn eller lik 1.1 / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {saltNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i salt parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Salt (g)\n                </th>\n                <td colSpan=\"2\">\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"salt\"\n                    value={nutrition.salt}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n        {/* Button that submits the form and calls the onClick function */}\n        <div className=\"col-12 button-div\">\n          <button\n            type=\"submit\"\n            className=\"btn btn-primary btn-lg button-search\"\n            onClick={onClick}\n          >\n            Beregn\n          </button>\n        </div>\n      </div>\n\n      <div className=\"col-md-6\">\n        {/* positive results nøkkelhullet container\" */}\n        {showNokkelhulletResults ? (\n          <div className=\"container nøkkelhullet-food-result-container\">\n            {/* An image with class \"keyhole-logo\" and alt text \"keyhole logo\" */}\n            <img\n              src={keyholeLgog}\n              className=\"keyhole-logo img-fluid\"\n              alt=\"keyhole logo\"\n            />\n            {/* A heading with text \"Nøkkelhullet\" */}\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir Nøkkelhullet. </p>\n              </div>\n              <div className=\"col-md-2\">\n                {/* FontAwesome icon with event listener to show the \"Nøkkelhullet\" information section */}\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  {/* A paragraph with a link to Lovdata's \"Forskrift om frivillig merking a nœringsmidler med Nokkellhullet\" */}\n                  <p>\n                    Les mer om hvilke krav det stilles for merking av\n                    Nokkellhullet på Lovdatas \"Forskrift om frivillig merking a\n                    nœringsmidler med Nokkellhullet\":\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  {/* FontAwesome icon with event listener to hide the \"Nøkkelhullet\" information section */}\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        ) : null}\n        {/*Negative results nøkkelhullet container\" */}\n        {showNokkelhulletResults === false && (\n          <div className=\"container nøkkelhullet-food-negResult-container\">\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir ikke Nøkkelhullet.</p>\n                {showEmptyResult ? (\n                  <p>** Obligatoriske næringsverdier kan ikke være tomme.</p>\n                ) : null}\n\n                {mettede ? (\n                  <p>\n                    ** Mettede fettsyrer verdien kan være høyst 33 % av\n                    fettinnholdet /100 g.\n                  </p>\n                ) : null}\n\n                {fett ? (\n                  <p>** Fett verdien kan være høyst 80 g/100 g.</p>\n                ) : null}\n                {salt ? (\n                  <p>** Salt verdien kan være høyst 1.1 g/100 g.</p>\n                ) : null}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om frivillig merking av næringsmidler med Nøkkelhullet:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for ernæringspåstander if there are all true results */}\n        {buttonClicked && (\n          <div\n            className={\n              lowSugars && withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-all\"\n                : !lowSugars && !withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-none\"\n                : \"container ernæringspåstander-food-result-container-some\"\n            }\n          >\n            <h5>Ernæringspåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                {/* Low sugars */}\n                {lowSugars ? (\n                  <div>\n                    <p>** Lavt sukkerinnhold:</p>\n                    <p>\n                      Dette produktet inneholder høyst 5 g sukkerarter per 100 g\n                      for næringsmidler i fast form, eller høyst 2,5 g\n                      sukkerarter per 100 ml for næringsmidler i flytende form\n                      og oppfyller kravet for \"Lavt sukkerinnhold\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Lavt sukkerinnhold\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        For faste næringsmidler, sukkerinnholdet må være høyst 5\n                        g per 100 g.\n                      </li>\n                      <li>\n                        For flytende næringsmidler, sukkerinnholdet må være\n                        høyst 2,5 g per 100 ml.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n\n                {/* No added sugars */}\n                {withNoAddedSugars ? (\n                  <div>\n                    <p>** Uten tilsatt sukker:</p>\n                    <p>\n                      Dette produktet er ikke tilsatt monosakkarider,\n                      disakkarider eller andre næringsmidler på grunn av deres\n                      søtende egenskaper og oppfyller kravet for \"Uten tilsatt\n                      sukker\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Uten tilsatt sukker\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        Produktet må ikke være tilsatt monosakkarider,\n                        disakkarider eller andre næringsmidler på grunn av deres\n                        søtende egenskaper.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"ernaerings\")}\n                />\n              </div>\n            </div>\n            {infoErnaerings ? (\n              // Information section for \"Ernæringspåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"ernaerings\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for Helsepåstander results  */}\n        {showHelsepåstander && (\n          <div\n            className=\"container helsepåstander-food-result-container\"\n            style={{ background: \"#f2f0b5\" }}\n          >\n            <h5>Helsepåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Under utvikling. </p>\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"helsepåstander\")}\n                />\n              </div>\n            </div>\n            {infoHelsepåstander ? (\n              // Information section for \"Helsepåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"helsepåstander\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"15px\" }}></div>\n        {/* conditional rendering for the buttons using showButtons state */}\n        {showButtons && (\n          <div className=\"d-flex justify-content-between\">\n            {/* Save button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-save\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Lagre produkt\n            </button>\n\n            {/* Share button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-share\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Del produkt\n            </button>\n\n            {/* Add a new product button */}\n            <button\n              className=\"btn btn-primary\"\n              onClick={() => window.location.reload()}\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-plus\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Legg til et nytt produkt\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Kategori19;\n","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Kategori21.js",["436","437","438","439","440","441","442"],[],"import React from \"react\";\nimport { useState, useEffect } from \"react\"; // import the useState and useeffect hook.\nimport { faCircleExclamation } from \"@fortawesome/free-solid-svg-icons\"; // import an icon.\nimport { faBan } from \"@fortawesome/free-solid-svg-icons\";\nimport { faSave, faShare, faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"; // import FontAwesomeIcon component.\nimport Tooltip from \"@mui/material/Tooltip\"; // import Tooltip component.\nimport keyholeLgog from \"./circle-keyhole-logo.png\"; // import an image\nimport { faCircleInfo } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport { faXmarkCircle } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport Select from \"react-select\"; // import Select component\n\n// This component is called Kategori1\nconst Kategori21 = () => {\n  // State variables for showing results and empty result message\n\n  const [showNokkelhulletResults, setShowNokkelhulletResults] = useState(null);\n  const [showErnaeringsResults, setShowErnaeringsResults] = useState(null);\n  const [showHelsepåstander, setShowHelsepåstander] = useState(null);\n  const [showEmptyResult, setShowEmptyResult] = useState(\"\"); // initialize state variable for showing empty result message.\n\n  //state variable to store the user's food type selection (solid or liquid) and the low sugars claim result\n  const [foodType, setFoodType] = useState(\"\");\n  const [lowSugars, setLowSugars] = useState(null);\n\n  //state variable to track whether the product meets the WITH NO ADDED SUGARS claim or not\n  const [withNoAddedSugars, setWithNoAddedSugars] = useState(false);\n\n  // State variable for tracking if the button is clicked\n  const [buttonClicked, setButtonClicked] = useState(false);\n\n  // useEffect hook for checking the condition for the \"WITH NO ADDED SUGARS\" claim when button is clicked\n  useEffect(() => {\n    if (buttonClicked) {\n      if (withNoAddedSugars) {\n        setShowErnaeringsResults(true);\n      } else {\n        setShowErnaeringsResults(false);\n      }\n    }\n  }, [withNoAddedSugars, buttonClicked]);\n\n  //state for controlling the buttons' visibility\n  const [showButtons, setShowButtons] = useState(false);\n\n  // State variables to control the visibility of the information sections\n  const [infoNokkelhullet, setInfoNokkelhullet] = useState(false);\n  const [infoErnaerings, setInfoErnaerings] = useState(false);\n  const [infoHelsepåstander, setInfoHelsepåstander] = useState(false);\n\n  // Function to show an information section based on the container parameter\n  const onClickInfo = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(true);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(true);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(true);\n    }\n  };\n\n  // Function to hide an information section based on the container parameter\n  const onClickClose = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(false);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(false);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(false);\n    }\n  };\n\n  // initialize State variables for handling input fields and validation errors\n  const [energikj, setEnergikj] = useState(false);\n  const [energikcal, setEnergikcal] = useState(false);\n\n  const [fett, setFett] = useState(false);\n\n  const [mettede, setMettede] = useState(false);\n\n  const [karbohydrat, setKarbohydrat] = useState(false);\n\n  const [hvoravSukkerarter, setHvoravSukkerarter] = useState(false);\n\n  const [kostfiber, setKostfiber] = useState(false);\n  const [protein, setProtein] = useState(false);\n  const [salt, setSalt] = useState(false);\n  const [saltNull, setSaltNull] = useState(false);\n\n  // initialize State variable for storing nutrition information entered by user/input values\n  const [nutrition, setNutrition] = useState({\n    energikj: \"\",\n    energikcal: \"\",\n    fett: \"\",\n    mettede: \"\",\n    karbohydrat: \"\",\n    hvoravSukkerarter: \"\",\n    kostfiber: \"\",\n    protein: \"\",\n    salt: \"\",\n  });\n\n  // Handler for updating nutrition state/state variable based on input field changes/input values\n  const changeHandle = (event) => {\n    console.log(\"changeHandle ===\", event.target, event.target.value);\n    setNutrition({\n      ...nutrition,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  // define function to handle form submission\n  const onClick = (e) => {\n    e.preventDefault();\n    setButtonClicked(true);\n    setShowHelsepåstander(true);\n    setShowButtons(true);\n\n    console.log(\"onclick ===\", selectsPart, nutrition);\n\n    // Check if all required fields are filled out and within valid ranges\n    // The if statement checks if all required inputs are non-empty and meet the nutritional requirements\n    if (\n      nutrition.fett !== \"\" &&\n      nutrition.mettede !== \"\" &&\n      nutrition.karbohydrat !== \"\" &&\n      nutrition.hvoravSukkerarter !== \"\" &&\n      nutrition.kostfiber !== \"\" &&\n      nutrition.protein !== \"\" &&\n      nutrition.salt !== \"\"\n    ) {\n      // If all requirements are met, display the nutrition results\n      setShowNokkelhulletResults(true);\n      // Hide any empty result messages or error messages\n      setShowEmptyResult(false);\n\n      // Check if the user selected \"energikj\" and if nutrition input lable of \"energikj\" is not empty\n      if (selectsPart === \"energikj\" && nutrition.energikj !== \"\") {\n        setEnergikj(false);\n      }\n\n      // Check if the user selected \"energikcal\" and if nutrition input lable of \"energikcal\" is not empty\n      if (selectsPart === \"energikcal\" && nutrition.energikcal !== \"\") {\n        setEnergikcal(false);\n      }\n      // Reset all input validation errors\n\n      setFett(false);\n\n      setMettede(false);\n\n      setKarbohydrat(false);\n\n      setHvoravSukkerarter(false);\n\n      setKostfiber(false);\n      setProtein(false);\n      setSalt(false);\n\n      // If any inputs are missing or do not meet the requirements, show appropriate error messages\n    } else {\n      if (selectsPart === \"energikj\") {\n        console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n        if (nutrition.energikj === \"\" || nutrition.energikj < 0) {\n          console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n          setEnergikj(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikj(false);\n        }\n      }\n\n      if (selectsPart === \"energikcal\") {\n        console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n        if (nutrition.energikcal === \"\" || nutrition.energikcal < 0) {\n          console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n          setEnergikcal(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikcal(false);\n        }\n      }\n\n      // repeat for each nutrition value...\n      if (nutrition.fett === \"\" || nutrition.fett < 0) {\n        setFett(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setFett(false);\n      }\n\n      if (nutrition.mettede === \"\" || nutrition.mettede < 0) {\n        setMettede(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setMettede(false);\n      }\n\n      // Check if the 'karbohydrat' input is missing or negative, and display an error message if necessary\n      if (nutrition.karbohydrat === \"\" || nutrition.karbohydrat < 0) {\n        setKarbohydrat(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKarbohydrat(false);\n      }\n\n      if (\n        nutrition.hvoravSukkerarter === \"\" ||\n        nutrition.hvoravSukkerarter < 0\n      ) {\n        setHvoravSukkerarter(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setHvoravSukkerarter(false);\n      }\n\n      if (nutrition.kostfiber === \"\" || nutrition.kostfiber < 0) {\n        setKostfiber(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKostfiber(false);\n      }\n\n      if (nutrition.protein === \"\" || nutrition.protein < 0) {\n        setProtein(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setProtein(false);\n      }\n\n      if (nutrition.salt === \"\" || nutrition.salt < 0) {\n        setSalt(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setSalt(false);\n      }\n    }\n\n    // Check for the \"LOW SUGARS\" claim\n    if (foodType === \"solid\" && parseFloat(nutrition.karbohydrat) <= 5) {\n      setLowSugars(true);\n    } else if (\n      foodType === \"liquid\" &&\n      parseFloat(nutrition.karbohydrat) <= 2.5\n    ) {\n      setLowSugars(true);\n    } else {\n      setLowSugars(false);\n    }\n\n    // Check the condition for the \"WITH NO ADDED SUGARS\" nutrition claim\n    if (nutrition.hvoravSukkerarter === \"0\" && nutrition.karbohydrat > 0) {\n      setWithNoAddedSugars(true);\n    } else {\n      setWithNoAddedSugars(false);\n    }\n  };\n\n  // create an array of energy units to select from\n  const selectUnit = [\n    {\n      value: \"energikj\",\n      label: \"(kj)\",\n    },\n    {\n      value: \"energikcal\",\n      label: \"(kcal)\",\n    },\n  ];\n\n  // Declare a state variable for the select dropdown.\n  const [selectsPart, setSelectPart] = useState(\"\");\n\n  // A function to handle changes to the select dropdown energy unit\n  const handlerPart = (event) => {\n    const inputVal = document.getElementsByName(event.value);\n    console.log(\"handlerPart ===\", event, nutrition, inputVal);\n    setSelectPart(event.value);\n  };\n\n  //create an array of food types to select from\n  const foodTypes = [\n    {\n      value: \"solid\",\n      label: \"Fast form\",\n    },\n    {\n      value: \"liquid\",\n      label: \"Flytende form\",\n    },\n  ];\n\n  return (\n    <div className=\"row\">\n      {/* This div creates a column layout for the left side of the table */}\n      <div className=\"col-md-6\">\n        {/* the selector (dropdown menu) for choosing the food type. */}\n        <div className=\"form-group\">\n          <label htmlFor=\"foodType\">Velg type matvare:</label>\n          <Select\n            className=\"form-control\"\n            id=\"foodType\"\n            options={foodTypes}\n            onChange={(e) => setFoodType(e.value)} // update the onFoodTypeChange function to directly set the food type state\n            placeholder=\"Velg type matvare\"\n          />\n        </div>\n\n        <h5>\n          Næringsinnhold per 100{\" \"}\n          {foodType === \"solid\" ? \"g\" : foodType === \"liquid\" ? \"ml\" : \"g/ml\"}\n        </h5>\n\n        {/* This div adds a light background color to the table */}\n        <div className=\"bg-light\">\n          {/* This table shows the nutritional information */}\n          <table className=\"table table-striped\">\n            {/* The table header */}\n            <thead>\n              <tr>\n                <th scope=\"col\" className=\"table-font\">\n                  Energi eller næringsstoff\n                </th>\n                <th scope=\"col\" className=\"table-font\">\n                  Mengde\n                </th>\n              </tr>\n            </thead>\n\n            {/* The table body */}\n            <tbody>\n              {/* This row shows the energy content */}\n              <tr className={(energikj, energikcal ? \"alert-box\" : null)}>\n                <th scope=\"row\" className=\"table-font\">\n                  {/* If either the energy (kJ) or energy (kcal) value is missing, an exclamation icon is displayed */}\n                  {energikj && energikcal ? (\n                    <Tooltip\n                      title=\"Mangler verdi i energi (kJ/Kcal) parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  {/* This div displays the energy label and unit */}\n                  <div className=\"row\">\n                    <div className=\"col-md-3\">\n                      <label for=\"energiunit\" class=\"form-label\">\n                        Energi\n                      </label>\n                    </div>\n                    {/* This dropdown allows the user to select the unit for energy */}\n                    <div className=\"col-md-6\">\n                      <Select\n                        placeholder={<div>Velg enhet</div>}\n                        className=\"form-select-md mb-3\"\n                        options={selectUnit}\n                        onChange={(e) => handlerPart(e)}\n                      />\n                    </div>\n                  </div>\n                </th>\n                {/* This column allows the user to input the energy value in input field*/}\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name={selectsPart}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* Additional rows for other nutrient selections */}\n              {/* This row shows the fat content */}\n              <tr className={fett ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {fett ? (\n                    <Tooltip\n                      title=\"Mangler verdi i fett parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Fett (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"fett\"\n                    value={nutrition.fett}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the saturated fat content */}\n              <tr className={mettede ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {mettede ? (\n                    <Tooltip\n                      title=\"Mangler verdi i mettede fettsyrer parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Mettede fettsyrer (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"mettede\"\n                    value={nutrition.mettede}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the carbohydrate (total sugars)content */}\n              <tr className={karbohydrat ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {/* If the \"karbohydrat\" value is missing, display an exclamation icon with a tooltip */}\n                  {karbohydrat ? (\n                    <Tooltip\n                      title=\"Mangler verdi i karbohydrat parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Karbohydrat (g)\n                </th>\n                {/* Input field for \"karbohydrat\" value */}\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"karbohydrat\"\n                    value={nutrition.karbohydrat}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows hvorav tilsatte sukkerarter (added sugars)content */}\n              <tr className={hvoravSukkerarter ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {hvoravSukkerarter ? (\n                    <Tooltip\n                      title=\"Mangler verdi i hvorav sukkerarter parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Hvorav tilsatte sukkerarter (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"hvoravSukkerarter\"\n                    value={nutrition.hvoravSukkerarter}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows kostfiber content */}\n              <tr className={kostfiber ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {/* If kostfiber is missing, show a exclamation icon */}\n                  {kostfiber ? (\n                    <Tooltip\n                      title=\"Mangler verdi i kostfiber parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Kostfiber (g)\n                </th>\n                <td>\n                  {/* Input field for kostfiber */}\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"kostfiber\"\n                    value={nutrition.kostfiber}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the protein content */}\n              <tr className={protein ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {/* If the protein value is missing, an exclamation icon is displayed */}\n                  {protein ? (\n                    <Tooltip\n                      title=\"Mangler verdi i protein parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Protein (g)\n                </th>\n                {/* This column allows the user to input the protein value */}\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"protein\"\n                    value={nutrition.protein}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows salt content */}\n              <tr className={salt ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {salt ? (\n                    <Tooltip\n                      title=\"Mangler verdi i salt parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Salt (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"salt\"\n                    value={nutrition.salt}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n\n        {/* Button that submits the form and calls the onClick function when clicked */}\n        <div className=\"col-12 button-div\">\n          <button\n            type=\"submit\"\n            className=\"btn btn-primary btn-lg button-search\"\n            onClick={onClick}\n          >\n            Beregn\n          </button>\n        </div>\n      </div>\n\n      <div className=\"col-md-6\">\n        {/* container for \"Nøkkelhullet\" results  */}\n        {showNokkelhulletResults && (\n          <div className=\"container nøkkelhullet-food-result-container\">\n            {/* An image with class \"keyhole-logo\" and alt text \"keyhole logo\" */}\n            <img\n              src={keyholeLgog}\n              className=\"keyhole-logo img-fluid\"\n              alt=\"keyhole logo\"\n            />\n            {/* A heading with text \"Nøkkelhullet\" */}\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>\n                  Det er ingen vilkår som gjelder for å innfri nøkkelhullet for\n                  denne matvaregruppen.\n                </p>\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  {/* A paragraph with a link to Lovdata's \"Forskrift om frivillig merking a nœringsmidler med Nokkellhullet\" */}\n                  <p>\n                    Les mer om hvilke krav det stilles for merking av\n                    Nokkellhullet på Lovdatas \"Forskrift om frivillig merking a\n                    nœringsmidler med Nokkellhullet\":\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  {/* FontAwesome icon with event listener to hide the \"Nøkkelhullet\" information section */}\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n\n        {/*Negative results nøkkelhullet container\" */}\n        {showNokkelhulletResults === false && (\n          <div className=\"container nøkkelhullet-food-negResult-container\">\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                {showEmptyResult ? (\n                  <p>** Obligatoriske næringsverdier kan ikke være tomme.</p>\n                ) : null}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om frivillig merking av næringsmidler med Nøkkelhullet:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for ernæringspåstander if there are all true results */}\n        {buttonClicked && (\n          <div\n            className={\n              lowSugars && withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-all\"\n                : !lowSugars && !withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-none\"\n                : \"container ernæringspåstander-food-result-container-some\"\n            }\n          >\n            <h5>Ernæringspåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                {/* Low sugars */}\n                {lowSugars ? (\n                  <div>\n                    <p>** Lavt sukkerinnhold:</p>\n                    <p>\n                      Dette produktet inneholder høyst 5 g sukkerarter per 100 g\n                      for næringsmidler i fast form, eller høyst 2,5 g\n                      sukkerarter per 100 ml for næringsmidler i flytende form\n                      og oppfyller kravet for \"Lavt sukkerinnhold\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Lavt sukkerinnhold\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        For faste næringsmidler, sukkerinnholdet må være høyst 5\n                        g per 100 g.\n                      </li>\n                      <li>\n                        For flytende næringsmidler, sukkerinnholdet må være\n                        høyst 2,5 g per 100 ml.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n\n                {/* No added sugars */}\n                {withNoAddedSugars ? (\n                  <div>\n                    <p>** Uten tilsatt sukker:</p>\n                    <p>\n                      Dette produktet er ikke tilsatt monosakkarider,\n                      disakkarider eller andre næringsmidler på grunn av deres\n                      søtende egenskaper og oppfyller kravet for \"Uten tilsatt\n                      sukker\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Uten tilsatt sukker\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        Produktet må ikke være tilsatt monosakkarider,\n                        disakkarider eller andre næringsmidler på grunn av deres\n                        søtende egenskaper.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"ernaerings\")}\n                />\n              </div>\n            </div>\n            {infoErnaerings ? (\n              // Information section for \"Ernæringspåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"ernaerings\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n\n        {/* container for Helsepåstander results  */}\n        {showHelsepåstander && (\n          <div\n            className=\"container helsepåstander-food-result-container\"\n            style={{ background: \"#f2f0b5\" }}\n          >\n            <h5>Helsepåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Under utvikling. </p>\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"helsepåstander\")}\n                />\n              </div>\n            </div>\n            {infoHelsepåstander ? (\n              // Information section for \"Helsepåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"helsepåstander\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n\n        {/* Spacer */}\n        <div style={{ padding: \"15px\" }}></div>\n        {/* conditional rendering for the buttons using showButtons state */}\n        {showButtons && (\n          <div className=\"d-flex justify-content-between\">\n            {/* Save button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-save\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Lagre produkt\n            </button>\n\n            {/* Share button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-share\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Del produkt\n            </button>\n\n            {/* Add a new product button */}\n            <button\n              className=\"btn btn-primary\"\n              onClick={() => window.location.reload()}\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-plus\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Legg til et nytt produkt\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Kategori21;\n","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Kategori20.js",["443","444","445","446"],[],"import React from \"react\";\nimport { useState, useEffect } from \"react\"; // import the useState and useeffect hook.\nimport { faCircleExclamation } from \"@fortawesome/free-solid-svg-icons\"; // import an icon.\nimport { faBan } from \"@fortawesome/free-solid-svg-icons\";\nimport { faSave, faShare, faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"; // import FontAwesomeIcon component.\nimport Tooltip from \"@mui/material/Tooltip\"; // import Tooltip component.\nimport keyholeLgog from \"./circle-keyhole-logo.png\"; // import an image\nimport { faCircleInfo } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport { faXmarkCircle } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport Select from \"react-select\"; // import Select component\n\nconst Kategori20 = () => {\n  // State variables for showing results and empty result message\n  const [showNokkelhulletResults, setShowNokkelhulletResults] = useState(null);\n  const [showErnaeringsResults, setShowErnaeringsResults] = useState(null);\n  const [showHelsepåstander, setShowHelsepåstander] = useState(null);\n  const [showEmptyResult, setShowEmptyResult] = useState(\"\"); // initialize state variable for showing empty result message.\n\n  //state variable to store the user's food type selection (solid or liquid) and the low sugars claim result\n  const [foodType, setFoodType] = useState(\"\");\n  const [lowSugars, setLowSugars] = useState(null);\n\n  //state variable to track whether the product meets the WITH NO ADDED SUGARS claim or not\n  const [withNoAddedSugars, setWithNoAddedSugars] = useState(false);\n\n  // State variable for tracking if the button is clicked\n  const [buttonClicked, setButtonClicked] = useState(false);\n\n  // useEffect hook for checking the condition for the \"WITH NO ADDED SUGARS\" claim when button is clicked\n  useEffect(() => {\n    if (buttonClicked) {\n      if (withNoAddedSugars) {\n        setShowErnaeringsResults(true);\n      } else {\n        setShowErnaeringsResults(false);\n      }\n    }\n  }, [withNoAddedSugars, buttonClicked]);\n\n  //state for controlling the buttons' visibility\n  const [showButtons, setShowButtons] = useState(false);\n\n  // State variables to control the visibility of the information sections\n  const [infoNokkelhullet, setInfoNokkelhullet] = useState(false);\n  const [infoErnaerings, setInfoErnaerings] = useState(false);\n  const [infoHelsepåstander, setInfoHelsepåstander] = useState(false);\n\n  // Function to show an information section based on the container parameter\n  const onClickInfo = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(true);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(true);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(true);\n    }\n  };\n\n  // Function to hide an information section based on the container parameter\n  const onClickClose = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(false);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(false);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(false);\n    }\n  };\n\n  // State variables for handling input fields and validation errors\n  const [energikj, setEnergikj] = useState(false);\n  const [energikcal, setEnergikcal] = useState(false);\n\n  const [fett, setFett] = useState(false);\n  const [mettede, setMettede] = useState(false);\n  const [mettedeNull, setMettedeNull] = useState(false);\n  const [karbohydrat, setKarbohydrat] = useState(false);\n  const [hvoravSukkerarter, setHvoravSukkerarter] = useState(false);\n  const [kostfiber, setKostfiber] = useState(false);\n  const [protein, setProtein] = useState(false);\n  const [salt, setSalt] = useState(false);\n  const [saltNull, setSaltNull] = useState(false);\n  // State variable for storing nutrition information entered by user\n  const [nutrition, setNutrition] = useState({\n    energikj: \"\",\n    energikcal: \"\",\n    fett: \"\",\n    mettede: \"\",\n    karbohydrat: \"\",\n    hvoravSukkerarter: \"\",\n    kostfiber: \"\",\n    protein: \"\",\n    salt: \"\",\n  });\n\n  // Handler for updating nutrition state/state variable based on input field changes/input values\n  const changeHandle = (event) => {\n    console.log(\"changeHandle ===\", event.target, event.target.value);\n    setNutrition({\n      ...nutrition,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  // define function to handle form submission\n  const onClick = (e) => {\n    e.preventDefault();\n    setButtonClicked(true);\n    setShowHelsepåstander(true);\n    setShowButtons(true);\n\n    console.log(\"onclick ===\", selectsPart, nutrition);\n\n    // Check if all required fields are filled out and within valid ranges\n    // The if statement checks if all required inputs are non-empty and meet the nutritional requirements\n    if (\n      nutrition.fett !== \"\" &&\n      nutrition.mettede !== \"\" &&\n      nutrition.mettede <= nutrition.fett / 5 &&\n      nutrition.karbohydrat !== \"\" &&\n      nutrition.hvoravSukkerarter !== \"\" &&\n      nutrition.kostfiber !== \"\" &&\n      nutrition.protein !== \"\" &&\n      nutrition.salt !== \"\" &&\n      nutrition.salt <= 1\n    ) {\n      // If all requirements are met, display the nutrition results\n      setShowNokkelhulletResults(true);\n      // Hide any empty result messages or error messages\n      setShowEmptyResult(false);\n\n      // Check if the user selected \"energikj\" and if nutrition input lable of \"energikj\" is not empty\n      if (selectsPart === \"energikj\" && nutrition.energikj !== \"\") {\n        setEnergikj(false);\n      }\n\n      // Check if the user selected \"energikcal\" and if nutrition input lable of \"energikcal\" is not empty\n      if (selectsPart === \"energikcal\" && nutrition.energikcal !== \"\") {\n        setEnergikcal(false);\n      }\n      // Reset all input validation errors\n      setFett(false);\n      setMettede(false);\n      setMettedeNull(false);\n      setKarbohydrat(false);\n      setHvoravSukkerarter(false);\n      setKostfiber(false);\n      setProtein(false);\n      setSalt(false);\n      setSaltNull(false);\n\n      // If the user has not selected any nutrients, set errors accordingly\n      // Check each nutrition value to see if it is missing or negative\n      // show input validation errors if any input is missing or negative.\n    } else {\n      if (selectsPart === \"energikj\") {\n        console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n        if (nutrition.energikj === \"\" || nutrition.energikj < 0) {\n          console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n          setEnergikj(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikj(false);\n        }\n      }\n\n      if (selectsPart === \"energikcal\") {\n        console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n        if (nutrition.energikcal === \"\" || nutrition.energikcal < 0) {\n          console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n          setEnergikcal(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikcal(false);\n        }\n      }\n\n      // repeat for each nutrition value...\n\n      if (nutrition.fett === \"\" || nutrition.fett < 0) {\n        setFett(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setFett(false);\n      }\n\n      if (nutrition.mettede === \"\" || nutrition.mettede < 0) {\n        setMettedeNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setMettedeNull(false);\n      }\n      if (nutrition.mettede > nutrition.fett / 5) {\n        setMettede(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setMettede(false);\n      }\n\n      if (nutrition.karbohydrat === \"\" || nutrition.karbohydrat < 0) {\n        setKarbohydrat(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKarbohydrat(false);\n      }\n\n      if (\n        nutrition.hvoravSukkerarter === \"\" ||\n        nutrition.hvoravSukkerarter < 0\n      ) {\n        setHvoravSukkerarter(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setHvoravSukkerarter(false);\n      }\n\n      if (nutrition.kostfiber === \"\" || nutrition.kostfiber < 0) {\n        setKostfiber(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKostfiber(false);\n      }\n\n      if (nutrition.protein === \"\" || nutrition.protein < 0) {\n        setProtein(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setProtein(false);\n      }\n\n      if (nutrition.salt === \"\" || nutrition.salt < 0) {\n        setSaltNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setSaltNull(false);\n      }\n      if (nutrition.salt > 1) {\n        setSalt(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setSalt(false);\n      }\n    }\n\n    // Check for the \"LOW SUGARS\" claim\n    if (foodType === \"solid\" && parseFloat(nutrition.karbohydrat) <= 5) {\n      setLowSugars(true);\n    } else if (\n      foodType === \"liquid\" &&\n      parseFloat(nutrition.karbohydrat) <= 2.5\n    ) {\n      setLowSugars(true);\n    } else {\n      setLowSugars(false);\n    }\n\n    // Check the condition for the \"WITH NO ADDED SUGARS\" nutrition claim\n    if (nutrition.hvoravSukkerarter === \"0\" && nutrition.karbohydrat > 0) {\n      setWithNoAddedSugars(true);\n    } else {\n      setWithNoAddedSugars(false);\n    }\n  };\n\n  // create an array of energy units to select from\n  const selectUnit = [\n    {\n      value: \"energikj\",\n      label: \"(kj)\",\n    },\n    {\n      value: \"energikcal\",\n      label: \"(kcal)\",\n    },\n  ];\n\n  // Declare a state variable for the select dropdown.\n  const [selectsPart, setSelectPart] = useState(\"\");\n\n  // A function to handle changes to the select dropdown energy unit\n  const handlerPart = (event) => {\n    const inputVal = document.getElementsByName(event.value);\n    console.log(\"handlerPart ===\", event, nutrition, inputVal);\n    setSelectPart(event.value);\n  };\n\n  //create an array of food types to select from\n  const foodTypes = [\n    {\n      value: \"solid\",\n      label: \"Fast form\",\n    },\n    {\n      value: \"liquid\",\n      label: \"Flytende form\",\n    },\n  ];\n\n  return (\n    <div className=\"row\">\n      {/* This div creates a column layout for the left side of the table */}\n      <div className=\"col-md-6\">\n        {/* the selector (dropdown menu) for choosing the food type. */}\n        <div className=\"form-group\">\n          <label htmlFor=\"foodType\">Velg type matvare:</label>\n          <Select\n            className=\"form-control\"\n            id=\"foodType\"\n            options={foodTypes}\n            onChange={(e) => setFoodType(e.value)} // update the onFoodTypeChange function to directly set the food type state\n            placeholder=\"Velg type matvare\"\n          />\n        </div>\n\n        <h5>\n          Næringsinnhold per 100{\" \"}\n          {foodType === \"solid\" ? \"g\" : foodType === \"liquid\" ? \"ml\" : \"g/ml\"}\n        </h5>\n\n        {/* This div adds a light background color to the table */}\n        <div className=\"bg-light\">\n          {/* This table shows the nutritional information */}\n          <table className=\"table table-striped\">\n            {/* The table header */}\n            <thead>\n              <tr>\n                <th scope=\"col\" className=\"table-font\">\n                  Energi eller næringsstoff\n                </th>\n                <th scope=\"col\" className=\"table-font\">\n                  Mengde\n                </th>\n              </tr>\n            </thead>\n\n            {/* The table body */}\n            <tbody>\n              {/* This row shows the energy content */}\n              <tr className={(energikj, energikcal ? \"alert-box\" : null)}>\n                <th scope=\"row\" className=\"table-font\">\n                  {/* An icon with a tooltip to indicate missing values in energy parameters */}\n                  {energikj && energikcal ? (\n                    <Tooltip\n                      title=\"Mangler verdi i energi (kJ/Kcal) parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  {/* This div displays the energy label and unit */}\n                  <div className=\"row\">\n                    <div className=\"col-md-3\">\n                      <label for=\"energiunit\" class=\"form-label\">\n                        Energi\n                      </label>\n                    </div>\n                    {/* A dropdown menu for selecting the energy unit */}\n                    <div className=\"col-md-6\">\n                      <Select\n                        placeholder={<div>Velg enhet</div>}\n                        className=\"form-select-md mb-3\"\n                        options={selectUnit}\n                        onChange={(e) => handlerPart(e)}\n                      />\n                    </div>\n                  </div>\n                </th>\n                {/* An input field for entering the energy value */}\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name={selectsPart}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* Additional rows for other nutrient selections */}\n              {/* This row shows the fat content */}\n              <tr className={fett ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {fett ? (\n                    <Tooltip\n                      title=\"Mangler verdi i fett parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Fett (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"fett\"\n                    value={nutrition.fett}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the saturated fat content */}\n              <tr\n                className={\n                  mettede\n                    ? \"alert-box\"\n                    : null || mettedeNull\n                    ? \"alert-box\"\n                    : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {mettede ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden mettede fettsyrer. Mengden på mettede fettsyrer må være  høyst 20 % av fettinnholdet / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {mettedeNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i mettede fettsyrer parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Mettede fettsyrer (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"mettede\"\n                    value={nutrition.mettede}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the carbohydrate content */}\n              <tr className={karbohydrat ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {karbohydrat ? (\n                    <Tooltip\n                      title=\"Mangler verdi i karbohydrat parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Karbohydrat (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"karbohydrat\"\n                    value={nutrition.karbohydrat}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows hvorav sukkerarter content */}\n              <tr className={hvoravSukkerarter ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {hvoravSukkerarter ? (\n                    <Tooltip\n                      title=\"Mangler verdi i hvorav sukkerarter parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Hvorav tilsatte sukkerarter (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"hvoravSukkerarter\"\n                    value={nutrition.hvoravSukkerarter}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows kostfiber content */}\n              <tr className={kostfiber ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {kostfiber ? (\n                    <Tooltip\n                      title=\"Mangler verdi i kostfiber parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Kostfiber (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"kostfiber\"\n                    value={nutrition.kostfiber}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the protein content */}\n              <tr className={protein ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {protein ? (\n                    <Tooltip\n                      title=\"Mangler verdi i protein parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Protein (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"protein\"\n                    value={nutrition.protein}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows salt content */}\n              <tr\n                className={\n                  salt ? \"alert-box\" : null || saltNull ? \"alert-box\" : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {salt ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden salt. Mengden på salt må være lavere enn eller lik 1 g/ 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {saltNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i salt parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Salt (g)\n                </th>\n                <td colSpan=\"2\">\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"salt\"\n                    value={nutrition.salt}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n\n        {/* Button that submits the form and calls the onClick function */}\n        <div className=\"col-12 button-div\">\n          <button\n            type=\"submit\"\n            className=\"btn btn-primary btn-lg button-search\"\n            onClick={onClick}\n          >\n            Beregn\n          </button>\n        </div>\n      </div>\n\n      <div className=\"col-md-6\">\n        {/* positive results nøkkelhullet container\" */}\n        {showNokkelhulletResults ? (\n          <div className=\"container nøkkelhullet-food-result-container\">\n            {/* An image with class \"keyhole-logo\" and alt text \"keyhole logo\" */}\n            <img\n              src={keyholeLgog}\n              className=\"keyhole-logo img-fluid\"\n              alt=\"keyhole logo\"\n            />\n            {/* A heading with text \"Nøkkelhullet\" */}\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir Nøkkelhullet. </p>\n              </div>\n              <div className=\"col-md-2\">\n                {/* FontAwesome icon with event listener to show the \"Nøkkelhullet\" information section */}\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  {/* A paragraph with a link to Lovdata's \"Forskrift om frivillig merking a nœringsmidler med Nokkellhullet\" */}\n                  <p>\n                    Les mer om hvilke krav det stilles for merking av\n                    Nokkellhullet på Lovdatas \"Forskrift om frivillig merking a\n                    nœringsmidler med Nokkellhullet\":\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  {/* FontAwesome icon with event listener to hide the \"Nøkkelhullet\" information section */}\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        ) : null}\n        {/*Negative results nøkkelhullet container\" */}\n        {showNokkelhulletResults === false && (\n          <div className=\"container nøkkelhullet-food-negResult-container\">\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir ikke Nøkkelhullet.</p>\n                {showEmptyResult ? (\n                  <p>** Obligatoriske næringsverdier kan ikke være tomme.</p>\n                ) : null}\n\n                {mettede ? (\n                  <p>\n                    ** Mettede fettsyrer verdien kan være høyst 20% av\n                    fettinholdet /100 g.\n                  </p>\n                ) : null}\n\n                {salt ? <p>** Salt verdien kan være høyst 1 g/100 g.</p> : null}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om frivillig merking av næringsmidler med Nøkkelhullet:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for ernæringspåstander if there are all true results */}\n        {buttonClicked && (\n          <div\n            className={\n              lowSugars && withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-all\"\n                : !lowSugars && !withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-none\"\n                : \"container ernæringspåstander-food-result-container-some\"\n            }\n          >\n            <h5>Ernæringspåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                {/* Low sugars */}\n                {lowSugars ? (\n                  <div>\n                    <p>** Lavt sukkerinnhold:</p>\n                    <p>\n                      Dette produktet inneholder høyst 5 g sukkerarter per 100 g\n                      for næringsmidler i fast form, eller høyst 2,5 g\n                      sukkerarter per 100 ml for næringsmidler i flytende form\n                      og oppfyller kravet for \"Lavt sukkerinnhold\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Lavt sukkerinnhold\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        For faste næringsmidler, sukkerinnholdet må være høyst 5\n                        g per 100 g.\n                      </li>\n                      <li>\n                        For flytende næringsmidler, sukkerinnholdet må være\n                        høyst 2,5 g per 100 ml.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n\n                {/* No added sugars */}\n                {withNoAddedSugars ? (\n                  <div>\n                    <p>** Uten tilsatt sukker:</p>\n                    <p>\n                      Dette produktet er ikke tilsatt monosakkarider,\n                      disakkarider eller andre næringsmidler på grunn av deres\n                      søtende egenskaper og oppfyller kravet for \"Uten tilsatt\n                      sukker\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Uten tilsatt sukker\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        Produktet må ikke være tilsatt monosakkarider,\n                        disakkarider eller andre næringsmidler på grunn av deres\n                        søtende egenskaper.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"ernaerings\")}\n                />\n              </div>\n            </div>\n            {infoErnaerings ? (\n              // Information section for \"Ernæringspåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"ernaerings\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for Helsepåstander results  */}\n        {showHelsepåstander && (\n          <div\n            className=\"container helsepåstander-food-result-container\"\n            style={{ background: \"#f2f0b5\" }}\n          >\n            <h5>Helsepåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Under utvikling. </p>\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"helsepåstander\")}\n                />\n              </div>\n            </div>\n            {infoHelsepåstander ? (\n              // Information section for \"Helsepåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"helsepåstander\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"15px\" }}></div>\n        {/* conditional rendering for the buttons using showButtons state */}\n        {showButtons && (\n          <div className=\"d-flex justify-content-between\">\n            {/* Save button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-save\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Lagre produkt\n            </button>\n\n            {/* Share button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-share\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Del produkt\n            </button>\n\n            {/* Add a new product button */}\n            <button\n              className=\"btn btn-primary\"\n              onClick={() => window.location.reload()}\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-plus\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Legg til et nytt produkt\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Kategori20;\n","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Kategori22b.js",["447","448","449","450"],[],"import React from \"react\";\nimport { useState, useEffect } from \"react\"; // import the useState and useeffect hook.\nimport { faCircleExclamation } from \"@fortawesome/free-solid-svg-icons\"; // import an icon.\nimport { faBan } from \"@fortawesome/free-solid-svg-icons\";\nimport { faSave, faShare, faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"; // import FontAwesomeIcon component.\nimport Tooltip from \"@mui/material/Tooltip\"; // import Tooltip component.\nimport keyholeLgog from \"./circle-keyhole-logo.png\"; // import an image\nimport { faCircleInfo } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport { faXmarkCircle } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport Select from \"react-select\"; // import Select component\n\nconst Kategori22b = () => {\n  // State variables for showing/hiding results and empty result message\n  const [showNokkelhulletResults, setShowNokkelhulletResults] = useState(null);\n  const [showErnaeringsResults, setShowErnaeringsResults] = useState(null);\n  const [showHelsepåstander, setShowHelsepåstander] = useState(null);\n  const [showEmptyResult, setShowEmptyResult] = useState(\"\"); // initialize state variable for showing empty result message.\n\n  //state variable to store the user's food type selection (solid or liquid) and the low sugars claim result\n  const [foodType, setFoodType] = useState(\"\");\n  const [lowSugars, setLowSugars] = useState(null);\n\n  //state variable to track whether the product meets the WITH NO ADDED SUGARS claim or not\n  const [withNoAddedSugars, setWithNoAddedSugars] = useState(false);\n\n  // State variable for tracking if the button is clicked\n  const [buttonClicked, setButtonClicked] = useState(false);\n\n  // useEffect hook for checking the condition for the \"WITH NO ADDED SUGARS\" claim when button is clicked\n  useEffect(() => {\n    if (buttonClicked) {\n      if (withNoAddedSugars) {\n        setShowErnaeringsResults(true);\n      } else {\n        setShowErnaeringsResults(false);\n      }\n    }\n  }, [withNoAddedSugars, buttonClicked]);\n\n  //state for controlling the buttons' visibility\n  const [showButtons, setShowButtons] = useState(false);\n\n  // State variables to control the visibility of the information sections\n  const [infoNokkelhullet, setInfoNokkelhullet] = useState(false);\n  const [infoErnaerings, setInfoErnaerings] = useState(false);\n  const [infoHelsepåstander, setInfoHelsepåstander] = useState(false);\n\n  // Function to show an information section based on the container parameter\n  const onClickInfo = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(true);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(true);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(true);\n    }\n  };\n\n  // Function to hide an information section based on the container parameter\n  const onClickClose = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(false);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(false);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(false);\n    }\n  };\n\n  // State variables for handling input fields and validation errors\n  const [energikj, setEnergikj] = useState(false);\n  const [energikcal, setEnergikcal] = useState(false);\n\n  const [fett, setFett] = useState(false);\n  const [fettNull, setFettNull] = useState(false);\n  const [mettede, setMettede] = useState(false);\n  const [karbohydrat, setKarbohydrat] = useState(false);\n  const [karbohydratNull, setKarbohydratNull] = useState(false);\n  const [hvoravSukkerarter, setHvoravSukkerarter] = useState(false);\n  const [kostfiber, setKostfiber] = useState(false);\n  const [protein, setProtein] = useState(false);\n  const [salt, setSalt] = useState(false);\n  const [saltNull, setSaltNull] = useState(false);\n\n  // State variable for storing nutrition information entered by user\n  const [nutrition, setNutrition] = useState({\n    energikj: \"\",\n    energikcal: \"\",\n    fett: \"\",\n    mettede: \"\",\n    karbohydrat: \"\",\n    hvoravSukkerarter: \"\",\n    kostfiber: \"\",\n    protein: \"\",\n    salt: \"\",\n  });\n\n  // Handler for updating nutrition state/state variable based on input field changes/input values\n  const changeHandle = (event) => {\n    console.log(\"changeHandle ===\", event.target, event.target.value);\n    setNutrition({\n      ...nutrition,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  // define function to handle form submission\n  const onClick = (e) => {\n    e.preventDefault();\n    setButtonClicked(true);\n    setShowHelsepåstander(true);\n    setShowButtons(true);\n\n    console.log(\"onclick ===\", selectsPart, nutrition);\n\n    // Check if all required fields are filled out and within valid ranges\n    // The if statement checks if all required inputs are non-empty and meet the nutritional requirements\n    if (\n      nutrition.fett !== \"\" &&\n      nutrition.fett <= 10 &&\n      nutrition.mettede !== \"\" &&\n      nutrition.karbohydrat !== \"\" &&\n      nutrition.karbohydrat <= 5 &&\n      nutrition.hvoravSukkerarter !== \"\" &&\n      nutrition.kostfiber !== \"\" &&\n      nutrition.protein !== \"\" &&\n      nutrition.salt !== \"\" &&\n      nutrition.salt <= 2.5\n    ) {\n      // If all requirements are met, display the nutrition results\n      setShowNokkelhulletResults(true);\n      // Hide any empty result messages or error messages\n      setShowEmptyResult(false);\n\n      // Check if the user selected \"energikj\" and if nutrition input lable of \"energikj\" is not empty\n      if (selectsPart === \"energikj\" && nutrition.energikj !== \"\") {\n        setEnergikj(false);\n      }\n\n      // Check if the user selected \"energikcal\" and if nutrition input lable of \"energikcal\" is not empty\n      if (selectsPart === \"energikcal\" && nutrition.energikcal !== \"\") {\n        setEnergikcal(false);\n      }\n      // Reset all input validation errors\n      setFett(false);\n      setFettNull(false);\n      setMettede(false);\n      setKarbohydrat(false);\n      setKarbohydratNull(false);\n      setHvoravSukkerarter(false);\n      setKostfiber(false);\n      setProtein(false);\n      setSalt(false);\n      setSaltNull(false);\n      // If the user has not selected any nutrients, set errors accordingly\n      // Check each nutrition value to see if it is missing or negative\n      // show input validation errors if any input is missing or negative.\n    } else {\n      if (selectsPart === \"energikj\") {\n        console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n        if (nutrition.energikj === \"\" || nutrition.energikj < 0) {\n          console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n          setEnergikj(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikj(false);\n        }\n      }\n\n      if (selectsPart === \"energikcal\") {\n        console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n        if (nutrition.energikcal === \"\" || nutrition.energikcal < 0) {\n          console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n          setEnergikcal(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikcal(false);\n        }\n      }\n\n      // repeat for each nutrition value...\n      if (nutrition.fett === \"\" || nutrition.fett < 0) {\n        setFettNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setFettNull(false);\n      }\n      if (nutrition.fett > 10) {\n        setFett(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setFett(false);\n      }\n\n      if (nutrition.mettede === \"\" || nutrition.mettede < 0) {\n        setMettede(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setMettede(false);\n      }\n\n      if (nutrition.karbohydrat === \"\" || nutrition.karbohydrat < 0) {\n        setKarbohydratNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKarbohydratNull(false);\n      }\n      if (nutrition.karbohydrat > 5) {\n        setKarbohydrat(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setKarbohydrat(false);\n      }\n\n      if (\n        nutrition.hvoravSukkerarter === \"\" ||\n        nutrition.hvoravSukkerarter < 0\n      ) {\n        setHvoravSukkerarter(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setHvoravSukkerarter(false);\n      }\n\n      if (nutrition.kostfiber === \"\" || nutrition.kostfiber < 0) {\n        setKostfiber(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKostfiber(false);\n      }\n\n      if (nutrition.protein === \"\" || nutrition.protein < 0) {\n        setProtein(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setProtein(false);\n      }\n\n      if (nutrition.salt === \"\" || nutrition.salt < 0) {\n        setSaltNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setSaltNull(false);\n      }\n      if (nutrition.salt > 2.5) {\n        setSalt(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setSalt(false);\n      }\n    }\n\n    // Check for the \"LOW SUGARS\" claim\n    if (foodType === \"solid\" && parseFloat(nutrition.karbohydrat) <= 5) {\n      setLowSugars(true);\n    } else if (\n      foodType === \"liquid\" &&\n      parseFloat(nutrition.karbohydrat) <= 2.5\n    ) {\n      setLowSugars(true);\n    } else {\n      setLowSugars(false);\n    }\n\n    // Check the condition for the \"WITH NO ADDED SUGARS\" nutrition claim\n    if (nutrition.hvoravSukkerarter === \"0\" && nutrition.karbohydrat > 0) {\n      setWithNoAddedSugars(true);\n    } else {\n      setWithNoAddedSugars(false);\n    }\n  };\n\n  // create an array of energy units to select from\n  const selectUnit = [\n    {\n      value: \"energikj\",\n      label: \"(kj)\",\n    },\n    {\n      value: \"energikcal\",\n      label: \"(kcal)\",\n    },\n  ];\n\n  // Declare a state variable for the select dropdown.\n  const [selectsPart, setSelectPart] = useState(\"\");\n\n  // A function to handle changes to the select dropdown energy unit\n  const handlerPart = (event) => {\n    const inputVal = document.getElementsByName(event.value);\n    console.log(\"handlerPart ===\", event, nutrition, inputVal);\n    setSelectPart(event.value);\n  };\n\n  //create an array of food types to select from\n  const foodTypes = [\n    {\n      value: \"solid\",\n      label: \"Fast form\",\n    },\n    {\n      value: \"liquid\",\n      label: \"Flytende form\",\n    },\n  ];\n\n  return (\n    <div className=\"row\">\n      {/* This div creates a column layout for the left side of the table */}\n      <div className=\"col-md-6\">\n        {/* the selector (dropdown menu) for choosing the food type. */}\n        <div className=\"form-group\">\n          <label htmlFor=\"foodType\">Velg type matvare:</label>\n          <Select\n            className=\"form-control\"\n            id=\"foodType\"\n            options={foodTypes}\n            onChange={(e) => setFoodType(e.value)} // update the onFoodTypeChange function to directly set the food type state\n            placeholder=\"Velg type matvare\"\n          />\n        </div>\n\n        <h5>\n          Næringsinnhold per 100{\" \"}\n          {foodType === \"solid\" ? \"g\" : foodType === \"liquid\" ? \"ml\" : \"g/ml\"}\n        </h5>\n\n        {/* This div adds a light background color to the table */}\n        <div className=\"bg-light\">\n          {/* This table shows the nutritional information */}\n          <table className=\"table table-striped\">\n            {/* The table header */}\n            <thead>\n              <tr>\n                <th scope=\"col\" className=\"table-font\">\n                  Energi eller næringsstoff\n                </th>\n                <th scope=\"col\" className=\"table-font\">\n                  Mengde\n                </th>\n              </tr>\n            </thead>\n\n            {/* The table body */}\n            <tbody>\n              {/* This row shows the energy content */}\n              <tr className={(energikj, energikcal ? \"alert-box\" : null)}>\n                <th scope=\"row\" className=\"table-font\">\n                  {/* An icon with a tooltip to indicate missing values in energy parameters */}\n                  {energikj && energikcal ? (\n                    <Tooltip\n                      title=\"Mangler verdi i energi (kJ/Kcal) parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  {/* This div displays the energy label and unit */}\n                  <div className=\"row\">\n                    <div className=\"col-md-3\">\n                      <label for=\"energiunit\" class=\"form-label\">\n                        Energi\n                      </label>\n                    </div>\n                    {/* A dropdown menu for selecting the energy unit */}\n                    <div className=\"col-md-6\">\n                      <Select\n                        placeholder={<div>Velg enhet</div>}\n                        className=\"form-select-md mb-3\"\n                        options={selectUnit}\n                        onChange={(e) => handlerPart(e)}\n                      />\n                    </div>\n                  </div>\n                </th>\n                {/* An input field for entering the energy value */}\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name={selectsPart}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* Additional rows for other nutrient selections */}\n              {/* This row shows the fat content */}\n              <tr\n                className={\n                  fett ? \"alert-box\" : null || fettNull ? \"alert-box\" : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {fett ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden fett. Mengden på fett må være lavere enn eller lik 10 g / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {fettNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i fett parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Fett (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"fett\"\n                    value={nutrition.fett}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the saturated fat content */}\n              <tr className={mettede ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {mettede ? (\n                    <Tooltip\n                      title=\"Mangler verdi i mettede fettsyrer parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Mettede fettsyrer (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"mettede\"\n                    value={nutrition.mettede}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the carbohydrate content */}\n              <tr\n                className={\n                  karbohydrat\n                    ? \"alert-box\"\n                    : null || karbohydratNull\n                    ? \"alert-box\"\n                    : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {karbohydrat ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden sukkerarter. Mengden på sukkerarter må være lavere enn eller lik 5 g / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {karbohydratNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i karbohydrat parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Karbohydrat (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"karbohydrat\"\n                    value={nutrition.karbohydrat}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows hvorav sukkerarter content */}\n              <tr className={hvoravSukkerarter ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {hvoravSukkerarter ? (\n                    <Tooltip\n                      title=\"Mangler verdi i hvorav sukkerarter parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Hvorav tilsatte sukkerarter (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"hvoravSukkerarter\"\n                    value={nutrition.hvoravSukkerarter}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows kostfiber content */}\n              <tr className={kostfiber ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {kostfiber ? (\n                    <Tooltip\n                      title=\"Mangler verdi i kostfiber parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Kostfiber (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"kostfiber\"\n                    value={nutrition.kostfiber}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the protein content */}\n              <tr className={protein ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {protein ? (\n                    <Tooltip\n                      title=\"Mangler verdi i protein parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Protein (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"protein\"\n                    value={nutrition.protein}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows salt content */}\n              <tr\n                className={\n                  salt ? \"alert-box\" : null || saltNull ? \"alert-box\" : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {salt ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden salt. Mengden på salt må være lavere enn eller lik 2.5 g / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {saltNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i salt parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Salt (g)\n                </th>\n                <td colSpan=\"2\">\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"salt\"\n                    value={nutrition.salt}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n\n        {/* Button that submits the form and calls the onClick function */}\n        <div className=\"col-12 button-div\">\n          <button\n            type=\"submit\"\n            className=\"btn btn-primary btn-lg button-search\"\n            onClick={onClick}\n          >\n            Beregn\n          </button>\n        </div>\n      </div>\n\n      <div className=\"col-md-6\">\n        {/* positive results nøkkelhullet container\" */}\n        {showNokkelhulletResults ? (\n          <div className=\"container nøkkelhullet-food-result-container\">\n            {/* An image with class \"keyhole-logo\" and alt text \"keyhole logo\" */}\n            <img\n              src={keyholeLgog}\n              className=\"keyhole-logo img-fluid\"\n              alt=\"keyhole logo\"\n            />\n            {/* A heading with text \"Nøkkelhullet\" */}\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir Nøkkelhullet. </p>\n              </div>\n              <div className=\"col-md-2\">\n                {/* FontAwesome icon with event listener to show the \"Nøkkelhullet\" information section */}\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  {/* A paragraph with a link to Lovdata's \"Forskrift om frivillig merking a nœringsmidler med Nokkellhullet\" */}\n                  <p>\n                    Les mer om hvilke krav det stilles for merking av\n                    Nokkellhullet på Lovdatas \"Forskrift om frivillig merking a\n                    nœringsmidler med Nokkellhullet\":\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  {/* FontAwesome icon with event listener to hide the \"Nøkkelhullet\" information section */}\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        ) : null}\n        {/*Negative results nøkkelhullet container\" */}\n        {showNokkelhulletResults === false && (\n          <div className=\"container nøkkelhullet-food-negResult-container\">\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir ikke Nøkkelhullet.</p>\n                {showEmptyResult ? (\n                  <p>** Obligatoriske næringsverdier kan ikke være tomme.</p>\n                ) : null}\n\n                {fett ? (\n                  <p>\n                    ** Annet fett enn fiskefett verdien kan være høyst 10 g/100\n                    g.\n                  </p>\n                ) : null}\n\n                {karbohydrat ? (\n                  <p>** Sukkerarter verdien kan være høyst 5 g/100 g.</p>\n                ) : null}\n                {salt ? (\n                  <p>** Salt verdien kan være høyst 2.5 g/100 g.</p>\n                ) : null}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om frivillig merking av næringsmidler med Nøkkelhullet:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for ernæringspåstander if there are all true results */}\n        {buttonClicked && (\n          <div\n            className={\n              lowSugars && withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-all\"\n                : !lowSugars && !withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-none\"\n                : \"container ernæringspåstander-food-result-container-some\"\n            }\n          >\n            <h5>Ernæringspåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                {/* Low sugars */}\n                {lowSugars ? (\n                  <div>\n                    <p>** Lavt sukkerinnhold:</p>\n                    <p>\n                      Dette produktet inneholder høyst 5 g sukkerarter per 100 g\n                      for næringsmidler i fast form, eller høyst 2,5 g\n                      sukkerarter per 100 ml for næringsmidler i flytende form\n                      og oppfyller kravet for \"Lavt sukkerinnhold\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Lavt sukkerinnhold\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        For faste næringsmidler, sukkerinnholdet må være høyst 5\n                        g per 100 g.\n                      </li>\n                      <li>\n                        For flytende næringsmidler, sukkerinnholdet må være\n                        høyst 2,5 g per 100 ml.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n\n                {/* No added sugars */}\n                {withNoAddedSugars ? (\n                  <div>\n                    <p>** Uten tilsatt sukker:</p>\n                    <p>\n                      Dette produktet er ikke tilsatt monosakkarider,\n                      disakkarider eller andre næringsmidler på grunn av deres\n                      søtende egenskaper og oppfyller kravet for \"Uten tilsatt\n                      sukker\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Uten tilsatt sukker\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        Produktet må ikke være tilsatt monosakkarider,\n                        disakkarider eller andre næringsmidler på grunn av deres\n                        søtende egenskaper.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"ernaerings\")}\n                />\n              </div>\n            </div>\n            {infoErnaerings ? (\n              // Information section for \"Ernæringspåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"ernaerings\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for Helsepåstander results  */}\n        {showHelsepåstander && (\n          <div\n            className=\"container helsepåstander-food-result-container\"\n            style={{ background: \"#f2f0b5\" }}\n          >\n            <h5>Helsepåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Under utvikling. </p>\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"helsepåstander\")}\n                />\n              </div>\n            </div>\n            {infoHelsepåstander ? (\n              // Information section for \"Helsepåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"helsepåstander\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"15px\" }}></div>\n        {/* conditional rendering for the buttons using showButtons state */}\n        {showButtons && (\n          <div className=\"d-flex justify-content-between\">\n            {/* Save button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-save\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Lagre produkt\n            </button>\n\n            {/* Share button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-share\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Del produkt\n            </button>\n\n            {/* Add a new product button */}\n            <button\n              className=\"btn btn-primary\"\n              onClick={() => window.location.reload()}\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-plus\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Legg til et nytt produkt\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Kategori22b;\n","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Kategori22c.js",["451","452","453","454"],[],"import React from \"react\";\nimport { useState, useEffect } from \"react\"; // import the useState and useeffect hook.\nimport { faCircleExclamation } from \"@fortawesome/free-solid-svg-icons\"; // import an icon.\nimport { faBan } from \"@fortawesome/free-solid-svg-icons\";\nimport { faSave, faShare, faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"; // import FontAwesomeIcon component.\nimport Tooltip from \"@mui/material/Tooltip\"; // import Tooltip component.\nimport keyholeLgog from \"./circle-keyhole-logo.png\"; // import an image\nimport { faCircleInfo } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport { faXmarkCircle } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport Select from \"react-select\"; // import Select component\n\nconst Kategori22c = () => {\n  // State variables for showing results and empty result message\n  const [showNokkelhulletResults, setShowNokkelhulletResults] = useState(null);\n  const [showErnaeringsResults, setShowErnaeringsResults] = useState(null);\n  const [showHelsepåstander, setShowHelsepåstander] = useState(null);\n  const [showEmptyResult, setShowEmptyResult] = useState(\"\"); // initialize state variable for showing empty result message.\n\n  //state variable to store the user's food type selection (solid or liquid) and the low sugars claim result\n  const [foodType, setFoodType] = useState(\"\");\n  const [lowSugars, setLowSugars] = useState(null);\n\n  //state variable to track whether the product meets the WITH NO ADDED SUGARS claim or not\n  const [withNoAddedSugars, setWithNoAddedSugars] = useState(false);\n\n  // State variable for tracking if the button is clicked\n  const [buttonClicked, setButtonClicked] = useState(false);\n\n  // useEffect hook for checking the condition for the \"WITH NO ADDED SUGARS\" claim when button is clicked\n  useEffect(() => {\n    if (buttonClicked) {\n      if (withNoAddedSugars) {\n        setShowErnaeringsResults(true);\n      } else {\n        setShowErnaeringsResults(false);\n      }\n    }\n  }, [withNoAddedSugars, buttonClicked]);\n\n  //state for controlling the buttons' visibility\n  const [showButtons, setShowButtons] = useState(false);\n\n  // State variables to control the visibility of the information sections\n  const [infoNokkelhullet, setInfoNokkelhullet] = useState(false);\n  const [infoErnaerings, setInfoErnaerings] = useState(false);\n  const [infoHelsepåstander, setInfoHelsepåstander] = useState(false);\n\n  // Function to show an information section based on the container parameter\n  const onClickInfo = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(true);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(true);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(true);\n    }\n  };\n\n  // Function to hide an information section based on the container parameter\n  const onClickClose = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(false);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(false);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(false);\n    }\n  };\n\n  // State variables for handling input fields and validation errors\n  const [energikj, setEnergikj] = useState(false);\n  const [energikcal, setEnergikcal] = useState(false);\n\n  const [fett, setFett] = useState(false);\n  const [fettNull, setFettNull] = useState(false);\n  const [mettede, setMettede] = useState(false);\n  const [karbohydrat, setKarbohydrat] = useState(false);\n  const [karbohydratNull, setKarbohydratNull] = useState(false);\n  const [hvoravSukkerarter, setHvoravSukkerarter] = useState(false);\n  const [kostfiber, setKostfiber] = useState(false);\n  const [protein, setProtein] = useState(false);\n  const [salt, setSalt] = useState(false);\n  const [saltNull, setSaltNull] = useState(false);\n\n  // State variable for storing nutrition information entered by user\n  const [nutrition, setNutrition] = useState({\n    energikj: \"\",\n    energikcal: \"\",\n    fett: \"\",\n    mettede: \"\",\n    karbohydrat: \"\",\n    hvoravSukkerarter: \"\",\n    kostfiber: \"\",\n    protein: \"\",\n    salt: \"\",\n  });\n\n  // Handler for updating nutrition state/state variable based on input field changes/input values\n  const changeHandle = (event) => {\n    console.log(\"changeHandle ===\", event.target, event.target.value);\n    setNutrition({\n      ...nutrition,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  // define function to handle form submission\n  const onClick = (e) => {\n    e.preventDefault();\n    setButtonClicked(true);\n    setShowHelsepåstander(true);\n    setShowButtons(true);\n\n    console.log(\"onclick ===\", selectsPart, nutrition);\n\n    // Check if all required fields are filled out and within valid ranges\n    // The if statement checks if all required inputs are non-empty and meet the nutritional requirements\n    if (\n      nutrition.fett !== \"\" &&\n      nutrition.fett <= 10 &&\n      nutrition.mettede !== \"\" &&\n      nutrition.karbohydrat !== \"\" &&\n      nutrition.karbohydrat <= 5 &&\n      nutrition.hvoravSukkerarter !== \"\" &&\n      nutrition.kostfiber !== \"\" &&\n      nutrition.protein !== \"\" &&\n      nutrition.salt !== \"\" &&\n      nutrition.salt <= 3\n    ) {\n      // If all requirements are met, display the nutrition results\n      setShowNokkelhulletResults(true);\n      // Hide any empty result messages or error messages\n      setShowEmptyResult(false);\n\n      // Check if the user selected \"energikj\" and if nutrition input lable of \"energikj\" is not empty\n      if (selectsPart === \"energikj\" && nutrition.energikj !== \"\") {\n        setEnergikj(false);\n      }\n\n      // Check if the user selected \"energikcal\" and if nutrition input lable of \"energikcal\" is not empty\n      if (selectsPart === \"energikcal\" && nutrition.energikcal !== \"\") {\n        setEnergikcal(false);\n      }\n      // Reset all input validation errors\n      setFett(false);\n      setFettNull(false);\n      setMettede(false);\n      setKarbohydrat(false);\n      setKarbohydratNull(false);\n      setHvoravSukkerarter(false);\n      setKostfiber(false);\n      setProtein(false);\n      setSalt(false);\n      setSaltNull(false);\n      // If the user has not selected any nutrients, set errors accordingly\n      // Check each nutrition value to see if it is missing or negative\n      // show input validation errors if any input is missing or negative.\n    } else {\n      if (selectsPart === \"energikj\") {\n        console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n        if (nutrition.energikj === \"\" || nutrition.energikj < 0) {\n          console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n          setEnergikj(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikj(false);\n        }\n      }\n\n      if (selectsPart === \"energikcal\") {\n        console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n        if (nutrition.energikcal === \"\" || nutrition.energikcal < 0) {\n          console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n          setEnergikcal(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikcal(false);\n        }\n      }\n\n      // repeat for each nutrition value...\n      if (nutrition.fett === \"\" || nutrition.fett < 0) {\n        setFettNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setFettNull(false);\n      }\n      if (nutrition.fett > 10) {\n        setFett(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setFett(false);\n      }\n\n      if (nutrition.mettede === \"\" || nutrition.mettede < 0) {\n        setMettede(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setMettede(false);\n      }\n\n      if (nutrition.karbohydrat === \"\" || nutrition.karbohydrat < 0) {\n        setKarbohydratNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKarbohydratNull(false);\n      }\n      if (nutrition.karbohydrat > 5) {\n        setKarbohydrat(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setKarbohydrat(false);\n      }\n\n      if (\n        nutrition.hvoravSukkerarter === \"\" ||\n        nutrition.hvoravSukkerarter < 0\n      ) {\n        setHvoravSukkerarter(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setHvoravSukkerarter(false);\n      }\n\n      if (nutrition.kostfiber === \"\" || nutrition.kostfiber < 0) {\n        setKostfiber(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKostfiber(false);\n      }\n\n      if (nutrition.protein === \"\" || nutrition.protein < 0) {\n        setProtein(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setProtein(false);\n      }\n\n      if (nutrition.salt === \"\" || nutrition.salt < 0) {\n        setSaltNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setSaltNull(false);\n      }\n      if (nutrition.salt > 3) {\n        setSalt(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setSalt(false);\n      }\n    }\n\n    // Check for the \"LOW SUGARS\" claim\n    if (foodType === \"solid\" && parseFloat(nutrition.karbohydrat) <= 5) {\n      setLowSugars(true);\n    } else if (\n      foodType === \"liquid\" &&\n      parseFloat(nutrition.karbohydrat) <= 2.5\n    ) {\n      setLowSugars(true);\n    } else {\n      setLowSugars(false);\n    }\n\n    // Check the condition for the \"WITH NO ADDED SUGARS\" nutrition claim\n    if (nutrition.hvoravSukkerarter === \"0\" && nutrition.karbohydrat > 0) {\n      setWithNoAddedSugars(true);\n    } else {\n      setWithNoAddedSugars(false);\n    }\n  };\n\n  // create an array of energy units to select from\n  const selectUnit = [\n    {\n      value: \"energikj\",\n      label: \"(kj)\",\n    },\n    {\n      value: \"energikcal\",\n      label: \"(kcal)\",\n    },\n  ];\n\n  // Declare a state variable for the select dropdown.\n  const [selectsPart, setSelectPart] = useState(\"\");\n\n  // A function to handle changes to the select dropdown energy unit\n  const handlerPart = (event) => {\n    const inputVal = document.getElementsByName(event.value);\n    console.log(\"handlerPart ===\", event, nutrition, inputVal);\n    setSelectPart(event.value);\n  };\n\n  //create an array of food types to select from\n  const foodTypes = [\n    {\n      value: \"solid\",\n      label: \"Fast form\",\n    },\n    {\n      value: \"liquid\",\n      label: \"Flytende form\",\n    },\n  ];\n\n  return (\n    <div className=\"row\">\n      {/* This div creates a column layout for the left side of the table */}\n      <div className=\"col-md-6\">\n        {/* the selector (dropdown menu) for choosing the food type. */}\n        <div className=\"form-group\">\n          <label htmlFor=\"foodType\">Velg type matvare:</label>\n          <Select\n            className=\"form-control\"\n            id=\"foodType\"\n            options={foodTypes}\n            onChange={(e) => setFoodType(e.value)} // update the onFoodTypeChange function to directly set the food type state\n            placeholder=\"Velg type matvare\"\n          />\n        </div>\n\n        <h5>\n          Næringsinnhold per 100{\" \"}\n          {foodType === \"solid\" ? \"g\" : foodType === \"liquid\" ? \"ml\" : \"g/ml\"}\n        </h5>\n\n        {/* This div adds a light background color to the table */}\n        <div className=\"bg-light\">\n          {/* This table shows the nutritional information */}\n          <table className=\"table table-striped\">\n            {/* The table header */}\n            <thead>\n              <tr>\n                <th scope=\"col\" className=\"table-font\">\n                  Energi eller næringsstoff\n                </th>\n                <th scope=\"col\" className=\"table-font\">\n                  Mengde\n                </th>\n              </tr>\n            </thead>\n\n            {/* The table body */}\n            <tbody>\n              {/* This row shows the energy content */}\n              <tr className={(energikj, energikcal ? \"alert-box\" : null)}>\n                <th scope=\"row\" className=\"table-font\">\n                  {/* An icon with a tooltip to indicate missing values in energy parameters */}\n                  {energikj && energikcal ? (\n                    <Tooltip\n                      title=\"Mangler verdi i energi (kJ/Kcal) parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  {/* This div displays the energy label and unit */}\n                  <div className=\"row\">\n                    <div className=\"col-md-3\">\n                      <label for=\"energiunit\" class=\"form-label\">\n                        Energi\n                      </label>\n                    </div>\n                    {/* A dropdown menu for selecting the energy unit */}\n                    <div className=\"col-md-6\">\n                      <Select\n                        placeholder={<div>Velg enhet</div>}\n                        className=\"form-select-md mb-3\"\n                        options={selectUnit}\n                        onChange={(e) => handlerPart(e)}\n                      />\n                    </div>\n                  </div>\n                </th>\n                {/* An input field for entering the energy value */}\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name={selectsPart}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* Additional rows for other nutrient selections */}\n              {/* This row shows the fat content */}\n              <tr\n                className={\n                  fett ? \"alert-box\" : null || fettNull ? \"alert-box\" : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {fett ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden fett. Mengden på fett må være lavere enn eller lik 10 g / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {fettNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i fett parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Fett (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"fett\"\n                    value={nutrition.fett}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the saturated fat content */}\n              <tr className={mettede ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {mettede ? (\n                    <Tooltip\n                      title=\"Mangler verdi i mettede fettsyrer parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Mettede fettsyrer (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"mettede\"\n                    value={nutrition.mettede}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the carbohydrate content */}\n              <tr\n                className={\n                  karbohydrat\n                    ? \"alert-box\"\n                    : null || karbohydratNull\n                    ? \"alert-box\"\n                    : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {karbohydrat ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden sukkerarter. Mengden på sukkerarter må være lavere enn eller lik 5 g / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {karbohydratNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i karbohydrat parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Karbohydrat (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"karbohydrat\"\n                    value={nutrition.karbohydrat}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows hvorav sukkerarter content */}\n              <tr className={hvoravSukkerarter ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {hvoravSukkerarter ? (\n                    <Tooltip\n                      title=\"Mangler verdi i hvorav sukkerarter parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Hvorav tilsatte sukkerarter (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"hvoravSukkerarter\"\n                    value={nutrition.hvoravSukkerarter}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows kostfiber content */}\n              <tr className={kostfiber ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {kostfiber ? (\n                    <Tooltip\n                      title=\"Mangler verdi i kostfiber parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Kostfiber (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"kostfiber\"\n                    value={nutrition.kostfiber}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the protein content */}\n              <tr className={protein ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {protein ? (\n                    <Tooltip\n                      title=\"Mangler verdi i protein parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Protein (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"protein\"\n                    value={nutrition.protein}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows salt content */}\n              <tr\n                className={\n                  salt ? \"alert-box\" : null || saltNull ? \"alert-box\" : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {salt ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden salt. Mengden på salt må være lavere enn eller lik 3 g / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {saltNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i salt parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Salt (g)\n                </th>\n                <td colSpan=\"2\">\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"salt\"\n                    value={nutrition.salt}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n\n        {/* Button that submits the form and calls the onClick function */}\n        <div className=\"col-12 button-div\">\n          <button\n            type=\"submit\"\n            className=\"btn btn-primary btn-lg button-search\"\n            onClick={onClick}\n          >\n            Beregn\n          </button>\n        </div>\n      </div>\n\n      <div className=\"col-md-6\">\n        {/* positive results nøkkelhullet container\" */}\n        {showNokkelhulletResults ? (\n          <div className=\"container nøkkelhullet-food-result-container\">\n            {/* An image with class \"keyhole-logo\" and alt text \"keyhole logo\" */}\n            <img\n              src={keyholeLgog}\n              className=\"keyhole-logo img-fluid\"\n              alt=\"keyhole logo\"\n            />\n            {/* A heading with text \"Nøkkelhullet\" */}\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir Nøkkelhullet. </p>\n              </div>\n              <div className=\"col-md-2\">\n                {/* FontAwesome icon with event listener to show the \"Nøkkelhullet\" information section */}\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  {/* A paragraph with a link to Lovdata's \"Forskrift om frivillig merking a nœringsmidler med Nokkellhullet\" */}\n                  <p>\n                    Les mer om hvilke krav det stilles for merking av\n                    Nokkellhullet på Lovdatas \"Forskrift om frivillig merking a\n                    nœringsmidler med Nokkellhullet\":\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  {/* FontAwesome icon with event listener to hide the \"Nøkkelhullet\" information section */}\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        ) : null}\n        {/*Negative results nøkkelhullet container\" */}\n        {showNokkelhulletResults === false && (\n          <div className=\"container nøkkelhullet-food-negResult-container\">\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir ikke Nøkkelhullet.</p>\n                {showEmptyResult ? (\n                  <p>** Obligatoriske næringsverdier kan ikke være tomme.</p>\n                ) : null}\n\n                {fett ? (\n                  <p>\n                    ** Annet fett enn fiskefett verdien kan være høyst 10 g/100\n                    g.\n                  </p>\n                ) : null}\n\n                {karbohydrat ? (\n                  <p>** Sukkerarter verdien kan være høyst 5 g/100 g.</p>\n                ) : null}\n                {salt ? <p>** Salt verdien kan være høyst 3 g/100 g.</p> : null}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om frivillig merking av næringsmidler med Nøkkelhullet:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for ernæringspåstander if there are all true results */}\n        {buttonClicked && (\n          <div\n            className={\n              lowSugars && withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-all\"\n                : !lowSugars && !withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-none\"\n                : \"container ernæringspåstander-food-result-container-some\"\n            }\n          >\n            <h5>Ernæringspåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                {/* Low sugars */}\n                {lowSugars ? (\n                  <div>\n                    <p>** Lavt sukkerinnhold:</p>\n                    <p>\n                      Dette produktet inneholder høyst 5 g sukkerarter per 100 g\n                      for næringsmidler i fast form, eller høyst 2,5 g\n                      sukkerarter per 100 ml for næringsmidler i flytende form\n                      og oppfyller kravet for \"Lavt sukkerinnhold\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Lavt sukkerinnhold\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        For faste næringsmidler, sukkerinnholdet må være høyst 5\n                        g per 100 g.\n                      </li>\n                      <li>\n                        For flytende næringsmidler, sukkerinnholdet må være\n                        høyst 2,5 g per 100 ml.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n\n                {/* No added sugars */}\n                {withNoAddedSugars ? (\n                  <div>\n                    <p>** Uten tilsatt sukker:</p>\n                    <p>\n                      Dette produktet er ikke tilsatt monosakkarider,\n                      disakkarider eller andre næringsmidler på grunn av deres\n                      søtende egenskaper og oppfyller kravet for \"Uten tilsatt\n                      sukker\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Uten tilsatt sukker\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        Produktet må ikke være tilsatt monosakkarider,\n                        disakkarider eller andre næringsmidler på grunn av deres\n                        søtende egenskaper.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"ernaerings\")}\n                />\n              </div>\n            </div>\n            {infoErnaerings ? (\n              // Information section for \"Ernæringspåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"ernaerings\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for Helsepåstander results  */}\n        {showHelsepåstander && (\n          <div\n            className=\"container helsepåstander-food-result-container\"\n            style={{ background: \"#f2f0b5\" }}\n          >\n            <h5>Helsepåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Under utvikling. </p>\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"helsepåstander\")}\n                />\n              </div>\n            </div>\n            {infoHelsepåstander ? (\n              // Information section for \"Helsepåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"helsepåstander\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"15px\" }}></div>\n        {/* conditional rendering for the buttons using showButtons state */}\n        {showButtons && (\n          <div className=\"d-flex justify-content-between\">\n            {/* Save button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-save\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Lagre produkt\n            </button>\n\n            {/* Share button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-share\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Del produkt\n            </button>\n\n            {/* Add a new product button */}\n            <button\n              className=\"btn btn-primary\"\n              onClick={() => window.location.reload()}\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-plus\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Legg til et nytt produkt\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Kategori22c;\n","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Kategori22d.js",["455","456","457","458"],[],"import React from \"react\";\nimport { useState, useEffect } from \"react\"; // import the useState and useeffect hook.\nimport { faCircleExclamation } from \"@fortawesome/free-solid-svg-icons\"; // import an icon.\nimport { faBan } from \"@fortawesome/free-solid-svg-icons\";\nimport { faSave, faShare, faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"; // import FontAwesomeIcon component.\nimport Tooltip from \"@mui/material/Tooltip\"; // import Tooltip component.\nimport keyholeLgog from \"./circle-keyhole-logo.png\"; // import an image\nimport { faCircleInfo } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport { faXmarkCircle } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport Select from \"react-select\"; // import Select component\n\nconst Kategori22d = () => {\n  // State variables for showing/hiding results and empty result message\n  const [showNokkelhulletResults, setShowNokkelhulletResults] = useState(null);\n  const [showErnaeringsResults, setShowErnaeringsResults] = useState(null);\n  const [showHelsepåstander, setShowHelsepåstander] = useState(null);\n  const [showEmptyResult, setShowEmptyResult] = useState(\"\"); // initialize state variable for showing empty result message.\n\n  //state variable to store the user's food type selection (solid or liquid) and the low sugars claim result\n  const [foodType, setFoodType] = useState(\"\");\n  const [lowSugars, setLowSugars] = useState(null);\n\n  //state variable to track whether the product meets the WITH NO ADDED SUGARS claim or not\n  const [withNoAddedSugars, setWithNoAddedSugars] = useState(false);\n\n  // State variable for tracking if the button is clicked\n  const [buttonClicked, setButtonClicked] = useState(false);\n\n  // useEffect hook for checking the condition for the \"WITH NO ADDED SUGARS\" claim when button is clicked\n  useEffect(() => {\n    if (buttonClicked) {\n      if (withNoAddedSugars) {\n        setShowErnaeringsResults(true);\n      } else {\n        setShowErnaeringsResults(false);\n      }\n    }\n  }, [withNoAddedSugars, buttonClicked]);\n\n  //state for controlling the buttons' visibility\n  const [showButtons, setShowButtons] = useState(false);\n\n  // State variables to control the visibility of the information sections\n  const [infoNokkelhullet, setInfoNokkelhullet] = useState(false);\n  const [infoErnaerings, setInfoErnaerings] = useState(false);\n  const [infoHelsepåstander, setInfoHelsepåstander] = useState(false);\n\n  // Function to show an information section based on the container parameter\n  const onClickInfo = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(true);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(true);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(true);\n    }\n  };\n\n  // Function to hide an information section based on the container parameter\n  const onClickClose = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(false);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(false);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(false);\n    }\n  };\n\n  // State variables for handling input fields and validation errors\n  const [energikj, setEnergikj] = useState(false);\n  const [energikcal, setEnergikcal] = useState(false);\n\n  const [fett, setFett] = useState(false);\n  const [fettNull, setFettNull] = useState(false);\n  const [mettede, setMettede] = useState(false);\n  const [karbohydrat, setKarbohydrat] = useState(false);\n  const [karbohydratNull, setKarbohydratNull] = useState(false);\n  const [hvoravSukkerarter, setHvoravSukkerarter] = useState(false);\n  const [kostfiber, setKostfiber] = useState(false);\n  const [protein, setProtein] = useState(false);\n  const [salt, setSalt] = useState(false);\n  const [saltNull, setSaltNull] = useState(false);\n\n  // State variable for storing nutrition information entered by user\n  const [nutrition, setNutrition] = useState({\n    energikj: \"\",\n    energikcal: \"\",\n    fett: \"\",\n    mettede: \"\",\n    karbohydrat: \"\",\n    hvoravSukkerarter: \"\",\n    kostfiber: \"\",\n    protein: \"\",\n    salt: \"\",\n  });\n\n  // Handler for updating nutrition state/state variable based on input field changes/input values\n  const changeHandle = (event) => {\n    console.log(\"changeHandle ===\", event.target, event.target.value);\n    setNutrition({\n      ...nutrition,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  // define function to handle form submission\n  const onClick = (e) => {\n    e.preventDefault();\n    setButtonClicked(true);\n    setShowHelsepåstander(true);\n    setShowButtons(true);\n\n    console.log(\"onclick ===\", selectsPart, nutrition);\n\n    // Check if all required fields are filled out and within valid ranges\n    // The if statement checks if all required inputs are non-empty and meet the nutritional requirements\n    if (\n      nutrition.fett !== \"\" &&\n      nutrition.fett <= 10 &&\n      nutrition.mettede !== \"\" &&\n      nutrition.karbohydrat !== \"\" &&\n      nutrition.karbohydrat <= 5 &&\n      nutrition.hvoravSukkerarter !== \"\" &&\n      nutrition.kostfiber !== \"\" &&\n      nutrition.protein !== \"\" &&\n      nutrition.salt !== \"\" &&\n      nutrition.salt <= 3\n    ) {\n      // If all requirements are met, display the nutrition results\n      setShowNokkelhulletResults(true);\n      // Hide any empty result messages or error messages\n      setShowEmptyResult(false);\n\n      // Check if the user selected \"energikj\" and if nutrition input lable of \"energikj\" is not empty\n      if (selectsPart === \"energikj\" && nutrition.energikj !== \"\") {\n        setEnergikj(false);\n      }\n\n      // Check if the user selected \"energikcal\" and if nutrition input lable of \"energikcal\" is not empty\n      if (selectsPart === \"energikcal\" && nutrition.energikcal !== \"\") {\n        setEnergikcal(false);\n      }\n      // Reset all input validation errors\n      setFett(false);\n      setFettNull(false);\n      setMettede(false);\n      setKarbohydrat(false);\n      setKarbohydratNull(false);\n      setHvoravSukkerarter(false);\n      setKostfiber(false);\n      setProtein(false);\n      setSalt(false);\n      setSaltNull(false);\n\n      // If the user has not selected any nutrients, set errors accordingly\n      // Check each nutrition value to see if it is missing or negative\n      // show input validation errors if any input is missing or negative.\n    } else {\n      if (selectsPart === \"energikj\") {\n        console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n        if (nutrition.energikj === \"\" || nutrition.energikj < 0) {\n          console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n          setEnergikj(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikj(false);\n        }\n      }\n\n      if (selectsPart === \"energikcal\") {\n        console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n        if (nutrition.energikcal === \"\" || nutrition.energikcal < 0) {\n          console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n          setEnergikcal(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikcal(false);\n        }\n      }\n\n      // repeat for each nutrition value...\n\n      if (nutrition.fett === \"\" || nutrition.fett < 0) {\n        setFettNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setFettNull(false);\n      }\n      if (nutrition.fett > 10) {\n        setFett(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setFett(false);\n      }\n\n      if (nutrition.mettede === \"\" || nutrition.mettede < 0) {\n        setMettede(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setMettede(false);\n      }\n\n      if (nutrition.karbohydrat === \"\" || nutrition.karbohydrat < 0) {\n        setKarbohydratNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKarbohydratNull(false);\n      }\n      if (nutrition.karbohydrat > 5) {\n        setKarbohydrat(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setKarbohydrat(false);\n      }\n\n      if (\n        nutrition.hvoravSukkerarter === \"\" ||\n        nutrition.hvoravSukkerarter < 0\n      ) {\n        setHvoravSukkerarter(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setHvoravSukkerarter(false);\n      }\n\n      if (nutrition.kostfiber === \"\" || nutrition.kostfiber < 0) {\n        setKostfiber(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKostfiber(false);\n      }\n\n      if (nutrition.protein === \"\" || nutrition.protein < 0) {\n        setProtein(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setProtein(false);\n      }\n\n      if (nutrition.salt === \"\" || nutrition.salt < 0) {\n        setSaltNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setSaltNull(false);\n      }\n      if (nutrition.salt > 3) {\n        setSalt(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setSalt(false);\n      }\n    }\n\n    // Check for the \"LOW SUGARS\" claim\n    if (foodType === \"solid\" && parseFloat(nutrition.karbohydrat) <= 5) {\n      setLowSugars(true);\n    } else if (\n      foodType === \"liquid\" &&\n      parseFloat(nutrition.karbohydrat) <= 2.5\n    ) {\n      setLowSugars(true);\n    } else {\n      setLowSugars(false);\n    }\n\n    // Check the condition for the \"WITH NO ADDED SUGARS\" nutrition claim\n    if (nutrition.hvoravSukkerarter === \"0\" && nutrition.karbohydrat > 0) {\n      setWithNoAddedSugars(true);\n    } else {\n      setWithNoAddedSugars(false);\n    }\n  };\n\n  // create an array of energy units to select from\n  const selectUnit = [\n    {\n      value: \"energikj\",\n      label: \"(kj)\",\n    },\n    {\n      value: \"energikcal\",\n      label: \"(kcal)\",\n    },\n  ];\n\n  // Declare a state variable for the select dropdown.\n  const [selectsPart, setSelectPart] = useState(\"\");\n\n  // A function to handle changes to the select dropdown energy unit\n  const handlerPart = (event) => {\n    const inputVal = document.getElementsByName(event.value);\n    console.log(\"handlerPart ===\", event, nutrition, inputVal);\n    setSelectPart(event.value);\n  };\n\n  //create an array of food types to select from\n  const foodTypes = [\n    {\n      value: \"solid\",\n      label: \"Fast form\",\n    },\n    {\n      value: \"liquid\",\n      label: \"Flytende form\",\n    },\n  ];\n\n  return (\n    <div className=\"row\">\n      {/* This div creates a column layout for the left side of the table */}\n      <div className=\"col-md-6\">\n        {/* the selector (dropdown menu) for choosing the food type. */}\n        <div className=\"form-group\">\n          <label htmlFor=\"foodType\">Velg type matvare:</label>\n          <Select\n            className=\"form-control\"\n            id=\"foodType\"\n            options={foodTypes}\n            onChange={(e) => setFoodType(e.value)} // update the onFoodTypeChange function to directly set the food type state\n            placeholder=\"Velg type matvare\"\n          />\n        </div>\n\n        <h5>\n          Næringsinnhold per 100{\" \"}\n          {foodType === \"solid\" ? \"g\" : foodType === \"liquid\" ? \"ml\" : \"g/ml\"}\n        </h5>\n\n        {/* This div adds a light background color to the table */}\n        <div className=\"bg-light\">\n          {/* This table shows the nutritional information */}\n          <table className=\"table table-striped\">\n            {/* The table header */}\n            <thead>\n              <tr>\n                <th scope=\"col\" className=\"table-font\">\n                  Energi eller næringsstoff\n                </th>\n                <th scope=\"col\" className=\"table-font\">\n                  Mengde\n                </th>\n              </tr>\n            </thead>\n\n            {/* The table body */}\n            <tbody>\n              {/* This row shows the energy content */}\n              <tr className={(energikj, energikcal ? \"alert-box\" : null)}>\n                <th scope=\"row\" className=\"table-font\">\n                  {/* An icon with a tooltip to indicate missing values in energy parameters */}\n                  {energikj && energikcal ? (\n                    <Tooltip\n                      title=\"Mangler verdi i energi (kJ/Kcal) parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  {/* This div displays the energy label and unit */}\n                  <div className=\"row\">\n                    <div className=\"col-md-3\">\n                      <label for=\"energiunit\" class=\"form-label\">\n                        Energi\n                      </label>\n                    </div>\n                    {/* A dropdown menu for selecting the energy unit */}\n                    <div className=\"col-md-6\">\n                      <Select\n                        placeholder={<div>Velg enhet</div>}\n                        className=\"form-select-md mb-3\"\n                        options={selectUnit}\n                        onChange={(e) => handlerPart(e)}\n                      />\n                    </div>\n                  </div>\n                </th>\n                {/* An input field for entering the energy value */}\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name={selectsPart}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* Additional rows for other nutrient selections */}\n              {/* This row shows the fat content */}\n              <tr\n                className={\n                  fett ? \"alert-box\" : null || fettNull ? \"alert-box\" : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {fett ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden fett. Mengden på fett må være lavere enn eller lik 10 g / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {fettNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i fett parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Fett (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"fett\"\n                    value={nutrition.fett}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the saturated fat content */}\n              <tr className={mettede ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {mettede ? (\n                    <Tooltip\n                      title=\"Mangler verdi i mettede fettsyrer parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Mettede fettsyrer (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"mettede\"\n                    value={nutrition.mettede}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the carbohydrate content */}\n              <tr\n                className={\n                  karbohydrat\n                    ? \"alert-box\"\n                    : null || karbohydratNull\n                    ? \"alert-box\"\n                    : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {karbohydrat ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden sukkerarter. Mengden på sukkerarter må være lavere enn eller lik 5 g / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {karbohydratNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i karbohydrat parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Karbohydrat (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"karbohydrat\"\n                    value={nutrition.karbohydrat}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows hvorav sukkerarter content */}\n              <tr className={hvoravSukkerarter ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {hvoravSukkerarter ? (\n                    <Tooltip\n                      title=\"Mangler verdi i hvorav sukkerarter parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Hvorav tilsatte sukkerarter (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"hvoravSukkerarter\"\n                    value={nutrition.hvoravSukkerarter}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows kostfiber content */}\n              <tr className={kostfiber ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {kostfiber ? (\n                    <Tooltip\n                      title=\"Mangler verdi i kostfiber parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Kostfiber (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"kostfiber\"\n                    value={nutrition.kostfiber}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the protein content */}\n              <tr className={protein ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {protein ? (\n                    <Tooltip\n                      title=\"Mangler verdi i protein parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Protein (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"protein\"\n                    value={nutrition.protein}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows salt content */}\n              <tr\n                className={\n                  salt ? \"alert-box\" : null || saltNull ? \"alert-box\" : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {salt ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden salt. Mengden på salt må være lavere enn eller lik 3 g / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {saltNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i salt parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Salt (g)\n                </th>\n                <td colSpan=\"2\">\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"salt\"\n                    value={nutrition.salt}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n\n        {/* Button that submits the form and calls the onClick function */}\n        <div className=\"col-12 button-div\">\n          <button\n            type=\"submit\"\n            className=\"btn btn-primary btn-lg button-search\"\n            onClick={onClick}\n          >\n            Beregn\n          </button>\n        </div>\n      </div>\n\n      <div className=\"col-md-6\">\n        {/* positive results nøkkelhullet container\" */}\n        {showNokkelhulletResults ? (\n          <div className=\"container nøkkelhullet-food-result-container\">\n            {/* An image with class \"keyhole-logo\" and alt text \"keyhole logo\" */}\n            <img\n              src={keyholeLgog}\n              className=\"keyhole-logo img-fluid\"\n              alt=\"keyhole logo\"\n            />\n            {/* A heading with text \"Nøkkelhullet\" */}\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir Nøkkelhullet. </p>\n              </div>\n              <div className=\"col-md-2\">\n                {/* FontAwesome icon with event listener to show the \"Nøkkelhullet\" information section */}\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  {/* A paragraph with a link to Lovdata's \"Forskrift om frivillig merking a nœringsmidler med Nokkellhullet\" */}\n                  <p>\n                    Les mer om hvilke krav det stilles for merking av\n                    Nokkellhullet på Lovdatas \"Forskrift om frivillig merking a\n                    nœringsmidler med Nokkellhullet\":\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  {/* FontAwesome icon with event listener to hide the \"Nøkkelhullet\" information section */}\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        ) : null}\n        {/*Negative results nøkkelhullet container\" */}\n        {showNokkelhulletResults === false && (\n          <div className=\"container nøkkelhullet-food-negResult-container\">\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir ikke Nøkkelhullet.</p>\n                {showEmptyResult ? (\n                  <p>** Obligatoriske næringsverdier kan ikke være tomme.</p>\n                ) : null}\n\n                {fett ? (\n                  <p>\n                    ** Annet fett enn fiskefett verdien kan være høyst 10 g/100\n                    g.\n                  </p>\n                ) : null}\n\n                {karbohydrat ? (\n                  <p>** Sukkerarter verdien kan være høyst 5 g/100 g.</p>\n                ) : null}\n                {salt ? <p>** Salt verdien kan være høyst 3 g/100 g.</p> : null}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om frivillig merking av næringsmidler med Nøkkelhullet:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for ernæringspåstander if there are all true results */}\n        {buttonClicked && (\n          <div\n            className={\n              lowSugars && withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-all\"\n                : !lowSugars && !withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-none\"\n                : \"container ernæringspåstander-food-result-container-some\"\n            }\n          >\n            <h5>Ernæringspåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                {/* Low sugars */}\n                {lowSugars ? (\n                  <div>\n                    <p>** Lavt sukkerinnhold:</p>\n                    <p>\n                      Dette produktet inneholder høyst 5 g sukkerarter per 100 g\n                      for næringsmidler i fast form, eller høyst 2,5 g\n                      sukkerarter per 100 ml for næringsmidler i flytende form\n                      og oppfyller kravet for \"Lavt sukkerinnhold\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Lavt sukkerinnhold\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        For faste næringsmidler, sukkerinnholdet må være høyst 5\n                        g per 100 g.\n                      </li>\n                      <li>\n                        For flytende næringsmidler, sukkerinnholdet må være\n                        høyst 2,5 g per 100 ml.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n\n                {/* No added sugars */}\n                {withNoAddedSugars ? (\n                  <div>\n                    <p>** Uten tilsatt sukker:</p>\n                    <p>\n                      Dette produktet er ikke tilsatt monosakkarider,\n                      disakkarider eller andre næringsmidler på grunn av deres\n                      søtende egenskaper og oppfyller kravet for \"Uten tilsatt\n                      sukker\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Uten tilsatt sukker\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        Produktet må ikke være tilsatt monosakkarider,\n                        disakkarider eller andre næringsmidler på grunn av deres\n                        søtende egenskaper.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"ernaerings\")}\n                />\n              </div>\n            </div>\n            {infoErnaerings ? (\n              // Information section for \"Ernæringspåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"ernaerings\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for Helsepåstander results  */}\n        {showHelsepåstander && (\n          <div\n            className=\"container helsepåstander-food-result-container\"\n            style={{ background: \"#f2f0b5\" }}\n          >\n            <h5>Helsepåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Under utvikling. </p>\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"helsepåstander\")}\n                />\n              </div>\n            </div>\n            {infoHelsepåstander ? (\n              // Information section for \"Helsepåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"helsepåstander\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"15px\" }}></div>\n        {/* conditional rendering for the buttons using showButtons state */}\n        {showButtons && (\n          <div className=\"d-flex justify-content-between\">\n            {/* Save button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-save\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Lagre produkt\n            </button>\n\n            {/* Share button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-share\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Del produkt\n            </button>\n\n            {/* Add a new product button */}\n            <button\n              className=\"btn btn-primary\"\n              onClick={() => window.location.reload()}\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-plus\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Legg til et nytt produkt\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Kategori22d;\n","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Kategori23.js",["459","460","461","462"],[],"import React from \"react\";\nimport { useState, useEffect } from \"react\"; // import the useState and useeffect hook.\nimport { faCircleExclamation } from \"@fortawesome/free-solid-svg-icons\"; // import an icon.\nimport { faBan } from \"@fortawesome/free-solid-svg-icons\";\nimport { faSave, faShare, faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"; // import FontAwesomeIcon component.\nimport Tooltip from \"@mui/material/Tooltip\"; // import Tooltip component.\nimport keyholeLgog from \"./circle-keyhole-logo.png\"; // import an image\nimport { faCircleInfo } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport { faXmarkCircle } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport Select from \"react-select\"; // import Select component\n\nconst Kategori23 = () => {\n  // State variables for showing results and empty result message\n  const [showNokkelhulletResults, setShowNokkelhulletResults] = useState(null);\n  const [showErnaeringsResults, setShowErnaeringsResults] = useState(null);\n  const [showHelsepåstander, setShowHelsepåstander] = useState(null);\n  const [showEmptyResult, setShowEmptyResult] = useState(\"\"); // initialize state variable for showing empty result message.\n\n  //state variable to store the user's food type selection (solid or liquid) and the low sugars claim result\n  const [foodType, setFoodType] = useState(\"\");\n  const [lowSugars, setLowSugars] = useState(null);\n\n  //state variable to track whether the product meets the WITH NO ADDED SUGARS claim or not\n  const [withNoAddedSugars, setWithNoAddedSugars] = useState(false);\n\n  // State variable for tracking if the button is clicked\n  const [buttonClicked, setButtonClicked] = useState(false);\n\n  // useEffect hook for checking the condition for the \"WITH NO ADDED SUGARS\" claim when button is clicked\n  useEffect(() => {\n    if (buttonClicked) {\n      if (withNoAddedSugars) {\n        setShowErnaeringsResults(true);\n      } else {\n        setShowErnaeringsResults(false);\n      }\n    }\n  }, [withNoAddedSugars, buttonClicked]);\n\n  //state for controlling the buttons' visibility\n  const [showButtons, setShowButtons] = useState(false);\n\n  // State variables to control the visibility of the information sections\n  const [infoNokkelhullet, setInfoNokkelhullet] = useState(false);\n  const [infoErnaerings, setInfoErnaerings] = useState(false);\n  const [infoHelsepåstander, setInfoHelsepåstander] = useState(false);\n\n  // Function to show an information section based on the container parameter\n  const onClickInfo = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(true);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(true);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(true);\n    }\n  };\n\n  // Function to hide an information section based on the container parameter\n  const onClickClose = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(false);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(false);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(false);\n    }\n  };\n\n  // State variables for handling input fields and validation errors\n  const [energikj, setEnergikj] = useState(false);\n  const [energikcal, setEnergikcal] = useState(false);\n\n  const [fett, setFett] = useState(false);\n  const [fettNull, setFettNull] = useState(false);\n  const [mettede, setMettede] = useState(false);\n  const [karbohydrat, setKarbohydrat] = useState(false);\n  const [hvoravSukkerarter, setHvoravSukkerarter] = useState(false);\n  const [kostfiber, setKostfiber] = useState(false);\n  const [protein, setProtein] = useState(false);\n  const [salt, setSalt] = useState(false);\n\n  // State variable for storing nutrition information entered by user\n  const [nutrition, setNutrition] = useState({\n    energikj: \"\",\n    energikcal: \"\",\n    fett: \"\",\n    mettede: \"\",\n    karbohydrat: \"\",\n    hvoravSukkerarter: \"\",\n    kostfiber: \"\",\n    protein: \"\",\n    salt: \"\",\n  });\n\n  // Handler for updating nutrition state/state variable based on input field changes/input values\n  const changeHandle = (event) => {\n    console.log(\"changeHandle ===\", event.target, event.target.value);\n    setNutrition({\n      ...nutrition,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  // define function to handle form submission\n  const onClick = (e) => {\n    e.preventDefault();\n    setButtonClicked(true);\n    setShowHelsepåstander(true);\n    setShowButtons(true);\n\n    console.log(\"onclick ===\", selectsPart, nutrition);\n\n    // Check if all required fields are filled out and within valid ranges\n    // The if statement checks if all required inputs are non-empty and meet the nutritional requirements\n    if (\n      nutrition.fett !== \"\" &&\n      nutrition.fett <= 10 &&\n      nutrition.mettede !== \"\" &&\n      nutrition.karbohydrat !== \"\" &&\n      nutrition.hvoravSukkerarter !== \"\" &&\n      nutrition.kostfiber !== \"\" &&\n      nutrition.protein !== \"\" &&\n      nutrition.salt !== \"\"\n    ) {\n      // If all requirements are met, display the nutrition results\n      setShowNokkelhulletResults(true);\n      // Hide any empty result messages or error messages\n      setShowEmptyResult(false);\n\n      // Check if the user selected \"energikj\" and if nutrition input lable of \"energikj\" is not empty\n      if (selectsPart === \"energikj\" && nutrition.energikj !== \"\") {\n        setEnergikj(false);\n      }\n\n      // Check if the user selected \"energikcal\" and if nutrition input lable of \"energikcal\" is not empty\n      if (selectsPart === \"energikcal\" && nutrition.energikcal !== \"\") {\n        setEnergikcal(false);\n      }\n      // Reset all input validation errors\n      setFett(false);\n      setFettNull(false);\n      setMettede(false);\n      setKarbohydrat(false);\n      setHvoravSukkerarter(false);\n      setKostfiber(false);\n      setProtein(false);\n      setSalt(false);\n\n      // If the user has not selected any nutrients, set errors accordingly\n      // Check each nutrition value to see if it is missing or negative\n      // show input validation errors if any input is missing or negative.\n    } else {\n      if (selectsPart === \"energikj\") {\n        console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n        if (nutrition.energikj === \"\" || nutrition.energikj < 0) {\n          console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n          setEnergikj(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikj(false);\n        }\n      }\n\n      if (selectsPart === \"energikcal\") {\n        console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n        if (nutrition.energikcal === \"\" || nutrition.energikcal < 0) {\n          console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n          setEnergikcal(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikcal(false);\n        }\n      }\n\n      // repeat for each nutrition value...\n      if (nutrition.fett === \"\" || nutrition.fett < 0) {\n        setFettNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setFettNull(false);\n      }\n      if (nutrition.fett > 10) {\n        setFett(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setFett(false);\n      }\n\n      if (nutrition.mettede === \"\" || nutrition.mettede < 0) {\n        setMettede(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setMettede(false);\n      }\n\n      if (nutrition.karbohydrat === \"\" || nutrition.karbohydrat < 0) {\n        setKarbohydrat(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKarbohydrat(false);\n      }\n\n      if (\n        nutrition.hvoravSukkerarter === \"\" ||\n        nutrition.hvoravSukkerarter < 0\n      ) {\n        setHvoravSukkerarter(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setHvoravSukkerarter(false);\n      }\n\n      if (nutrition.kostfiber === \"\" || nutrition.kostfiber < 0) {\n        setKostfiber(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKostfiber(false);\n      }\n\n      if (nutrition.protein === \"\" || nutrition.protein < 0) {\n        setProtein(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setProtein(false);\n      }\n\n      if (nutrition.salt === \"\" || nutrition.salt < 0) {\n        setSalt(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setSalt(false);\n      }\n    }\n\n    // Check for the \"LOW SUGARS\" claim\n    if (foodType === \"solid\" && parseFloat(nutrition.karbohydrat) <= 5) {\n      setLowSugars(true);\n    } else if (\n      foodType === \"liquid\" &&\n      parseFloat(nutrition.karbohydrat) <= 2.5\n    ) {\n      setLowSugars(true);\n    } else {\n      setLowSugars(false);\n    }\n\n    // Check the condition for the \"WITH NO ADDED SUGARS\" nutrition claim\n    if (nutrition.hvoravSukkerarter === \"0\" && nutrition.karbohydrat > 0) {\n      setWithNoAddedSugars(true);\n    } else {\n      setWithNoAddedSugars(false);\n    }\n  };\n\n  // create an array of energy units to select from\n  const selectUnit = [\n    {\n      value: \"energikj\",\n      label: \"(kj)\",\n    },\n    {\n      value: \"energikcal\",\n      label: \"(kcal)\",\n    },\n  ];\n\n  // Declare a state variable for the select dropdown.\n  const [selectsPart, setSelectPart] = useState(\"\");\n\n  // A function to handle changes to the select dropdown energy unit\n  const handlerPart = (event) => {\n    const inputVal = document.getElementsByName(event.value);\n    console.log(\"handlerPart ===\", event, nutrition, inputVal);\n    setSelectPart(event.value);\n  };\n\n  //create an array of food types to select from\n  const foodTypes = [\n    {\n      value: \"solid\",\n      label: \"Fast form\",\n    },\n    {\n      value: \"liquid\",\n      label: \"Flytende form\",\n    },\n  ];\n\n  return (\n    <div className=\"row\">\n      {/* This div creates a column layout for the left side of the table */}\n      <div className=\"col-md-6\">\n        {/* the selector (dropdown menu) for choosing the food type. */}\n        <div className=\"form-group\">\n          <label htmlFor=\"foodType\">Velg type matvare:</label>\n          <Select\n            className=\"form-control\"\n            id=\"foodType\"\n            options={foodTypes}\n            onChange={(e) => setFoodType(e.value)} // update the onFoodTypeChange function to directly set the food type state\n            placeholder=\"Velg type matvare\"\n          />\n        </div>\n\n        <h5>\n          Næringsinnhold per 100{\" \"}\n          {foodType === \"solid\" ? \"g\" : foodType === \"liquid\" ? \"ml\" : \"g/ml\"}\n        </h5>\n\n        {/* This div adds a light background color to the table */}\n        <div className=\"bg-light\">\n          {/* This table shows the nutritional information */}\n          <table className=\"table table-striped\">\n            {/* The table header */}\n            <thead>\n              <tr>\n                <th scope=\"col\" className=\"table-font\">\n                  Energi eller næringsstoff\n                </th>\n                <th scope=\"col\" className=\"table-font\">\n                  Mengde\n                </th>\n              </tr>\n            </thead>\n\n            {/* The table body */}\n            <tbody>\n              {/* This row shows the energy content */}\n              <tr className={(energikj, energikcal ? \"alert-box\" : null)}>\n                <th scope=\"row\" className=\"table-font\">\n                  {/* An icon with a tooltip to indicate missing values in energy parameters */}\n                  {energikj && energikcal ? (\n                    <Tooltip\n                      title=\"Mangler verdi i energi (kJ/Kcal) parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  {/* This div displays the energy label and unit */}\n                  <div className=\"row\">\n                    <div className=\"col-md-3\">\n                      <label for=\"energiunit\" class=\"form-label\">\n                        Energi\n                      </label>\n                    </div>\n                    {/* A dropdown menu for selecting the energy unit */}\n                    <div className=\"col-md-6\">\n                      <Select\n                        placeholder={<div>Velg enhet</div>}\n                        className=\"form-select-md mb-3\"\n                        options={selectUnit}\n                        onChange={(e) => handlerPart(e)}\n                      />\n                    </div>\n                  </div>\n                </th>\n                {/* An input field for entering the energy value */}\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name={selectsPart}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* Additional rows for other nutrient selections */}\n              {/* This row shows the fat content */}\n              <tr\n                className={\n                  fett ? \"alert-box\" : null || fettNull ? \"alert-box\" : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {fett ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden fett. Mengden på fett må være lavere enn eller lik 10 g / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {fettNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i fett parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Fett (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"fett\"\n                    value={nutrition.fett}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the saturated fat content */}\n              <tr className={mettede ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {mettede ? (\n                    <Tooltip\n                      title=\"Mangler verdi i mettede fettsyrer parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Mettede fettsyrer (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"mettede\"\n                    value={nutrition.mettede}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the carbohydrate content */}\n              <tr className={karbohydrat ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {karbohydrat ? (\n                    <Tooltip\n                      title=\"Mangler verdi i karbohydrat parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Karbohydrat (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"karbohydrat\"\n                    value={nutrition.karbohydrat}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows hvorav sukkerarter content */}\n              <tr className={hvoravSukkerarter ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {hvoravSukkerarter ? (\n                    <Tooltip\n                      title=\"Mangler verdi i hvorav sukkerarter parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Hvorav tilsatte sukkerarter (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"hvoravSukkerarter\"\n                    value={nutrition.hvoravSukkerarter}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows kostfiber content */}\n              <tr className={kostfiber ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {kostfiber ? (\n                    <Tooltip\n                      title=\"Mangler verdi i kostfiber parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Kostfiber (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"kostfiber\"\n                    value={nutrition.kostfiber}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the protein content */}\n              <tr className={protein ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {protein ? (\n                    <Tooltip\n                      title=\"Mangler verdi i protein parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Protein (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"protein\"\n                    value={nutrition.protein}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows salt content */}\n              <tr className={salt ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {salt ? (\n                    <Tooltip\n                      title=\"Mangler verdi i salt parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Salt (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"salt\"\n                    value={nutrition.salt}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n\n        {/* Button that submits the form and calls the onClick function */}\n        <div className=\"col-12 button-div\">\n          <button\n            type=\"submit\"\n            className=\"btn btn-primary btn-lg button-search\"\n            onClick={onClick}\n          >\n            Beregn\n          </button>\n        </div>\n      </div>\n\n      <div className=\"col-md-6\">\n        {/* positive results nøkkelhullet container\" */}\n        {showNokkelhulletResults ? (\n          <div className=\"container nøkkelhullet-food-result-container\">\n            {/* An image with class \"keyhole-logo\" and alt text \"keyhole logo\" */}\n            <img\n              src={keyholeLgog}\n              className=\"keyhole-logo img-fluid\"\n              alt=\"keyhole logo\"\n            />\n            {/* A heading with text \"Nøkkelhullet\" */}\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir Nøkkelhullet. </p>\n              </div>\n              <div className=\"col-md-2\">\n                {/* FontAwesome icon with event listener to show the \"Nøkkelhullet\" information section */}\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  {/* A paragraph with a link to Lovdata's \"Forskrift om frivillig merking a nœringsmidler med Nokkellhullet\" */}\n                  <p>\n                    Les mer om hvilke krav det stilles for merking av\n                    Nokkellhullet på Lovdatas \"Forskrift om frivillig merking a\n                    nœringsmidler med Nokkellhullet\":\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  {/* FontAwesome icon with event listener to hide the \"Nøkkelhullet\" information section */}\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        ) : null}\n        {/*Negative results nøkkelhullet container\" */}\n        {showNokkelhulletResults === false && (\n          <div className=\"container nøkkelhullet-food-negResult-container\">\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir ikke Nøkkelhullet.</p>\n                {showEmptyResult ? (\n                  <p>** Obligatoriske næringsverdier kan ikke være tomme.</p>\n                ) : null}\n\n                {fett ? (\n                  <p>** Fett verdien kan være høyst 10 g/100 g.</p>\n                ) : null}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om frivillig merking av næringsmidler med Nøkkelhullet:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for ernæringspåstander if there are all true results */}\n        {buttonClicked && (\n          <div\n            className={\n              lowSugars && withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-all\"\n                : !lowSugars && !withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-none\"\n                : \"container ernæringspåstander-food-result-container-some\"\n            }\n          >\n            <h5>Ernæringspåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                {/* Low sugars */}\n                {lowSugars ? (\n                  <div>\n                    <p>** Lavt sukkerinnhold:</p>\n                    <p>\n                      Dette produktet inneholder høyst 5 g sukkerarter per 100 g\n                      for næringsmidler i fast form, eller høyst 2,5 g\n                      sukkerarter per 100 ml for næringsmidler i flytende form\n                      og oppfyller kravet for \"Lavt sukkerinnhold\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Lavt sukkerinnhold\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        For faste næringsmidler, sukkerinnholdet må være høyst 5\n                        g per 100 g.\n                      </li>\n                      <li>\n                        For flytende næringsmidler, sukkerinnholdet må være\n                        høyst 2,5 g per 100 ml.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n\n                {/* No added sugars */}\n                {withNoAddedSugars ? (\n                  <div>\n                    <p>** Uten tilsatt sukker:</p>\n                    <p>\n                      Dette produktet er ikke tilsatt monosakkarider,\n                      disakkarider eller andre næringsmidler på grunn av deres\n                      søtende egenskaper og oppfyller kravet for \"Uten tilsatt\n                      sukker\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Uten tilsatt sukker\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        Produktet må ikke være tilsatt monosakkarider,\n                        disakkarider eller andre næringsmidler på grunn av deres\n                        søtende egenskaper.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"ernaerings\")}\n                />\n              </div>\n            </div>\n            {infoErnaerings ? (\n              // Information section for \"Ernæringspåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"ernaerings\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for Helsepåstander results  */}\n        {showHelsepåstander && (\n          <div\n            className=\"container helsepåstander-food-result-container\"\n            style={{ background: \"#f2f0b5\" }}\n          >\n            <h5>Helsepåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Under utvikling. </p>\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"helsepåstander\")}\n                />\n              </div>\n            </div>\n            {infoHelsepåstander ? (\n              // Information section for \"Helsepåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"helsepåstander\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"15px\" }}></div>\n        {/* conditional rendering for the buttons using showButtons state */}\n        {showButtons && (\n          <div className=\"d-flex justify-content-between\">\n            {/* Save button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-save\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Lagre produkt\n            </button>\n\n            {/* Share button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-share\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Del produkt\n            </button>\n\n            {/* Add a new product button */}\n            <button\n              className=\"btn btn-primary\"\n              onClick={() => window.location.reload()}\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-plus\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Legg til et nytt produkt\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Kategori23;\n","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Kategori24a2.js",["463","464","465","466"],[],"import React from \"react\";\nimport { useState, useEffect } from \"react\"; // import the useState and useeffect hook.\nimport { faCircleExclamation } from \"@fortawesome/free-solid-svg-icons\"; // import an icon.\nimport { faBan } from \"@fortawesome/free-solid-svg-icons\";\nimport { faSave, faShare, faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"; // import FontAwesomeIcon component.\nimport Tooltip from \"@mui/material/Tooltip\"; // import Tooltip component.\nimport keyholeLgog from \"./circle-keyhole-logo.png\"; // import an image\nimport { faCircleInfo } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport { faXmarkCircle } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport Select from \"react-select\"; // import Select component\n\nconst Kategori24a2 = () => {\n  // State variables for showing results and empty result message\n  const [showNokkelhulletResults, setShowNokkelhulletResults] = useState(null);\n  const [showErnaeringsResults, setShowErnaeringsResults] = useState(null);\n  const [showHelsepåstander, setShowHelsepåstander] = useState(null);\n  const [showEmptyResult, setShowEmptyResult] = useState(\"\"); // initialize state variable for showing empty result message.\n\n  //state variable to store the user's food type selection (solid or liquid) and the low sugars claim result\n  const [foodType, setFoodType] = useState(\"\");\n  const [lowSugars, setLowSugars] = useState(null);\n\n  //state variable to track whether the product meets the WITH NO ADDED SUGARS claim or not\n  const [withNoAddedSugars, setWithNoAddedSugars] = useState(false);\n\n  // State variable for tracking if the button is clicked\n  const [buttonClicked, setButtonClicked] = useState(false);\n\n  // useEffect hook for checking the condition for the \"WITH NO ADDED SUGARS\" claim when button is clicked\n  useEffect(() => {\n    if (buttonClicked) {\n      if (withNoAddedSugars) {\n        setShowErnaeringsResults(true);\n      } else {\n        setShowErnaeringsResults(false);\n      }\n    }\n  }, [withNoAddedSugars, buttonClicked]);\n\n  //state for controlling the buttons' visibility\n  const [showButtons, setShowButtons] = useState(false);\n\n  // State variables to control the visibility of the information sections\n  const [infoNokkelhullet, setInfoNokkelhullet] = useState(false);\n  const [infoErnaerings, setInfoErnaerings] = useState(false);\n  const [infoHelsepåstander, setInfoHelsepåstander] = useState(false);\n\n  // Function to show an information section based on the container parameter\n  const onClickInfo = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(true);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(true);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(true);\n    }\n  };\n\n  // Function to hide an information section based on the container parameter\n  const onClickClose = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(false);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(false);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(false);\n    }\n  };\n\n  // State variables for handling input fields and validation errors\n  const [energikj, setEnergikj] = useState(false);\n  const [energikcal, setEnergikcal] = useState(false);\n\n  const [fett, setFett] = useState(false);\n  const [fettNull, setFettNull] = useState(false);\n  const [mettede, setMettede] = useState(false);\n  const [karbohydrat, setKarbohydrat] = useState(false);\n  const [karbohydratNull, setKarbohydratNull] = useState(false);\n  const [hvoravSukkerarter, setHvoravSukkerarter] = useState(false);\n  const [kostfiber, setKostfiber] = useState(false);\n  const [protein, setProtein] = useState(false);\n  const [salt, setSalt] = useState(false);\n  const [saltNull, setSaltNull] = useState(false);\n\n  // State variable for storing nutrition information entered by user\n  const [nutrition, setNutrition] = useState({\n    energikj: \"\",\n    energikcal: \"\",\n    fett: \"\",\n    mettede: \"\",\n    karbohydrat: \"\",\n    hvoravSukkerarter: \"\",\n    kostfiber: \"\",\n    protein: \"\",\n    salt: \"\",\n  });\n\n  // Handler for updating nutrition state/state variable based on input field changes/input values\n  const changeHandle = (event) => {\n    console.log(\"changeHandle ===\", event.target, event.target.value);\n    setNutrition({\n      ...nutrition,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  // define function to handle form submission\n  const onClick = (e) => {\n    e.preventDefault();\n    setButtonClicked(true);\n    setShowHelsepåstander(true);\n    setShowButtons(true);\n\n    console.log(\"onclick ===\", selectsPart, nutrition);\n\n    // Check if all required fields are filled out and within valid ranges\n    // The if statement checks if all required inputs are non-empty and meet the nutritional requirements\n    if (\n      nutrition.fett !== \"\" &&\n      nutrition.fett <= 10 &&\n      nutrition.mettede !== \"\" &&\n      nutrition.karbohydrat !== \"\" &&\n      nutrition.karbohydrat <= 3 &&\n      nutrition.hvoravSukkerarter !== \"\" &&\n      nutrition.kostfiber !== \"\" &&\n      nutrition.protein !== \"\" &&\n      nutrition.salt !== \"\" &&\n      nutrition.salt <= 0.5\n    ) {\n      // If all requirements are met, display the nutrition results\n      setShowNokkelhulletResults(true);\n      // Hide any empty result messages or error messages\n      setShowEmptyResult(false);\n\n      // Check if the user selected \"energikj\" and if nutrition input lable of \"energikj\" is not empty\n      if (selectsPart === \"energikj\" && nutrition.energikj !== \"\") {\n        setEnergikj(false);\n      }\n\n      // Check if the user selected \"energikcal\" and if nutrition input lable of \"energikcal\" is not empty\n      if (selectsPart === \"energikcal\" && nutrition.energikcal !== \"\") {\n        setEnergikcal(false);\n      }\n      // Reset all input validation errors\n      setFett(false);\n      setFettNull(false);\n      setMettede(false);\n      setKarbohydrat(false);\n      setKarbohydratNull(false);\n      setHvoravSukkerarter(false);\n      setKostfiber(false);\n      setProtein(false);\n      setSalt(false);\n      setSaltNull(false);\n\n      // If the user has not selected any nutrients, set errors accordingly\n      // Check each nutrition value to see if it is missing or negative\n      // show input validation errors if any input is missing or negative.\n    } else {\n      if (selectsPart === \"energikj\") {\n        console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n        if (nutrition.energikj === \"\" || nutrition.energikj < 0) {\n          console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n          setEnergikj(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikj(false);\n        }\n      }\n\n      if (selectsPart === \"energikcal\") {\n        console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n        if (nutrition.energikcal === \"\" || nutrition.energikcal < 0) {\n          console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n          setEnergikcal(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikcal(false);\n        }\n      }\n\n      // repeat for each nutrition value...\n      if (nutrition.fett === \"\" || nutrition.fett < 0) {\n        setFettNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setFettNull(false);\n      }\n      if (nutrition.fett > 10) {\n        setFett(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setFett(false);\n      }\n\n      if (nutrition.mettede === \"\" || nutrition.mettede < 0) {\n        setMettede(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setMettede(false);\n      }\n\n      if (nutrition.karbohydrat === \"\" || nutrition.karbohydrat < 0) {\n        setKarbohydratNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKarbohydratNull(false);\n      }\n      if (nutrition.karbohydrat > 3) {\n        setKarbohydrat(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setKarbohydrat(false);\n      }\n\n      if (\n        nutrition.hvoravSukkerarter === \"\" ||\n        nutrition.hvoravSukkerarter < 0\n      ) {\n        setHvoravSukkerarter(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setHvoravSukkerarter(false);\n      }\n\n      if (nutrition.kostfiber === \"\" || nutrition.kostfiber < 0) {\n        setKostfiber(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKostfiber(false);\n      }\n\n      if (nutrition.protein === \"\" || nutrition.protein < 0) {\n        setProtein(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setProtein(false);\n      }\n\n      if (nutrition.salt === \"\" || nutrition.salt < 0) {\n        setSaltNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setSaltNull(false);\n      }\n      if (nutrition.salt > 0.5) {\n        setSalt(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setSalt(false);\n      }\n    }\n\n    // Check for the \"LOW SUGARS\" claim\n    if (foodType === \"solid\" && parseFloat(nutrition.karbohydrat) <= 5) {\n      setLowSugars(true);\n    } else if (\n      foodType === \"liquid\" &&\n      parseFloat(nutrition.karbohydrat) <= 2.5\n    ) {\n      setLowSugars(true);\n    } else {\n      setLowSugars(false);\n    }\n\n    // Check the condition for the \"WITH NO ADDED SUGARS\" nutrition claim\n    if (nutrition.hvoravSukkerarter === \"0\" && nutrition.karbohydrat > 0) {\n      setWithNoAddedSugars(true);\n    } else {\n      setWithNoAddedSugars(false);\n    }\n  };\n\n  // create an array of energy units to select from\n  const selectUnit = [\n    {\n      value: \"energikj\",\n      label: \"(kj)\",\n    },\n    {\n      value: \"energikcal\",\n      label: \"(kcal)\",\n    },\n  ];\n\n  // Declare a state variable for the select dropdown.\n  const [selectsPart, setSelectPart] = useState(\"\");\n\n  // A function to handle changes to the select dropdown energy unit\n  const handlerPart = (event) => {\n    const inputVal = document.getElementsByName(event.value);\n    console.log(\"handlerPart ===\", event, nutrition, inputVal);\n    setSelectPart(event.value);\n  };\n\n  //create an array of food types to select from\n  const foodTypes = [\n    {\n      value: \"solid\",\n      label: \"Fast form\",\n    },\n    {\n      value: \"liquid\",\n      label: \"Flytende form\",\n    },\n  ];\n\n  return (\n    <div className=\"row\">\n      {/* This div creates a column layout for the left side of the table */}\n      <div className=\"col-md-6\">\n        {/* the selector (dropdown menu) for choosing the food type. */}\n        <div className=\"form-group\">\n          <label htmlFor=\"foodType\">Velg type matvare:</label>\n          <Select\n            className=\"form-control\"\n            id=\"foodType\"\n            options={foodTypes}\n            onChange={(e) => setFoodType(e.value)} // update the onFoodTypeChange function to directly set the food type state\n            placeholder=\"Velg type matvare\"\n          />\n        </div>\n\n        <h5>\n          Næringsinnhold per 100{\" \"}\n          {foodType === \"solid\" ? \"g\" : foodType === \"liquid\" ? \"ml\" : \"g/ml\"}\n        </h5>\n\n        {/* This div adds a light background color to the table */}\n        <div className=\"bg-light\">\n          {/* This table shows the nutritional information */}\n          <table className=\"table table-striped\">\n            {/* The table header */}\n            <thead>\n              <tr>\n                <th scope=\"col\" className=\"table-font\">\n                  Energi eller næringsstoff\n                </th>\n                <th scope=\"col\" className=\"table-font\">\n                  Mengde\n                </th>\n              </tr>\n            </thead>\n\n            {/* The table body */}\n            <tbody>\n              {/* This row shows the energy content */}\n              <tr className={(energikj, energikcal ? \"alert-box\" : null)}>\n                <th scope=\"row\" className=\"table-font\">\n                  {/* An icon with a tooltip to indicate missing values in energy parameters */}\n                  {energikj && energikcal ? (\n                    <Tooltip\n                      title=\"Mangler verdi i energi (kJ/Kcal) parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  {/* This div displays the energy label and unit */}\n                  <div className=\"row\">\n                    <div className=\"col-md-3\">\n                      <label for=\"energiunit\" class=\"form-label\">\n                        Energi\n                      </label>\n                    </div>\n                    {/* A dropdown menu for selecting the energy unit */}\n                    <div className=\"col-md-6\">\n                      <Select\n                        placeholder={<div>Velg enhet</div>}\n                        className=\"form-select-md mb-3\"\n                        options={selectUnit}\n                        onChange={(e) => handlerPart(e)}\n                      />\n                    </div>\n                  </div>\n                </th>\n                {/* An input field for entering the energy value */}\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name={selectsPart}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* Additional rows for other nutrient selections */}\n              {/* This row shows the fat content */}\n              <tr\n                className={\n                  fett ? \"alert-box\" : null || fettNull ? \"alert-box\" : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {fett ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden fett. Mengden på fett må være lavere enn eller lik 10 g / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {fettNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i fett parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Fett (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"fett\"\n                    value={nutrition.fett}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the saturated fat content */}\n              <tr className={mettede ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {mettede ? (\n                    <Tooltip\n                      title=\"Mangler verdi i mettede fettsyrer parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Mettede fettsyrer (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"mettede\"\n                    value={nutrition.mettede}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the carbohydrate content */}\n              <tr\n                className={\n                  karbohydrat\n                    ? \"alert-box\"\n                    : null || karbohydratNull\n                    ? \"alert-box\"\n                    : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {karbohydrat ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden sukkerarter. Mengden på sukkerarter må være lavere enn eller lik 3 g / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {karbohydratNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i karbohydrat parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Karbohydrat (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"karbohydrat\"\n                    value={nutrition.karbohydrat}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows hvorav sukkerarter content */}\n              <tr className={hvoravSukkerarter ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {hvoravSukkerarter ? (\n                    <Tooltip\n                      title=\"Mangler verdi i hvorav sukkerarter parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Hvorav tilsatte sukkerarter (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"hvoravSukkerarter\"\n                    value={nutrition.hvoravSukkerarter}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows kostfiber content */}\n              <tr className={kostfiber ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {kostfiber ? (\n                    <Tooltip\n                      title=\"Mangler verdi i kostfiber parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Kostfiber (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"kostfiber\"\n                    value={nutrition.kostfiber}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the protein content */}\n              <tr className={protein ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {protein ? (\n                    <Tooltip\n                      title=\"Mangler verdi i protein parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Protein (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"protein\"\n                    value={nutrition.protein}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows salt content */}\n              <tr\n                className={\n                  salt ? \"alert-box\" : null || saltNull ? \"alert-box\" : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {salt ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden salt. Mengden på salt må være lavere enn eller lik 0.5 g / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {saltNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i salt parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Salt (g)\n                </th>\n                <td colSpan=\"2\">\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"salt\"\n                    value={nutrition.salt}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n\n        {/* Button that submits the form and calls the onClick function */}\n        <div className=\"col-12 button-div\">\n          <button\n            type=\"submit\"\n            className=\"btn btn-primary btn-lg button-search\"\n            onClick={onClick}\n          >\n            Beregn\n          </button>\n        </div>\n      </div>\n\n      <div className=\"col-md-6\">\n        {/* positive results nøkkelhullet container\" */}\n        {showNokkelhulletResults ? (\n          <div className=\"container nøkkelhullet-food-result-container\">\n            {/* An image with class \"keyhole-logo\" and alt text \"keyhole logo\" */}\n            <img\n              src={keyholeLgog}\n              className=\"keyhole-logo img-fluid\"\n              alt=\"keyhole logo\"\n            />\n            {/* A heading with text \"Nøkkelhullet\" */}\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir Nøkkelhullet. </p>\n              </div>\n              <div className=\"col-md-2\">\n                {/* FontAwesome icon with event listener to show the \"Nøkkelhullet\" information section */}\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  {/* A paragraph with a link to Lovdata's \"Forskrift om frivillig merking a nœringsmidler med Nokkellhullet\" */}\n                  <p>\n                    Les mer om hvilke krav det stilles for merking av\n                    Nokkellhullet på Lovdatas \"Forskrift om frivillig merking a\n                    nœringsmidler med Nokkellhullet\":\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  {/* FontAwesome icon with event listener to hide the \"Nøkkelhullet\" information section */}\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        ) : null}\n        {/*Negative results nøkkelhullet container\" */}\n        {showNokkelhulletResults === false && (\n          <div className=\"container nøkkelhullet-food-negResult-container\">\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir ikke Nøkkelhullet.</p>\n                {showEmptyResult ? (\n                  <p>** Obligatoriske næringsverdier kan ikke være tomme.</p>\n                ) : null}\n\n                {fett ? (\n                  <p>** Fett verdien kan være høyst 10 g/100 g.</p>\n                ) : null}\n\n                {karbohydrat ? (\n                  <p>** Sukkerarter verdien kan være høyst 3 g/100 g.</p>\n                ) : null}\n                {salt ? (\n                  <p>** Salt verdien kan være høyst 0.5 g/100 g.</p>\n                ) : null}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om frivillig merking av næringsmidler med Nøkkelhullet:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for ernæringspåstander if there are all true results */}\n        {buttonClicked && (\n          <div\n            className={\n              lowSugars && withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-all\"\n                : !lowSugars && !withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-none\"\n                : \"container ernæringspåstander-food-result-container-some\"\n            }\n          >\n            <h5>Ernæringspåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                {/* Low sugars */}\n                {lowSugars ? (\n                  <div>\n                    <p>** Lavt sukkerinnhold:</p>\n                    <p>\n                      Dette produktet inneholder høyst 5 g sukkerarter per 100 g\n                      for næringsmidler i fast form, eller høyst 2,5 g\n                      sukkerarter per 100 ml for næringsmidler i flytende form\n                      og oppfyller kravet for \"Lavt sukkerinnhold\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Lavt sukkerinnhold\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        For faste næringsmidler, sukkerinnholdet må være høyst 5\n                        g per 100 g.\n                      </li>\n                      <li>\n                        For flytende næringsmidler, sukkerinnholdet må være\n                        høyst 2,5 g per 100 ml.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n\n                {/* No added sugars */}\n                {withNoAddedSugars ? (\n                  <div>\n                    <p>** Uten tilsatt sukker:</p>\n                    <p>\n                      Dette produktet er ikke tilsatt monosakkarider,\n                      disakkarider eller andre næringsmidler på grunn av deres\n                      søtende egenskaper og oppfyller kravet for \"Uten tilsatt\n                      sukker\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Uten tilsatt sukker\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        Produktet må ikke være tilsatt monosakkarider,\n                        disakkarider eller andre næringsmidler på grunn av deres\n                        søtende egenskaper.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"ernaerings\")}\n                />\n              </div>\n            </div>\n            {infoErnaerings ? (\n              // Information section for \"Ernæringspåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"ernaerings\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for Helsepåstander results  */}\n        {showHelsepåstander && (\n          <div\n            className=\"container helsepåstander-food-result-container\"\n            style={{ background: \"#f2f0b5\" }}\n          >\n            <h5>Helsepåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Under utvikling. </p>\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"helsepåstander\")}\n                />\n              </div>\n            </div>\n            {infoHelsepåstander ? (\n              // Information section for \"Helsepåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"helsepåstander\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"15px\" }}></div>\n        {/* conditional rendering for the buttons using showButtons state */}\n        {showButtons && (\n          <div className=\"d-flex justify-content-between\">\n            {/* Save button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-save\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Lagre produkt\n            </button>\n\n            {/* Share button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-share\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Del produkt\n            </button>\n\n            {/* Add a new product button */}\n            <button\n              className=\"btn btn-primary\"\n              onClick={() => window.location.reload()}\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-plus\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Legg til et nytt produkt\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Kategori24a2;\n","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Kategori22a.js",["467","468","469","470"],[],"import React from \"react\";\nimport { useState, useEffect } from \"react\"; // import the useState and useeffect hook.\nimport { faCircleExclamation } from \"@fortawesome/free-solid-svg-icons\"; // import an icon.\nimport { faBan } from \"@fortawesome/free-solid-svg-icons\";\nimport { faSave, faShare, faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"; // import FontAwesomeIcon component.\nimport Tooltip from \"@mui/material/Tooltip\"; // import Tooltip component.\nimport keyholeLgog from \"./circle-keyhole-logo.png\"; // import an image\nimport { faCircleInfo } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport { faXmarkCircle } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport Select from \"react-select\"; // import Select component\n\nconst Kategori22a = () => {\n  // State variables for showing results and empty result message\n  const [showNokkelhulletResults, setShowNokkelhulletResults] = useState(null);\n  const [showErnaeringsResults, setShowErnaeringsResults] = useState(null);\n  const [showHelsepåstander, setShowHelsepåstander] = useState(null);\n  const [showEmptyResult, setShowEmptyResult] = useState(\"\"); // initialize state variable for showing empty result message.\n\n  //state variable to store the user's food type selection (solid or liquid) and the low sugars claim result\n  const [foodType, setFoodType] = useState(\"\");\n  const [lowSugars, setLowSugars] = useState(null);\n\n  //state variable to track whether the product meets the WITH NO ADDED SUGARS claim or not\n  const [withNoAddedSugars, setWithNoAddedSugars] = useState(false);\n\n  // State variable for tracking if the button is clicked\n  const [buttonClicked, setButtonClicked] = useState(false);\n\n  // useEffect hook for checking the condition for the \"WITH NO ADDED SUGARS\" claim when button is clicked\n  useEffect(() => {\n    if (buttonClicked) {\n      if (withNoAddedSugars) {\n        setShowErnaeringsResults(true);\n      } else {\n        setShowErnaeringsResults(false);\n      }\n    }\n  }, [withNoAddedSugars, buttonClicked]);\n\n  //state for controlling the buttons' visibility\n  const [showButtons, setShowButtons] = useState(false);\n\n  // State variables to control the visibility of the information sections\n  const [infoNokkelhullet, setInfoNokkelhullet] = useState(false);\n  const [infoErnaerings, setInfoErnaerings] = useState(false);\n  const [infoHelsepåstander, setInfoHelsepåstander] = useState(false);\n\n  // Function to show an information section based on the container parameter\n  const onClickInfo = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(true);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(true);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(true);\n    }\n  };\n\n  // Function to hide an information section based on the container parameter\n  const onClickClose = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(false);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(false);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(false);\n    }\n  };\n\n  // State variables for handling input fields and validation errors\n  const [energikj, setEnergikj] = useState(false);\n  const [energikcal, setEnergikcal] = useState(false);\n\n  const [fett, setFett] = useState(false);\n  const [fettNull, setFettNull] = useState(false);\n  const [mettede, setMettede] = useState(false);\n  const [karbohydrat, setKarbohydrat] = useState(false);\n  const [karbohydratNull, setKarbohydratNull] = useState(false);\n  const [hvoravSukkerarter, setHvoravSukkerarter] = useState(false);\n  const [kostfiber, setKostfiber] = useState(false);\n  const [protein, setProtein] = useState(false);\n  const [salt, setSalt] = useState(false);\n  const [saltNull, setSaltNull] = useState(false);\n\n  // State variable for storing nutrition information entered by user\n  const [nutrition, setNutrition] = useState({\n    energikj: \"\",\n    energikcal: \"\",\n    fett: \"\",\n    mettede: \"\",\n    karbohydrat: \"\",\n    hvoravSukkerarter: \"\",\n    kostfiber: \"\",\n    protein: \"\",\n    salt: \"\",\n  });\n\n  // Handler for updating nutrition state/state variable based on input field changes/input values\n  const changeHandle = (event) => {\n    console.log(\"changeHandle ===\", event.target, event.target.value);\n    setNutrition({\n      ...nutrition,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  // define function to handle form submission\n  const onClick = (e) => {\n    e.preventDefault();\n    setButtonClicked(true);\n    setShowHelsepåstander(true);\n    setShowButtons(true);\n\n    console.log(\"onclick ===\", selectsPart, nutrition);\n\n    // Check if all required fields are filled out and within valid ranges\n    // The if statement checks if all required inputs are non-empty and meet the nutritional requirements\n    if (\n      nutrition.fett !== \"\" &&\n      nutrition.fett <= 10 &&\n      nutrition.mettede !== \"\" &&\n      nutrition.karbohydrat !== \"\" &&\n      nutrition.karbohydrat <= 5 &&\n      nutrition.hvoravSukkerarter !== \"\" &&\n      nutrition.kostfiber !== \"\" &&\n      nutrition.protein !== \"\" &&\n      nutrition.salt !== \"\" &&\n      nutrition.salt <= 1.5\n    ) {\n      // If all requirements are met, display the nutrition results\n      setShowNokkelhulletResults(true);\n      // Hide any empty result messages or error messages\n      setShowEmptyResult(false);\n\n      // Check if the user selected \"energikj\" and if nutrition input lable of \"energikj\" is not empty\n      if (selectsPart === \"energikj\" && nutrition.energikj !== \"\") {\n        setEnergikj(false);\n      }\n\n      // Check if the user selected \"energikcal\" and if nutrition input lable of \"energikcal\" is not empty\n      if (selectsPart === \"energikcal\" && nutrition.energikcal !== \"\") {\n        setEnergikcal(false);\n      }\n      // Reset all input validation errors\n      setFett(false);\n      setFettNull(false);\n      setMettede(false);\n      setKarbohydrat(false);\n      setKarbohydratNull(false);\n      setHvoravSukkerarter(false);\n      setKostfiber(false);\n      setProtein(false);\n      setSalt(false);\n      setSaltNull(false);\n\n      // If the user has not selected any nutrients, set errors accordingly\n      // Check each nutrition value to see if it is missing or negative\n      // show input validation errors if any input is missing or negative.\n    } else {\n      if (selectsPart === \"energikj\") {\n        console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n        if (nutrition.energikj === \"\" || nutrition.energikj < 0) {\n          console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n          setEnergikj(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikj(false);\n        }\n      }\n\n      if (selectsPart === \"energikcal\") {\n        console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n        if (nutrition.energikcal === \"\" || nutrition.energikcal < 0) {\n          console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n          setEnergikcal(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikcal(false);\n        }\n      }\n\n      // repeat for each nutrition value...\n      if (nutrition.fett === \"\" || nutrition.fett < 0) {\n        setFettNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setFettNull(false);\n      }\n      if (nutrition.fett > 10) {\n        setFett(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setFett(false);\n      }\n\n      if (nutrition.mettede === \"\" || nutrition.mettede < 0) {\n        setMettede(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setMettede(false);\n      }\n\n      if (nutrition.karbohydrat === \"\" || nutrition.karbohydrat < 0) {\n        setKarbohydratNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKarbohydratNull(false);\n      }\n      if (nutrition.karbohydrat > 5) {\n        setKarbohydrat(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setKarbohydrat(false);\n      }\n\n      if (\n        nutrition.hvoravSukkerarter === \"\" ||\n        nutrition.hvoravSukkerarter < 0\n      ) {\n        setHvoravSukkerarter(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setHvoravSukkerarter(false);\n      }\n\n      if (nutrition.kostfiber === \"\" || nutrition.kostfiber < 0) {\n        setKostfiber(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKostfiber(false);\n      }\n\n      if (nutrition.protein === \"\" || nutrition.protein < 0) {\n        setProtein(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setProtein(false);\n      }\n\n      if (nutrition.salt === \"\" || nutrition.salt < 0) {\n        setSaltNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setSaltNull(false);\n      }\n      if (nutrition.salt > 1.5) {\n        setSalt(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setSalt(false);\n      }\n    }\n\n    // Check for the \"LOW SUGARS\" claim\n    if (foodType === \"solid\" && parseFloat(nutrition.karbohydrat) <= 5) {\n      setLowSugars(true);\n    } else if (\n      foodType === \"liquid\" &&\n      parseFloat(nutrition.karbohydrat) <= 2.5\n    ) {\n      setLowSugars(true);\n    } else {\n      setLowSugars(false);\n    }\n\n    // Check the condition for the \"WITH NO ADDED SUGARS\" nutrition claim\n    if (nutrition.hvoravSukkerarter === \"0\" && nutrition.karbohydrat > 0) {\n      setWithNoAddedSugars(true);\n    } else {\n      setWithNoAddedSugars(false);\n    }\n  };\n\n  // create an array of energy units to select from\n  const selectUnit = [\n    {\n      value: \"energikj\",\n      label: \"(kj)\",\n    },\n    {\n      value: \"energikcal\",\n      label: \"(kcal)\",\n    },\n  ];\n\n  // Declare a state variable for the select dropdown.\n  const [selectsPart, setSelectPart] = useState(\"\");\n\n  // A function to handle changes to the select dropdown energy unit\n  const handlerPart = (event) => {\n    const inputVal = document.getElementsByName(event.value);\n    console.log(\"handlerPart ===\", event, nutrition, inputVal);\n    setSelectPart(event.value);\n  };\n\n  //create an array of food types to select from\n  const foodTypes = [\n    {\n      value: \"solid\",\n      label: \"Fast form\",\n    },\n    {\n      value: \"liquid\",\n      label: \"Flytende form\",\n    },\n  ];\n\n  return (\n    <div className=\"row\">\n      {/* This div creates a column layout for the left side of the table */}\n      <div className=\"col-md-6\">\n        {/* the selector (dropdown menu) for choosing the food type. */}\n        <div className=\"form-group\">\n          <label htmlFor=\"foodType\">Velg type matvare:</label>\n          <Select\n            className=\"form-control\"\n            id=\"foodType\"\n            options={foodTypes}\n            onChange={(e) => setFoodType(e.value)} // update the onFoodTypeChange function to directly set the food type state\n            placeholder=\"Velg type matvare\"\n          />\n        </div>\n\n        <h5>\n          Næringsinnhold per 100{\" \"}\n          {foodType === \"solid\" ? \"g\" : foodType === \"liquid\" ? \"ml\" : \"g/ml\"}\n        </h5>\n\n        {/* This div adds a light background color to the table */}\n        <div className=\"bg-light\">\n          {/* This table shows the nutritional information */}\n          <table className=\"table table-striped\">\n            {/* The table header */}\n            <thead>\n              <tr>\n                <th scope=\"col\" className=\"table-font\">\n                  Energi eller næringsstoff\n                </th>\n                <th scope=\"col\" className=\"table-font\">\n                  Mengde\n                </th>\n              </tr>\n            </thead>\n\n            {/* The table body */}\n            <tbody>\n              {/* This row shows the energy content */}\n              <tr className={(energikj, energikcal ? \"alert-box\" : null)}>\n                <th scope=\"row\" className=\"table-font\">\n                  {/* An icon with a tooltip to indicate missing values in energy parameters */}\n                  {energikj && energikcal ? (\n                    <Tooltip\n                      title=\"Mangler verdi i energi (kJ/Kcal) parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  {/* This div displays the energy label and unit */}\n                  <div className=\"row\">\n                    <div className=\"col-md-3\">\n                      <label for=\"energiunit\" class=\"form-label\">\n                        Energi\n                      </label>\n                    </div>\n                    {/* A dropdown menu for selecting the energy unit */}\n                    <div className=\"col-md-6\">\n                      <Select\n                        placeholder={<div>Velg enhet</div>}\n                        className=\"form-select-md mb-3\"\n                        options={selectUnit}\n                        onChange={(e) => handlerPart(e)}\n                      />\n                    </div>\n                  </div>\n                </th>\n                {/* An input field for entering the energy value */}\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name={selectsPart}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* Additional rows for other nutrient selections */}\n              {/* This row shows the fat content */}\n              <tr\n                className={\n                  fett ? \"alert-box\" : null || fettNull ? \"alert-box\" : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {fett ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden fett. Mengden på fett må være lavere enn eller lik 10 g / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {fettNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i fett parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Fett (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"fett\"\n                    value={nutrition.fett}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the saturated fat content */}\n              <tr className={mettede ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {mettede ? (\n                    <Tooltip\n                      title=\"Mangler verdi i mettede fettsyrer parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Mettede fettsyrer (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"mettede\"\n                    value={nutrition.mettede}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the carbohydrate content */}\n              <tr\n                className={\n                  karbohydrat\n                    ? \"alert-box\"\n                    : null || karbohydratNull\n                    ? \"alert-box\"\n                    : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {karbohydrat ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden sukkerarter. Mengden på sukkerarter må være lavere enn eller lik 5 g / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {karbohydratNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i karbohydrat parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Karbohydrat (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"karbohydrat\"\n                    value={nutrition.karbohydrat}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows hvorav sukkerarter content */}\n              <tr className={hvoravSukkerarter ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {hvoravSukkerarter ? (\n                    <Tooltip\n                      title=\"Mangler verdi i hvorav sukkerarter parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Hvorav tilsatte sukkerarter (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"hvoravSukkerarter\"\n                    value={nutrition.hvoravSukkerarter}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows kostfiber content */}\n              <tr className={kostfiber ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {kostfiber ? (\n                    <Tooltip\n                      title=\"Mangler verdi i kostfiber parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Kostfiber (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"kostfiber\"\n                    value={nutrition.kostfiber}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the protein content */}\n              <tr className={protein ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {protein ? (\n                    <Tooltip\n                      title=\"Mangler verdi i protein parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Protein (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"protein\"\n                    value={nutrition.protein}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows salt content */}\n              <tr\n                className={\n                  salt ? \"alert-box\" : null || saltNull ? \"alert-box\" : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {salt ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden salt. Mengden på salt må være lavere enn eller lik 1.5 g / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {saltNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i salt parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Salt (g)\n                </th>\n                <td colSpan=\"2\">\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"salt\"\n                    value={nutrition.salt}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n\n        {/* Button that submits the form and calls the onClick function */}\n        <div className=\"col-12 button-div\">\n          <button\n            type=\"submit\"\n            className=\"btn btn-primary btn-lg button-search\"\n            onClick={onClick}\n          >\n            Beregn\n          </button>\n        </div>\n      </div>\n\n      <div className=\"col-md-6\">\n        {/* positive results nøkkelhullet container\" */}\n        {showNokkelhulletResults ? (\n          <div className=\"container nøkkelhullet-food-result-container\">\n            {/* An image with class \"keyhole-logo\" and alt text \"keyhole logo\" */}\n            <img\n              src={keyholeLgog}\n              className=\"keyhole-logo img-fluid\"\n              alt=\"keyhole logo\"\n            />\n            {/* A heading with text \"Nøkkelhullet\" */}\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir Nøkkelhullet. </p>\n              </div>\n              <div className=\"col-md-2\">\n                {/* FontAwesome icon with event listener to show the \"Nøkkelhullet\" information section */}\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  {/* A paragraph with a link to Lovdata's \"Forskrift om frivillig merking a nœringsmidler med Nokkellhullet\" */}\n                  <p>\n                    Les mer om hvilke krav det stilles for merking av\n                    Nokkellhullet på Lovdatas \"Forskrift om frivillig merking a\n                    nœringsmidler med Nokkellhullet\":\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  {/* FontAwesome icon with event listener to hide the \"Nøkkelhullet\" information section */}\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        ) : null}\n        {/*Negative results nøkkelhullet container\" */}\n        {showNokkelhulletResults === false && (\n          <div className=\"container nøkkelhullet-food-negResult-container\">\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir ikke Nøkkelhullet.</p>\n                {showEmptyResult ? (\n                  <p>** Obligatoriske næringsverdier kan ikke være tomme.</p>\n                ) : null}\n\n                {fett ? (\n                  <p>\n                    ** Annet fett enn fiskefett verdien kan være høyst 10 g/100\n                    g.\n                  </p>\n                ) : null}\n\n                {karbohydrat ? (\n                  <p>** Sukkerarter verdien kan være høyst 5 g/100 g.</p>\n                ) : null}\n                {salt ? (\n                  <p>** Salt verdien kan være høyst 1.5 g/100 g.</p>\n                ) : null}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om frivillig merking av næringsmidler med Nøkkelhullet:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for ernæringspåstander if there are all true results */}\n        {buttonClicked && (\n          <div\n            className={\n              lowSugars && withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-all\"\n                : !lowSugars && !withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-none\"\n                : \"container ernæringspåstander-food-result-container-some\"\n            }\n          >\n            <h5>Ernæringspåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                {/* Low sugars */}\n                {lowSugars ? (\n                  <div>\n                    <p>** Lavt sukkerinnhold:</p>\n                    <p>\n                      Dette produktet inneholder høyst 5 g sukkerarter per 100 g\n                      for næringsmidler i fast form, eller høyst 2,5 g\n                      sukkerarter per 100 ml for næringsmidler i flytende form\n                      og oppfyller kravet for \"Lavt sukkerinnhold\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Lavt sukkerinnhold\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        For faste næringsmidler, sukkerinnholdet må være høyst 5\n                        g per 100 g.\n                      </li>\n                      <li>\n                        For flytende næringsmidler, sukkerinnholdet må være\n                        høyst 2,5 g per 100 ml.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n\n                {/* No added sugars */}\n                {withNoAddedSugars ? (\n                  <div>\n                    <p>** Uten tilsatt sukker:</p>\n                    <p>\n                      Dette produktet er ikke tilsatt monosakkarider,\n                      disakkarider eller andre næringsmidler på grunn av deres\n                      søtende egenskaper og oppfyller kravet for \"Uten tilsatt\n                      sukker\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Uten tilsatt sukker\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        Produktet må ikke være tilsatt monosakkarider,\n                        disakkarider eller andre næringsmidler på grunn av deres\n                        søtende egenskaper.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"ernaerings\")}\n                />\n              </div>\n            </div>\n            {infoErnaerings ? (\n              // Information section for \"Ernæringspåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"ernaerings\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for Helsepåstander results  */}\n        {showHelsepåstander && (\n          <div\n            className=\"container helsepåstander-food-result-container\"\n            style={{ background: \"#f2f0b5\" }}\n          >\n            <h5>Helsepåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Under utvikling. </p>\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"helsepåstander\")}\n                />\n              </div>\n            </div>\n            {infoHelsepåstander ? (\n              // Information section for \"Helsepåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"helsepåstander\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"15px\" }}></div>\n        {/* conditional rendering for the buttons using showButtons state */}\n        {showButtons && (\n          <div className=\"d-flex justify-content-between\">\n            {/* Save button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-save\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Lagre produkt\n            </button>\n\n            {/* Share button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-share\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Del produkt\n            </button>\n\n            {/* Add a new product button */}\n            <button\n              className=\"btn btn-primary\"\n              onClick={() => window.location.reload()}\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-plus\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Legg til et nytt produkt\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Kategori22a;\n","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Kategori24b3.js",["471","472","473","474"],[],"import React from \"react\";\nimport { useState, useEffect } from \"react\"; // import the useState and useeffect hook.\nimport { faCircleExclamation } from \"@fortawesome/free-solid-svg-icons\"; // import an icon.\nimport { faBan } from \"@fortawesome/free-solid-svg-icons\";\nimport { faSave, faShare, faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"; // import FontAwesomeIcon component.\nimport Tooltip from \"@mui/material/Tooltip\"; // import Tooltip component.\nimport keyholeLgog from \"./circle-keyhole-logo.png\"; // import an image\nimport { faCircleInfo } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport { faXmarkCircle } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport Select from \"react-select\"; // import Select component\n\nconst Kategori24b3 = () => {\n  // State variables for showing results and empty result message\n  const [showNokkelhulletResults, setShowNokkelhulletResults] = useState(null);\n  const [showErnaeringsResults, setShowErnaeringsResults] = useState(null);\n  const [showHelsepåstander, setShowHelsepåstander] = useState(null);\n  const [showEmptyResult, setShowEmptyResult] = useState(\"\"); // initialize state variable for showing empty result message.\n\n  //state variable to store the user's food type selection (solid or liquid) and the low sugars claim result\n  const [foodType, setFoodType] = useState(\"\");\n  const [lowSugars, setLowSugars] = useState(null);\n\n  //state variable to track whether the product meets the WITH NO ADDED SUGARS claim or not\n  const [withNoAddedSugars, setWithNoAddedSugars] = useState(false);\n\n  // State variable for tracking if the button is clicked\n  const [buttonClicked, setButtonClicked] = useState(false);\n\n  // useEffect hook for checking the condition for the \"WITH NO ADDED SUGARS\" claim when button is clicked\n  useEffect(() => {\n    if (buttonClicked) {\n      if (withNoAddedSugars) {\n        setShowErnaeringsResults(true);\n      } else {\n        setShowErnaeringsResults(false);\n      }\n    }\n  }, [withNoAddedSugars, buttonClicked]);\n\n  //state for controlling the buttons' visibility\n  const [showButtons, setShowButtons] = useState(false);\n\n  // State variables to control the visibility of the information sections\n  const [infoNokkelhullet, setInfoNokkelhullet] = useState(false);\n  const [infoErnaerings, setInfoErnaerings] = useState(false);\n  const [infoHelsepåstander, setInfoHelsepåstander] = useState(false);\n\n  // Function to show an information section based on the container parameter\n  const onClickInfo = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(true);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(true);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(true);\n    }\n  };\n\n  // Function to hide an information section based on the container parameter\n  const onClickClose = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(false);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(false);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(false);\n    }\n  };\n\n  // State variables for handling input fields and validation errors\n  const [energikj, setEnergikj] = useState(false);\n  const [energikcal, setEnergikcal] = useState(false);\n\n  const [fett, setFett] = useState(false);\n  const [fettNull, setFettNull] = useState(false);\n  const [mettede, setMettede] = useState(false);\n  const [karbohydrat, setKarbohydrat] = useState(false);\n  const [hvoravSukkerarter, setHvoravSukkerarter] = useState(false);\n  const [hvoravSukkerarterNull, setHvoravSukkerarterNull] = useState(false);\n  const [kostfiber, setKostfiber] = useState(false);\n  const [protein, setProtein] = useState(false);\n  const [salt, setSalt] = useState(false);\n  const [saltNull, setSaltNull] = useState(false);\n  // State variable for storing nutrition information entered by user\n  const [nutrition, setNutrition] = useState({\n    energikj: \"\",\n    energikcal: \"\",\n    fett: \"\",\n    mettede: \"\",\n    karbohydrat: \"\",\n    hvoravSukkerarter: \"\",\n    kostfiber: \"\",\n    protein: \"\",\n    salt: \"\",\n  });\n\n  // Handler for updating nutrition state/state variable based on input field changes/input values\n  const changeHandle = (event) => {\n    console.log(\"changeHandle ===\", event.target, event.target.value);\n    setNutrition({\n      ...nutrition,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  // define function to handle form submission\n  const onClick = (e) => {\n    e.preventDefault();\n    setButtonClicked(true);\n    setShowHelsepåstander(true);\n    setShowButtons(true);\n\n    console.log(\"onclick ===\", selectsPart, nutrition);\n\n    // Check if all required fields are filled out and within valid ranges\n    // The if statement checks if all required inputs are non-empty and meet the nutritional requirements\n    if (\n      nutrition.fett !== \"\" &&\n      nutrition.fett <= 10 &&\n      nutrition.mettede !== \"\" &&\n      nutrition.karbohydrat !== \"\" &&\n      nutrition.hvoravSukkerarter !== \"\" &&\n      nutrition.hvoravSukkerarter <= 3 &&\n      nutrition.kostfiber !== \"\" &&\n      nutrition.protein !== \"\" &&\n      nutrition.salt !== \"\" &&\n      nutrition.salt <= 2.2\n    ) {\n      // If all requirements are met, display the nutrition results\n      setShowNokkelhulletResults(true);\n      // Hide any empty result messages or error messages\n      setShowEmptyResult(false);\n\n      // Check if the user selected \"energikj\" and if nutrition input lable of \"energikj\" is not empty\n      if (selectsPart === \"energikj\" && nutrition.energikj !== \"\") {\n        setEnergikj(false);\n      }\n\n      // Check if the user selected \"energikcal\" and if nutrition input lable of \"energikcal\" is not empty\n      if (selectsPart === \"energikcal\" && nutrition.energikcal !== \"\") {\n        setEnergikcal(false);\n      }\n      // Reset all input validation errors\n      setFett(false);\n      setFettNull(false);\n      setMettede(false);\n      setKarbohydrat(false);\n      setHvoravSukkerarter(false);\n      setHvoravSukkerarterNull(false);\n      setKostfiber(false);\n      setProtein(false);\n      setSalt(false);\n      setSaltNull(false);\n      // If the user has not selected any nutrients, set errors accordingly\n      // Check each nutrition value to see if it is missing or negative\n      // show input validation errors if any input is missing or negative.\n    } else {\n      if (selectsPart === \"energikj\") {\n        console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n        if (nutrition.energikj === \"\" || nutrition.energikj < 0) {\n          console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n          setEnergikj(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikj(false);\n        }\n      }\n\n      if (selectsPart === \"energikcal\") {\n        console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n        if (nutrition.energikcal === \"\" || nutrition.energikcal < 0) {\n          console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n          setEnergikcal(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikcal(false);\n        }\n      }\n\n      // repeat for each nutrition value...\n      if (nutrition.fett === \"\" || nutrition.fett < 0) {\n        setFettNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setFettNull(false);\n      }\n      if (nutrition.fett > 10) {\n        setFett(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setFett(false);\n      }\n\n      if (nutrition.mettede === \"\" || nutrition.mettede < 0) {\n        setMettede(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setMettede(false);\n      }\n\n      // Check if the 'karbohydrat' input is missing or negative, and display an error message if necessary\n      if (nutrition.karbohydrat === \"\" || nutrition.karbohydrat < 0) {\n        setKarbohydrat(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKarbohydrat(false);\n      }\n\n      // Check if the 'hvoravSukkerarter' input is missing, negative or above the maximum allowed value (1),\n      // and display an error message if necessary\n      if (\n        nutrition.hvoravSukkerarter === \"\" ||\n        nutrition.hvoravSukkerarter < 0\n      ) {\n        setHvoravSukkerarterNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setHvoravSukkerarterNull(false);\n      }\n      if (nutrition.hvoravSukkerarter > 3) {\n        setHvoravSukkerarter(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setHvoravSukkerarter(false);\n      }\n\n      if (nutrition.kostfiber === \"\" || nutrition.kostfiber < 0) {\n        setKostfiber(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKostfiber(false);\n      }\n\n      if (nutrition.protein === \"\" || nutrition.protein < 0) {\n        setProtein(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setProtein(false);\n      }\n\n      if (nutrition.salt === \"\" || nutrition.salt < 0) {\n        setSaltNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setSaltNull(false);\n      }\n      if (nutrition.salt > 2.2) {\n        setSalt(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setSalt(false);\n      }\n    }\n\n    // Check for the \"LOW SUGARS\" claim\n    if (foodType === \"solid\" && parseFloat(nutrition.karbohydrat) <= 5) {\n      setLowSugars(true);\n    } else if (\n      foodType === \"liquid\" &&\n      parseFloat(nutrition.karbohydrat) <= 2.5\n    ) {\n      setLowSugars(true);\n    } else {\n      setLowSugars(false);\n    }\n\n    // Check the condition for the \"WITH NO ADDED SUGARS\" nutrition claim\n    if (nutrition.hvoravSukkerarter === \"0\" && nutrition.karbohydrat > 0) {\n      setWithNoAddedSugars(true);\n    } else {\n      setWithNoAddedSugars(false);\n    }\n  };\n\n  // create an array of energy units to select from\n  const selectUnit = [\n    {\n      value: \"energikj\",\n      label: \"(kj)\",\n    },\n    {\n      value: \"energikcal\",\n      label: \"(kcal)\",\n    },\n  ];\n\n  // Declare a state variable for the select dropdown.\n  const [selectsPart, setSelectPart] = useState(\"\");\n\n  // A function to handle changes to the select dropdown energy unit\n  const handlerPart = (event) => {\n    const inputVal = document.getElementsByName(event.value);\n    console.log(\"handlerPart ===\", event, nutrition, inputVal);\n    setSelectPart(event.value);\n  };\n\n  //create an array of food types to select from\n  const foodTypes = [\n    {\n      value: \"solid\",\n      label: \"Fast form\",\n    },\n    {\n      value: \"liquid\",\n      label: \"Flytende form\",\n    },\n  ];\n\n  return (\n    <div className=\"row\">\n      {/* This div creates a column layout for the left side of the table */}\n      <div className=\"col-md-6\">\n        {/* the selector (dropdown menu) for choosing the food type. */}\n        <div className=\"form-group\">\n          <label htmlFor=\"foodType\">Velg type matvare:</label>\n          <Select\n            className=\"form-control\"\n            id=\"foodType\"\n            options={foodTypes}\n            onChange={(e) => setFoodType(e.value)} // update the onFoodTypeChange function to directly set the food type state\n            placeholder=\"Velg type matvare\"\n          />\n        </div>\n\n        <h5>\n          Næringsinnhold per 100{\" \"}\n          {foodType === \"solid\" ? \"g\" : foodType === \"liquid\" ? \"ml\" : \"g/ml\"}\n        </h5>\n\n        {/* This div adds a light background color to the table */}\n        <div className=\"bg-light\">\n          {/* This table shows the nutritional information */}\n          <table className=\"table table-striped\">\n            {/* The table header */}\n            <thead>\n              <tr>\n                <th scope=\"col\" className=\"table-font\">\n                  Energi eller næringsstoff\n                </th>\n                <th scope=\"col\" className=\"table-font\">\n                  Mengde\n                </th>\n              </tr>\n            </thead>\n\n            {/* The table body */}\n            <tbody>\n              {/* This row shows the energy content */}\n              <tr className={(energikj, energikcal ? \"alert-box\" : null)}>\n                <th scope=\"row\" className=\"table-font\">\n                  {/* An icon with a tooltip to indicate missing values in energy parameters */}\n                  {energikj && energikcal ? (\n                    <Tooltip\n                      title=\"Mangler verdi i energi (kJ/Kcal) parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  {/* This div displays the energy label and unit */}\n                  <div className=\"row\">\n                    <div className=\"col-md-3\">\n                      <label for=\"energiunit\" class=\"form-label\">\n                        Energi\n                      </label>\n                    </div>\n                    {/* A dropdown menu for selecting the energy unit */}\n                    <div className=\"col-md-6\">\n                      <Select\n                        placeholder={<div>Velg enhet</div>}\n                        className=\"form-select-md mb-3\"\n                        options={selectUnit}\n                        onChange={(e) => handlerPart(e)}\n                      />\n                    </div>\n                  </div>\n                </th>\n                {/* An input field for entering the energy value */}\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name={selectsPart}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* Additional rows for other nutrient selections */}\n\n              {/* This row shows the fat content */}\n              <tr\n                className={\n                  fett ? \"alert-box\" : null || fettNull ? \"alert-box\" : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {fett ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden fett. Mengden på fett må være lavere enn eller lik 10 g / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {fettNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i fett parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Fett (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"fett\"\n                    value={nutrition.fett}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the saturated fat content */}\n              <tr className={mettede ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {mettede ? (\n                    <Tooltip\n                      title=\"Mangler verdi i mettede fettsyrer parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Mettede fettsyrer (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"mettede\"\n                    value={nutrition.mettede}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the carbohydrate (total sugars)content */}\n              <tr className={karbohydrat ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {/* If the \"karbohydrat\" value is missing, display an exclamation icon with a tooltip */}\n                  {karbohydrat ? (\n                    <Tooltip\n                      title=\"Mangler verdi i karbohydrat parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Karbohydrat (g)\n                </th>\n                {/* Input field for \"karbohydrat\" value */}\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"karbohydrat\"\n                    value={nutrition.karbohydrat}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows hvorav tilsatte sukkerarter (added sugars)content */}\n              <tr\n                className={\n                  hvoravSukkerarter\n                    ? \"alert-box\"\n                    : null || hvoravSukkerarterNull\n                    ? \"alert-box\"\n                    : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {/* If the \"hvoravSukkerarter\" value is too high, display a ban icon with a tooltip */}\n                  {hvoravSukkerarter ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden hvoravSukkerarter. Mengden på hvoravSukkerarter må være lavere enn eller lik 3 g/ 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {/* If the \"hvoravSukkerarter\" value is missing, display an exclamation icon with a tooltip */}\n                  {hvoravSukkerarterNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i hvorav sukkerarter parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Hvorav tilsatte sukkerarter (g)\n                </th>\n                {/* Input field for \"hvoravSukkerarter\" value */}\n\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"hvoravSukkerarter\"\n                    value={nutrition.hvoravSukkerarter}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows kostfiber content */}\n              <tr className={kostfiber ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {kostfiber ? (\n                    <Tooltip\n                      title=\"Mangler verdi i kostfiber parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Kostfiber (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"kostfiber\"\n                    value={nutrition.kostfiber}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the protein content */}\n              <tr className={protein ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {protein ? (\n                    <Tooltip\n                      title=\"Mangler verdi i protein parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Protein (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"protein\"\n                    value={nutrition.protein}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows salt content */}\n              <tr\n                className={\n                  salt ? \"alert-box\" : null || saltNull ? \"alert-box\" : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {salt ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden salt. Mengden på salt må være lavere enn eller lik 2.2 g / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {saltNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i salt parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Salt (g)\n                </th>\n                <td colSpan=\"2\">\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"salt\"\n                    value={nutrition.salt}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n\n        {/* Button that submits the form and calls the onClick function */}\n        <div className=\"col-12 button-div\">\n          <button\n            type=\"submit\"\n            className=\"btn btn-primary btn-lg button-search\"\n            onClick={onClick}\n          >\n            Beregn\n          </button>\n        </div>\n      </div>\n\n      <div className=\"col-md-6\">\n        {/* positive results nøkkelhullet container\" */}\n        {showNokkelhulletResults ? (\n          <div className=\"container nøkkelhullet-food-result-container\">\n            {/* An image with class \"keyhole-logo\" and alt text \"keyhole logo\" */}\n            <img\n              src={keyholeLgog}\n              className=\"keyhole-logo img-fluid\"\n              alt=\"keyhole logo\"\n            />\n            {/* A heading with text \"Nøkkelhullet\" */}\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir Nøkkelhullet. </p>\n              </div>\n              <div className=\"col-md-2\">\n                {/* FontAwesome icon with event listener to show the \"Nøkkelhullet\" information section */}\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  {/* A paragraph with a link to Lovdata's \"Forskrift om frivillig merking a nœringsmidler med Nokkellhullet\" */}\n                  <p>\n                    Les mer om hvilke krav det stilles for merking av\n                    Nokkellhullet på Lovdatas \"Forskrift om frivillig merking a\n                    nœringsmidler med Nokkellhullet\":\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  {/* FontAwesome icon with event listener to hide the \"Nøkkelhullet\" information section */}\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        ) : null}\n        {/*Negative results nøkkelhullet container\" */}\n        {showNokkelhulletResults === false && (\n          <div className=\"container nøkkelhullet-food-negResult-container\">\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir ikke Nøkkelhullet.</p>\n                {showEmptyResult ? (\n                  <p>** Obligatoriske næringsverdier kan ikke være tomme.</p>\n                ) : null}\n\n                {fett ? (\n                  <p>** Fett verdien kan være høyst 10 g/100 g.</p>\n                ) : null}\n\n                {hvoravSukkerarter ? (\n                  <p>\n                    ** Tilsatte sukkerarter verdien kan være høyst 3 g/100 g.\n                  </p>\n                ) : null}\n\n                {salt ? (\n                  <p>** Salt verdien kan være høyst 2.2 g/100 g.</p>\n                ) : null}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om frivillig merking av næringsmidler med Nøkkelhullet:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for ernæringspåstander if there are all true results */}\n        {buttonClicked && (\n          <div\n            className={\n              lowSugars && withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-all\"\n                : !lowSugars && !withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-none\"\n                : \"container ernæringspåstander-food-result-container-some\"\n            }\n          >\n            <h5>Ernæringspåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                {/* Low sugars */}\n                {lowSugars ? (\n                  <div>\n                    <p>** Lavt sukkerinnhold:</p>\n                    <p>\n                      Dette produktet inneholder høyst 5 g sukkerarter per 100 g\n                      for næringsmidler i fast form, eller høyst 2,5 g\n                      sukkerarter per 100 ml for næringsmidler i flytende form\n                      og oppfyller kravet for \"Lavt sukkerinnhold\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Lavt sukkerinnhold\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        For faste næringsmidler, sukkerinnholdet må være høyst 5\n                        g per 100 g.\n                      </li>\n                      <li>\n                        For flytende næringsmidler, sukkerinnholdet må være\n                        høyst 2,5 g per 100 ml.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n\n                {/* No added sugars */}\n                {withNoAddedSugars ? (\n                  <div>\n                    <p>** Uten tilsatt sukker:</p>\n                    <p>\n                      Dette produktet er ikke tilsatt monosakkarider,\n                      disakkarider eller andre næringsmidler på grunn av deres\n                      søtende egenskaper og oppfyller kravet for \"Uten tilsatt\n                      sukker\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Uten tilsatt sukker\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        Produktet må ikke være tilsatt monosakkarider,\n                        disakkarider eller andre næringsmidler på grunn av deres\n                        søtende egenskaper.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"ernaerings\")}\n                />\n              </div>\n            </div>\n            {infoErnaerings ? (\n              // Information section for \"Ernæringspåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"ernaerings\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for Helsepåstander results  */}\n        {showHelsepåstander && (\n          <div\n            className=\"container helsepåstander-food-result-container\"\n            style={{ background: \"#f2f0b5\" }}\n          >\n            <h5>Helsepåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Under utvikling. </p>\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"helsepåstander\")}\n                />\n              </div>\n            </div>\n            {infoHelsepåstander ? (\n              // Information section for \"Helsepåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"helsepåstander\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"15px\" }}></div>\n        {/* conditional rendering for the buttons using showButtons state */}\n        {showButtons && (\n          <div className=\"d-flex justify-content-between\">\n            {/* Save button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-save\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Lagre produkt\n            </button>\n\n            {/* Share button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-share\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Del produkt\n            </button>\n\n            {/* Add a new product button */}\n            <button\n              className=\"btn btn-primary\"\n              onClick={() => window.location.reload()}\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-plus\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Legg til et nytt produkt\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Kategori24b3;\n","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Kategori24b1.js",["475","476","477","478"],[],"import React from \"react\";\nimport { useState, useEffect } from \"react\"; // import the useState and useeffect hook.\nimport { faCircleExclamation } from \"@fortawesome/free-solid-svg-icons\"; // import an icon.\nimport { faBan } from \"@fortawesome/free-solid-svg-icons\";\nimport { faSave, faShare, faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"; // import FontAwesomeIcon component.\nimport Tooltip from \"@mui/material/Tooltip\"; // import Tooltip component.\nimport keyholeLgog from \"./circle-keyhole-logo.png\"; // import an image\nimport { faCircleInfo } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport { faXmarkCircle } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport Select from \"react-select\"; // import Select component\n\nconst Kategori24b1 = () => {\n  // State variables for showing results and empty result message\n  const [showNokkelhulletResults, setShowNokkelhulletResults] = useState(null);\n  const [showErnaeringsResults, setShowErnaeringsResults] = useState(null);\n  const [showHelsepåstander, setShowHelsepåstander] = useState(null);\n  const [showEmptyResult, setShowEmptyResult] = useState(\"\"); // initialize state variable for showing empty result message.\n\n  //state variable to store the user's food type selection (solid or liquid) and the low sugars claim result\n  const [foodType, setFoodType] = useState(\"\");\n  const [lowSugars, setLowSugars] = useState(null);\n\n  //state variable to track whether the product meets the WITH NO ADDED SUGARS claim or not\n  const [withNoAddedSugars, setWithNoAddedSugars] = useState(false);\n\n  // State variable for tracking if the button is clicked\n  const [buttonClicked, setButtonClicked] = useState(false);\n\n  // useEffect hook for checking the condition for the \"WITH NO ADDED SUGARS\" claim when button is clicked\n  useEffect(() => {\n    if (buttonClicked) {\n      if (withNoAddedSugars) {\n        setShowErnaeringsResults(true);\n      } else {\n        setShowErnaeringsResults(false);\n      }\n    }\n  }, [withNoAddedSugars, buttonClicked]);\n\n  //state for controlling the buttons' visibility\n  const [showButtons, setShowButtons] = useState(false);\n\n  // State variables to control the visibility of the information sections\n  const [infoNokkelhullet, setInfoNokkelhullet] = useState(false);\n  const [infoErnaerings, setInfoErnaerings] = useState(false);\n  const [infoHelsepåstander, setInfoHelsepåstander] = useState(false);\n\n  // Function to show an information section based on the container parameter\n  const onClickInfo = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(true);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(true);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(true);\n    }\n  };\n\n  // Function to hide an information section based on the container parameter\n  const onClickClose = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(false);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(false);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(false);\n    }\n  };\n\n  // State variables for handling input fields and validation errors\n  const [energikj, setEnergikj] = useState(false);\n  const [energikcal, setEnergikcal] = useState(false);\n\n  const [fett, setFett] = useState(false);\n  const [fettNull, setFettNull] = useState(false);\n  const [mettede, setMettede] = useState(false);\n  const [karbohydrat, setKarbohydrat] = useState(false);\n  const [hvoravSukkerarter, setHvoravSukkerarter] = useState(false);\n  const [hvoravSukkerarterNull, setHvoravSukkerarterNull] = useState(false);\n  const [kostfiber, setKostfiber] = useState(false);\n  const [protein, setProtein] = useState(false);\n  const [salt, setSalt] = useState(false);\n  const [saltNull, setSaltNull] = useState(false);\n  // State variable for storing nutrition information entered by user\n  const [nutrition, setNutrition] = useState({\n    energikj: \"\",\n    energikcal: \"\",\n    fett: \"\",\n    mettede: \"\",\n    karbohydrat: \"\",\n    hvoravSukkerarter: \"\",\n    kostfiber: \"\",\n    protein: \"\",\n    salt: \"\",\n  });\n\n  // Handler for updating nutrition state/state variable based on input field changes/input values\n  const changeHandle = (event) => {\n    console.log(\"changeHandle ===\", event.target, event.target.value);\n    setNutrition({\n      ...nutrition,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  // define function to handle form submission\n  const onClick = (e) => {\n    e.preventDefault();\n    setButtonClicked(true);\n    setShowHelsepåstander(true);\n    setShowButtons(true);\n\n    console.log(\"onclick ===\", selectsPart, nutrition);\n\n    // Check if all required fields are filled out and within valid ranges\n    // The if statement checks if all required inputs are non-empty and meet the nutritional requirements\n    if (\n      nutrition.fett !== \"\" &&\n      nutrition.fett <= 10 &&\n      nutrition.mettede !== \"\" &&\n      nutrition.karbohydrat !== \"\" &&\n      nutrition.hvoravSukkerarter !== \"\" &&\n      nutrition.hvoravSukkerarter <= 3 &&\n      nutrition.kostfiber !== \"\" &&\n      nutrition.protein !== \"\" &&\n      nutrition.salt !== \"\" &&\n      nutrition.salt <= 1.7\n    ) {\n      // If all requirements are met, display the nutrition results\n      setShowNokkelhulletResults(true);\n      // Hide any empty result messages or error messages\n      setShowEmptyResult(false);\n\n      // Check if the user selected \"energikj\" and if nutrition input lable of \"energikj\" is not empty\n      if (selectsPart === \"energikj\" && nutrition.energikj !== \"\") {\n        setEnergikj(false);\n      }\n\n      // Check if the user selected \"energikcal\" and if nutrition input lable of \"energikcal\" is not empty\n      if (selectsPart === \"energikcal\" && nutrition.energikcal !== \"\") {\n        setEnergikcal(false);\n      }\n      // Reset all input validation errors\n      setFett(false);\n      setFettNull(false);\n      setMettede(false);\n      setKarbohydrat(false);\n      setHvoravSukkerarter(false);\n      setHvoravSukkerarterNull(false);\n      setKostfiber(false);\n      setProtein(false);\n      setSalt(false);\n      setSaltNull(false);\n      // If the user has not selected any nutrients, set errors accordingly\n      // Check each nutrition value to see if it is missing or negative\n      // show input validation errors if any input is missing or negative.\n    } else {\n      if (selectsPart === \"energikj\") {\n        console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n        if (nutrition.energikj === \"\" || nutrition.energikj < 0) {\n          console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n          setEnergikj(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikj(false);\n        }\n      }\n\n      if (selectsPart === \"energikcal\") {\n        console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n        if (nutrition.energikcal === \"\" || nutrition.energikcal < 0) {\n          console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n          setEnergikcal(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikcal(false);\n        }\n      }\n\n      // repeat for each nutrition value...\n      if (nutrition.fett === \"\" || nutrition.fett < 0) {\n        setFettNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setFettNull(false);\n      }\n      if (nutrition.fett > 10) {\n        setFett(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setFett(false);\n      }\n\n      if (nutrition.mettede === \"\" || nutrition.mettede < 0) {\n        setMettede(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setMettede(false);\n      }\n\n      // Check if the 'karbohydrat' input is missing or negative, and display an error message if necessary\n      if (nutrition.karbohydrat === \"\" || nutrition.karbohydrat < 0) {\n        setKarbohydrat(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKarbohydrat(false);\n      }\n\n      // Check if the 'hvoravSukkerarter' input is missing, negative or above the maximum allowed value (1),\n      // and display an error message if necessary\n      if (\n        nutrition.hvoravSukkerarter === \"\" ||\n        nutrition.hvoravSukkerarter < 0\n      ) {\n        setHvoravSukkerarterNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setHvoravSukkerarterNull(false);\n      }\n      if (nutrition.hvoravSukkerarter > 3) {\n        setHvoravSukkerarter(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setHvoravSukkerarter(false);\n      }\n\n      if (nutrition.kostfiber === \"\" || nutrition.kostfiber < 0) {\n        setKostfiber(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKostfiber(false);\n      }\n\n      if (nutrition.protein === \"\" || nutrition.protein < 0) {\n        setProtein(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setProtein(false);\n      }\n\n      if (nutrition.salt === \"\" || nutrition.salt < 0) {\n        setSaltNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setSaltNull(false);\n      }\n      if (nutrition.salt > 1.7) {\n        setSalt(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setSalt(false);\n      }\n    }\n\n    // Check for the \"LOW SUGARS\" claim\n    if (foodType === \"solid\" && parseFloat(nutrition.karbohydrat) <= 5) {\n      setLowSugars(true);\n    } else if (\n      foodType === \"liquid\" &&\n      parseFloat(nutrition.karbohydrat) <= 2.5\n    ) {\n      setLowSugars(true);\n    } else {\n      setLowSugars(false);\n    }\n\n    // Check the condition for the \"WITH NO ADDED SUGARS\" nutrition claim\n    if (nutrition.hvoravSukkerarter === \"0\" && nutrition.karbohydrat > 0) {\n      setWithNoAddedSugars(true);\n    } else {\n      setWithNoAddedSugars(false);\n    }\n  };\n\n  // create an array of energy units to select from\n  const selectUnit = [\n    {\n      value: \"energikj\",\n      label: \"(kj)\",\n    },\n    {\n      value: \"energikcal\",\n      label: \"(kcal)\",\n    },\n  ];\n\n  // Declare a state variable for the select dropdown.\n  const [selectsPart, setSelectPart] = useState(\"\");\n\n  // A function to handle changes to the select dropdown energy unit\n  const handlerPart = (event) => {\n    const inputVal = document.getElementsByName(event.value);\n    console.log(\"handlerPart ===\", event, nutrition, inputVal);\n    setSelectPart(event.value);\n  };\n\n  //create an array of food types to select from\n  const foodTypes = [\n    {\n      value: \"solid\",\n      label: \"Fast form\",\n    },\n    {\n      value: \"liquid\",\n      label: \"Flytende form\",\n    },\n  ];\n\n  return (\n    <div className=\"row\">\n      {/* This div creates a column layout for the left side of the table */}\n      <div className=\"col-md-6\">\n        {/* the selector (dropdown menu) for choosing the food type. */}\n        <div className=\"form-group\">\n          <label htmlFor=\"foodType\">Velg type matvare:</label>\n          <Select\n            className=\"form-control\"\n            id=\"foodType\"\n            options={foodTypes}\n            onChange={(e) => setFoodType(e.value)} // update the onFoodTypeChange function to directly set the food type state\n            placeholder=\"Velg type matvare\"\n          />\n        </div>\n\n        <h5>\n          Næringsinnhold per 100{\" \"}\n          {foodType === \"solid\" ? \"g\" : foodType === \"liquid\" ? \"ml\" : \"g/ml\"}\n        </h5>\n\n        {/* This div adds a light background color to the table */}\n        <div className=\"bg-light\">\n          {/* This table shows the nutritional information */}\n          <table className=\"table table-striped\">\n            {/* The table header */}\n            <thead>\n              <tr>\n                <th scope=\"col\" className=\"table-font\">\n                  Energi eller næringsstoff\n                </th>\n                <th scope=\"col\" className=\"table-font\">\n                  Mengde\n                </th>\n              </tr>\n            </thead>\n\n            {/* The table body */}\n            <tbody>\n              {/* This row shows the energy content */}\n              <tr className={(energikj, energikcal ? \"alert-box\" : null)}>\n                <th scope=\"row\" className=\"table-font\">\n                  {/* An icon with a tooltip to indicate missing values in energy parameters */}\n                  {energikj && energikcal ? (\n                    <Tooltip\n                      title=\"Mangler verdi i energi (kJ/Kcal) parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  {/* This div displays the energy label and unit */}\n                  <div className=\"row\">\n                    <div className=\"col-md-3\">\n                      <label for=\"energiunit\" class=\"form-label\">\n                        Energi\n                      </label>\n                    </div>\n                    {/* A dropdown menu for selecting the energy unit */}\n                    <div className=\"col-md-6\">\n                      <Select\n                        placeholder={<div>Velg enhet</div>}\n                        className=\"form-select-md mb-3\"\n                        options={selectUnit}\n                        onChange={(e) => handlerPart(e)}\n                      />\n                    </div>\n                  </div>\n                </th>\n                {/* An input field for entering the energy value */}\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name={selectsPart}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* Additional rows for other nutrient selections */}\n\n              {/* This row shows the fat content */}\n              <tr\n                className={\n                  fett ? \"alert-box\" : null || fettNull ? \"alert-box\" : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {fett ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden fett. Mengden på fett må være lavere enn eller lik 10 g / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {fettNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i fett parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Fett (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"fett\"\n                    value={nutrition.fett}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the saturated fat content */}\n              <tr className={mettede ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {mettede ? (\n                    <Tooltip\n                      title=\"Mangler verdi i mettede fettsyrer parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Mettede fettsyrer (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"mettede\"\n                    value={nutrition.mettede}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the carbohydrate (total sugars)content */}\n              <tr className={karbohydrat ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {/* If the \"karbohydrat\" value is missing, display an exclamation icon with a tooltip */}\n                  {karbohydrat ? (\n                    <Tooltip\n                      title=\"Mangler verdi i karbohydrat parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Karbohydrat (g)\n                </th>\n                {/* Input field for \"karbohydrat\" value */}\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"karbohydrat\"\n                    value={nutrition.karbohydrat}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows hvorav tilsatte sukkerarter (added sugars)content */}\n              <tr\n                className={\n                  hvoravSukkerarter\n                    ? \"alert-box\"\n                    : null || hvoravSukkerarterNull\n                    ? \"alert-box\"\n                    : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {/* If the \"hvoravSukkerarter\" value is too high, display a ban icon with a tooltip */}\n                  {hvoravSukkerarter ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden hvoravSukkerarter. Mengden på hvoravSukkerarter må være lavere enn eller lik 3 g/ 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {/* If the \"hvoravSukkerarter\" value is missing, display an exclamation icon with a tooltip */}\n                  {hvoravSukkerarterNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i hvorav sukkerarter parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Hvorav tilsatte sukkerarter (g)\n                </th>\n                {/* Input field for \"hvoravSukkerarter\" value */}\n\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"hvoravSukkerarter\"\n                    value={nutrition.hvoravSukkerarter}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows kostfiber content */}\n              <tr className={kostfiber ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {kostfiber ? (\n                    <Tooltip\n                      title=\"Mangler verdi i kostfiber parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Kostfiber (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"kostfiber\"\n                    value={nutrition.kostfiber}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the protein content */}\n              <tr className={protein ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {protein ? (\n                    <Tooltip\n                      title=\"Mangler verdi i protein parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Protein (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"protein\"\n                    value={nutrition.protein}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows salt content */}\n              <tr\n                className={\n                  salt ? \"alert-box\" : null || saltNull ? \"alert-box\" : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {salt ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden salt. Mengden på salt må være lavere enn eller lik 1.7 g / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {saltNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i salt parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Salt (g)\n                </th>\n                <td colSpan=\"2\">\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"salt\"\n                    value={nutrition.salt}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n\n        {/* Button that submits the form and calls the onClick function */}\n        <div className=\"col-12 button-div\">\n          <button\n            type=\"submit\"\n            className=\"btn btn-primary btn-lg button-search\"\n            onClick={onClick}\n          >\n            Beregn\n          </button>\n        </div>\n      </div>\n\n      <div className=\"col-md-6\">\n        {/* positive results nøkkelhullet container\" */}\n        {showNokkelhulletResults ? (\n          <div className=\"container nøkkelhullet-food-result-container\">\n            {/* An image with class \"keyhole-logo\" and alt text \"keyhole logo\" */}\n            <img\n              src={keyholeLgog}\n              className=\"keyhole-logo img-fluid\"\n              alt=\"keyhole logo\"\n            />\n            {/* A heading with text \"Nøkkelhullet\" */}\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir Nøkkelhullet. </p>\n              </div>\n              <div className=\"col-md-2\">\n                {/* FontAwesome icon with event listener to show the \"Nøkkelhullet\" information section */}\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  {/* A paragraph with a link to Lovdata's \"Forskrift om frivillig merking a nœringsmidler med Nokkellhullet\" */}\n                  <p>\n                    Les mer om hvilke krav det stilles for merking av\n                    Nokkellhullet på Lovdatas \"Forskrift om frivillig merking a\n                    nœringsmidler med Nokkellhullet\":\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  {/* FontAwesome icon with event listener to hide the \"Nøkkelhullet\" information section */}\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        ) : null}\n        {/*Negative results nøkkelhullet container\" */}\n        {showNokkelhulletResults === false && (\n          <div className=\"container nøkkelhullet-food-negResult-container\">\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir ikke Nøkkelhullet.</p>\n                {showEmptyResult ? (\n                  <p>** Obligatoriske næringsverdier kan ikke være tomme.</p>\n                ) : null}\n\n                {fett ? (\n                  <p>** Fett verdien kan være høyst 10 g/100 g.</p>\n                ) : null}\n\n                {hvoravSukkerarter ? (\n                  <p>\n                    ** Tilsatte sukkerarter verdien kan være høyst 3 g/100 g.\n                  </p>\n                ) : null}\n\n                {salt ? (\n                  <p>** Salt verdien kan være høyst 1.7 g/100 g.</p>\n                ) : null}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om frivillig merking av næringsmidler med Nøkkelhullet:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for ernæringspåstander if there are all true results */}\n        {buttonClicked && (\n          <div\n            className={\n              lowSugars && withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-all\"\n                : !lowSugars && !withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-none\"\n                : \"container ernæringspåstander-food-result-container-some\"\n            }\n          >\n            <h5>Ernæringspåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                {/* Low sugars */}\n                {lowSugars ? (\n                  <div>\n                    <p>** Lavt sukkerinnhold:</p>\n                    <p>\n                      Dette produktet inneholder høyst 5 g sukkerarter per 100 g\n                      for næringsmidler i fast form, eller høyst 2,5 g\n                      sukkerarter per 100 ml for næringsmidler i flytende form\n                      og oppfyller kravet for \"Lavt sukkerinnhold\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Lavt sukkerinnhold\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        For faste næringsmidler, sukkerinnholdet må være høyst 5\n                        g per 100 g.\n                      </li>\n                      <li>\n                        For flytende næringsmidler, sukkerinnholdet må være\n                        høyst 2,5 g per 100 ml.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n\n                {/* No added sugars */}\n                {withNoAddedSugars ? (\n                  <div>\n                    <p>** Uten tilsatt sukker:</p>\n                    <p>\n                      Dette produktet er ikke tilsatt monosakkarider,\n                      disakkarider eller andre næringsmidler på grunn av deres\n                      søtende egenskaper og oppfyller kravet for \"Uten tilsatt\n                      sukker\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Uten tilsatt sukker\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        Produktet må ikke være tilsatt monosakkarider,\n                        disakkarider eller andre næringsmidler på grunn av deres\n                        søtende egenskaper.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"ernaerings\")}\n                />\n              </div>\n            </div>\n            {infoErnaerings ? (\n              // Information section for \"Ernæringspåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"ernaerings\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for Helsepåstander results  */}\n        {showHelsepåstander && (\n          <div\n            className=\"container helsepåstander-food-result-container\"\n            style={{ background: \"#f2f0b5\" }}\n          >\n            <h5>Helsepåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Under utvikling. </p>\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"helsepåstander\")}\n                />\n              </div>\n            </div>\n            {infoHelsepåstander ? (\n              // Information section for \"Helsepåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"helsepåstander\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"15px\" }}></div>\n        {/* conditional rendering for the buttons using showButtons state */}\n        {showButtons && (\n          <div className=\"d-flex justify-content-between\">\n            {/* Save button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-save\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Lagre produkt\n            </button>\n\n            {/* Share button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-share\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Del produkt\n            </button>\n\n            {/* Add a new product button */}\n            <button\n              className=\"btn btn-primary\"\n              onClick={() => window.location.reload()}\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-plus\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Legg til et nytt produkt\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Kategori24b1;\n","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Kategori24a1.js",["479","480","481","482"],[],"import React from \"react\";\nimport { useState, useEffect } from \"react\"; // import the useState and useeffect hook.\nimport { faCircleExclamation } from \"@fortawesome/free-solid-svg-icons\"; // import an icon.\nimport { faBan } from \"@fortawesome/free-solid-svg-icons\";\nimport { faSave, faShare, faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"; // import FontAwesomeIcon component.\nimport Tooltip from \"@mui/material/Tooltip\"; // import Tooltip component.\nimport keyholeLgog from \"./circle-keyhole-logo.png\"; // import an image\nimport { faCircleInfo } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport { faXmarkCircle } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport Select from \"react-select\"; // import Select component\n\nconst Kategori24a1 = () => {\n  // State variables for showing results and empty result message\n  const [showNokkelhulletResults, setShowNokkelhulletResults] = useState(null);\n  const [showErnaeringsResults, setShowErnaeringsResults] = useState(null);\n  const [showHelsepåstander, setShowHelsepåstander] = useState(null);\n  const [showEmptyResult, setShowEmptyResult] = useState(\"\"); // initialize state variable for showing empty result message.\n\n  //state variable to store the user's food type selection (solid or liquid) and the low sugars claim result\n  const [foodType, setFoodType] = useState(\"\");\n  const [lowSugars, setLowSugars] = useState(null);\n\n  //state variable to track whether the product meets the WITH NO ADDED SUGARS claim or not\n  const [withNoAddedSugars, setWithNoAddedSugars] = useState(false);\n\n  // State variable for tracking if the button is clicked\n  const [buttonClicked, setButtonClicked] = useState(false);\n\n  // useEffect hook for checking the condition for the \"WITH NO ADDED SUGARS\" claim when button is clicked\n  useEffect(() => {\n    if (buttonClicked) {\n      if (withNoAddedSugars) {\n        setShowErnaeringsResults(true);\n      } else {\n        setShowErnaeringsResults(false);\n      }\n    }\n  }, [withNoAddedSugars, buttonClicked]);\n\n  //state for controlling the buttons' visibility\n  const [showButtons, setShowButtons] = useState(false);\n\n  // State variables to control the visibility of the information sections\n  const [infoNokkelhullet, setInfoNokkelhullet] = useState(false);\n  const [infoErnaerings, setInfoErnaerings] = useState(false);\n  const [infoHelsepåstander, setInfoHelsepåstander] = useState(false);\n\n  // Function to show an information section based on the container parameter\n  const onClickInfo = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(true);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(true);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(true);\n    }\n  };\n\n  // Function to hide an information section based on the container parameter\n  const onClickClose = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(false);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(false);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(false);\n    }\n  };\n\n  // State variables for handling input fields and validation errors\n  const [energikj, setEnergikj] = useState(false);\n  const [energikcal, setEnergikcal] = useState(false);\n\n  const [fett, setFett] = useState(false);\n  const [fettNull, setFettNull] = useState(false);\n  const [mettede, setMettede] = useState(false);\n  const [karbohydrat, setKarbohydrat] = useState(false);\n  const [karbohydratNull, setKarbohydratNull] = useState(false);\n  const [hvoravSukkerarter, setHvoravSukkerarter] = useState(false);\n  const [kostfiber, setKostfiber] = useState(false);\n  const [protein, setProtein] = useState(false);\n  const [salt, setSalt] = useState(false);\n  const [saltNull, setSaltNull] = useState(false);\n\n  // State variable for storing nutrition information entered by user\n  const [nutrition, setNutrition] = useState({\n    energikj: \"\",\n    energikcal: \"\",\n    fett: \"\",\n    mettede: \"\",\n    karbohydrat: \"\",\n    hvoravSukkerarter: \"\",\n    kostfiber: \"\",\n    protein: \"\",\n    salt: \"\",\n  });\n\n  // Handler for updating nutrition state/state variable based on input field changes/input values\n  const changeHandle = (event) => {\n    console.log(\"changeHandle ===\", event.target, event.target.value);\n    setNutrition({\n      ...nutrition,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  // define function to handle form submission\n  const onClick = (e) => {\n    e.preventDefault();\n    setButtonClicked(true);\n    setShowHelsepåstander(true);\n    setShowButtons(true);\n\n    console.log(\"onclick ===\", selectsPart, nutrition);\n\n    // Check if all required fields are filled out and within valid ranges\n    // The if statement checks if all required inputs are non-empty and meet the nutritional requirements\n    if (\n      nutrition.fett !== \"\" &&\n      nutrition.fett <= 10 &&\n      nutrition.mettede !== \"\" &&\n      nutrition.karbohydrat !== \"\" &&\n      nutrition.karbohydrat <= 3 &&\n      nutrition.hvoravSukkerarter !== \"\" &&\n      nutrition.kostfiber !== \"\" &&\n      nutrition.protein !== \"\" &&\n      nutrition.salt !== \"\" &&\n      nutrition.salt <= 1\n    ) {\n      // If all requirements are met, display the nutrition results\n      setShowNokkelhulletResults(true);\n      // Hide any empty result messages or error messages\n      setShowEmptyResult(false);\n\n      // Check if the user selected \"energikj\" and if nutrition input lable of \"energikj\" is not empty\n      if (selectsPart === \"energikj\" && nutrition.energikj !== \"\") {\n        setEnergikj(false);\n      }\n\n      // Check if the user selected \"energikcal\" and if nutrition input lable of \"energikcal\" is not empty\n      if (selectsPart === \"energikcal\" && nutrition.energikcal !== \"\") {\n        setEnergikcal(false);\n      }\n      // Reset all input validation errors\n      setFett(false);\n      setFettNull(false);\n      setMettede(false);\n      setKarbohydrat(false);\n      setKarbohydratNull(false);\n      setHvoravSukkerarter(false);\n      setKostfiber(false);\n      setProtein(false);\n      setSalt(false);\n      setSaltNull(false);\n      // If the user has not selected any nutrients, set errors accordingly\n      // Check each nutrition value to see if it is missing or negative\n      // show input validation errors if any input is missing or negative.\n    } else {\n      if (selectsPart === \"energikj\") {\n        console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n        if (nutrition.energikj === \"\" || nutrition.energikj < 0) {\n          console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n          setEnergikj(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikj(false);\n        }\n      }\n\n      if (selectsPart === \"energikcal\") {\n        console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n        if (nutrition.energikcal === \"\" || nutrition.energikcal < 0) {\n          console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n          setEnergikcal(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikcal(false);\n        }\n      }\n\n      // repeat for each nutrition value...\n      if (nutrition.fett === \"\" || nutrition.fett < 0) {\n        setFettNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setFettNull(false);\n      }\n      if (nutrition.fett > 10) {\n        setFett(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setFett(false);\n      }\n\n      if (nutrition.mettede === \"\" || nutrition.mettede < 0) {\n        setMettede(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setMettede(false);\n      }\n\n      if (nutrition.karbohydrat === \"\" || nutrition.karbohydrat < 0) {\n        setKarbohydratNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKarbohydratNull(false);\n      }\n      if (nutrition.karbohydrat > 3) {\n        setKarbohydrat(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setKarbohydrat(false);\n      }\n\n      if (\n        nutrition.hvoravSukkerarter === \"\" ||\n        nutrition.hvoravSukkerarter < 0\n      ) {\n        setHvoravSukkerarter(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setHvoravSukkerarter(false);\n      }\n\n      if (nutrition.kostfiber === \"\" || nutrition.kostfiber < 0) {\n        setKostfiber(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKostfiber(false);\n      }\n\n      if (nutrition.protein === \"\" || nutrition.protein < 0) {\n        setProtein(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setProtein(false);\n      }\n\n      if (nutrition.salt === \"\" || nutrition.salt < 0) {\n        setSaltNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setSaltNull(false);\n      }\n      if (nutrition.salt > 1) {\n        setSalt(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setSalt(false);\n      }\n    }\n\n    // Check for the \"LOW SUGARS\" claim\n    if (foodType === \"solid\" && parseFloat(nutrition.karbohydrat) <= 5) {\n      setLowSugars(true);\n    } else if (\n      foodType === \"liquid\" &&\n      parseFloat(nutrition.karbohydrat) <= 2.5\n    ) {\n      setLowSugars(true);\n    } else {\n      setLowSugars(false);\n    }\n\n    // Check the condition for the \"WITH NO ADDED SUGARS\" nutrition claim\n    if (nutrition.hvoravSukkerarter === \"0\" && nutrition.karbohydrat > 0) {\n      setWithNoAddedSugars(true);\n    } else {\n      setWithNoAddedSugars(false);\n    }\n  };\n\n  // create an array of energy units to select from\n  const selectUnit = [\n    {\n      value: \"energikj\",\n      label: \"(kj)\",\n    },\n    {\n      value: \"energikcal\",\n      label: \"(kcal)\",\n    },\n  ];\n\n  // Declare a state variable for the select dropdown.\n  const [selectsPart, setSelectPart] = useState(\"\");\n\n  // A function to handle changes to the select dropdown energy unit\n  const handlerPart = (event) => {\n    const inputVal = document.getElementsByName(event.value);\n    console.log(\"handlerPart ===\", event, nutrition, inputVal);\n    setSelectPart(event.value);\n  };\n\n  //create an array of food types to select from\n  const foodTypes = [\n    {\n      value: \"solid\",\n      label: \"Fast form\",\n    },\n    {\n      value: \"liquid\",\n      label: \"Flytende form\",\n    },\n  ];\n\n  return (\n    <div className=\"row\">\n      {/* This div creates a column layout for the left side of the table */}\n      <div className=\"col-md-6\">\n        {/* the selector (dropdown menu) for choosing the food type. */}\n        <div className=\"form-group\">\n          <label htmlFor=\"foodType\">Velg type matvare:</label>\n          <Select\n            className=\"form-control\"\n            id=\"foodType\"\n            options={foodTypes}\n            onChange={(e) => setFoodType(e.value)} // update the onFoodTypeChange function to directly set the food type state\n            placeholder=\"Velg type matvare\"\n          />\n        </div>\n\n        <h5>\n          Næringsinnhold per 100{\" \"}\n          {foodType === \"solid\" ? \"g\" : foodType === \"liquid\" ? \"ml\" : \"g/ml\"}\n        </h5>\n\n        {/* This div adds a light background color to the table */}\n        <div className=\"bg-light\">\n          {/* This table shows the nutritional information */}\n          <table className=\"table table-striped\">\n            {/* The table header */}\n            <thead>\n              <tr>\n                <th scope=\"col\" className=\"table-font\">\n                  Energi eller næringsstoff\n                </th>\n                <th scope=\"col\" className=\"table-font\">\n                  Mengde\n                </th>\n              </tr>\n            </thead>\n\n            {/* The table body */}\n            <tbody>\n              {/* This row shows the energy content */}\n              <tr className={(energikj, energikcal ? \"alert-box\" : null)}>\n                <th scope=\"row\" className=\"table-font\">\n                  {/* An icon with a tooltip to indicate missing values in energy parameters */}\n                  {energikj && energikcal ? (\n                    <Tooltip\n                      title=\"Mangler verdi i energi (kJ/Kcal) parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  {/* This div displays the energy label and unit */}\n                  <div className=\"row\">\n                    <div className=\"col-md-3\">\n                      <label for=\"energiunit\" class=\"form-label\">\n                        Energi\n                      </label>\n                    </div>\n                    {/* A dropdown menu for selecting the energy unit */}\n                    <div className=\"col-md-6\">\n                      <Select\n                        placeholder={<div>Velg enhet</div>}\n                        className=\"form-select-md mb-3\"\n                        options={selectUnit}\n                        onChange={(e) => handlerPart(e)}\n                      />\n                    </div>\n                  </div>\n                </th>\n                {/* An input field for entering the energy value */}\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name={selectsPart}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* Additional rows for other nutrient selections */}\n              {/* This row shows the fat content */}\n              <tr\n                className={\n                  fett ? \"alert-box\" : null || fettNull ? \"alert-box\" : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {fett ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden fett. Mengden på fett må være lavere enn eller lik 10 g / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {fettNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i fett parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Fett (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"fett\"\n                    value={nutrition.fett}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the saturated fat content */}\n              <tr className={mettede ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {mettede ? (\n                    <Tooltip\n                      title=\"Mangler verdi i mettede fettsyrer parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Mettede fettsyrer (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"mettede\"\n                    value={nutrition.mettede}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the carbohydrate content */}\n              <tr\n                className={\n                  karbohydrat\n                    ? \"alert-box\"\n                    : null || karbohydratNull\n                    ? \"alert-box\"\n                    : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {karbohydrat ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden sukkerarter. Mengden på sukkerarter må være lavere enn eller lik 3 g / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {karbohydratNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i karbohydrat parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Karbohydrat (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"karbohydrat\"\n                    value={nutrition.karbohydrat}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows hvorav sukkerarter content */}\n              <tr className={hvoravSukkerarter ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {hvoravSukkerarter ? (\n                    <Tooltip\n                      title=\"Mangler verdi i hvorav sukkerarter parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Hvorav tilsatte sukkerarter (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"hvoravSukkerarter\"\n                    value={nutrition.hvoravSukkerarter}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows kostfiber content */}\n              <tr className={kostfiber ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {kostfiber ? (\n                    <Tooltip\n                      title=\"Mangler verdi i kostfiber parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Kostfiber (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"kostfiber\"\n                    value={nutrition.kostfiber}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the protein content */}\n              <tr className={protein ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {protein ? (\n                    <Tooltip\n                      title=\"Mangler verdi i protein parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Protein (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"protein\"\n                    value={nutrition.protein}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows salt content */}\n              <tr\n                className={\n                  salt ? \"alert-box\" : null || saltNull ? \"alert-box\" : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {salt ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden salt. Mengden på salt må være lavere enn eller lik 1 g / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {saltNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i salt parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Salt (g)\n                </th>\n                <td colSpan=\"2\">\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"salt\"\n                    value={nutrition.salt}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n\n        {/* Button that submits the form and calls the onClick function */}\n        <div className=\"col-12 button-div\">\n          <button\n            type=\"submit\"\n            className=\"btn btn-primary btn-lg button-search\"\n            onClick={onClick}\n          >\n            Beregn\n          </button>\n        </div>\n      </div>\n\n      <div className=\"col-md-6\">\n        {/* positive results nøkkelhullet container\" */}\n        {showNokkelhulletResults ? (\n          <div className=\"container nøkkelhullet-food-result-container\">\n            {/* An image with class \"keyhole-logo\" and alt text \"keyhole logo\" */}\n            <img\n              src={keyholeLgog}\n              className=\"keyhole-logo img-fluid\"\n              alt=\"keyhole logo\"\n            />\n            {/* A heading with text \"Nøkkelhullet\" */}\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir Nøkkelhullet. </p>\n              </div>\n              <div className=\"col-md-2\">\n                {/* FontAwesome icon with event listener to show the \"Nøkkelhullet\" information section */}\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  {/* A paragraph with a link to Lovdata's \"Forskrift om frivillig merking a nœringsmidler med Nokkellhullet\" */}\n                  <p>\n                    Les mer om hvilke krav det stilles for merking av\n                    Nokkellhullet på Lovdatas \"Forskrift om frivillig merking a\n                    nœringsmidler med Nokkellhullet\":\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  {/* FontAwesome icon with event listener to hide the \"Nøkkelhullet\" information section */}\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        ) : null}\n        {/*Negative results nøkkelhullet container\" */}\n        {showNokkelhulletResults === false && (\n          <div className=\"container nøkkelhullet-food-negResult-container\">\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir ikke Nøkkelhullet.</p>\n                {showEmptyResult ? (\n                  <p>** Obligatoriske næringsverdier kan ikke være tomme.</p>\n                ) : null}\n\n                {fett ? (\n                  <p>** Fett verdien kan være høyst 10 g/100 g.</p>\n                ) : null}\n\n                {karbohydrat ? (\n                  <p>** Sukkerarter verdien kan være høyst 3 g/100 g.</p>\n                ) : null}\n                {salt ? <p>** Salt verdien kan være høyst 1 g/100 g.</p> : null}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om frivillig merking av næringsmidler med Nøkkelhullet:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for ernæringspåstander if there are all true results */}\n        {buttonClicked && (\n          <div\n            className={\n              lowSugars && withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-all\"\n                : !lowSugars && !withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-none\"\n                : \"container ernæringspåstander-food-result-container-some\"\n            }\n          >\n            <h5>Ernæringspåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                {/* Low sugars */}\n                {lowSugars ? (\n                  <div>\n                    <p>** Lavt sukkerinnhold:</p>\n                    <p>\n                      Dette produktet inneholder høyst 5 g sukkerarter per 100 g\n                      for næringsmidler i fast form, eller høyst 2,5 g\n                      sukkerarter per 100 ml for næringsmidler i flytende form\n                      og oppfyller kravet for \"Lavt sukkerinnhold\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Lavt sukkerinnhold\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        For faste næringsmidler, sukkerinnholdet må være høyst 5\n                        g per 100 g.\n                      </li>\n                      <li>\n                        For flytende næringsmidler, sukkerinnholdet må være\n                        høyst 2,5 g per 100 ml.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n\n                {/* No added sugars */}\n                {withNoAddedSugars ? (\n                  <div>\n                    <p>** Uten tilsatt sukker:</p>\n                    <p>\n                      Dette produktet er ikke tilsatt monosakkarider,\n                      disakkarider eller andre næringsmidler på grunn av deres\n                      søtende egenskaper og oppfyller kravet for \"Uten tilsatt\n                      sukker\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Uten tilsatt sukker\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        Produktet må ikke være tilsatt monosakkarider,\n                        disakkarider eller andre næringsmidler på grunn av deres\n                        søtende egenskaper.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"ernaerings\")}\n                />\n              </div>\n            </div>\n            {infoErnaerings ? (\n              // Information section for \"Ernæringspåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"ernaerings\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for Helsepåstander results  */}\n        {showHelsepåstander && (\n          <div\n            className=\"container helsepåstander-food-result-container\"\n            style={{ background: \"#f2f0b5\" }}\n          >\n            <h5>Helsepåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Under utvikling. </p>\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"helsepåstander\")}\n                />\n              </div>\n            </div>\n            {infoHelsepåstander ? (\n              // Information section for \"Helsepåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"helsepåstander\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"15px\" }}></div>\n        {/* conditional rendering for the buttons using showButtons state */}\n        {showButtons && (\n          <div className=\"d-flex justify-content-between\">\n            {/* Save button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-save\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Lagre produkt\n            </button>\n\n            {/* Share button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-share\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Del produkt\n            </button>\n\n            {/* Add a new product button */}\n            <button\n              className=\"btn btn-primary\"\n              onClick={() => window.location.reload()}\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-plus\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Legg til et nytt produkt\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Kategori24a1;\n","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Kategori24b2.js",["483","484","485","486"],[],"import React from \"react\";\nimport { useState, useEffect } from \"react\"; // import the useState and useeffect hook.\nimport { faCircleExclamation } from \"@fortawesome/free-solid-svg-icons\"; // import an icon.\nimport { faBan } from \"@fortawesome/free-solid-svg-icons\";\nimport { faSave, faShare, faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"; // import FontAwesomeIcon component.\nimport Tooltip from \"@mui/material/Tooltip\"; // import Tooltip component.\nimport keyholeLgog from \"./circle-keyhole-logo.png\"; // import an image\nimport { faCircleInfo } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport { faXmarkCircle } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport Select from \"react-select\"; // import Select component\n\nconst Kategori24b2 = () => {\n  // State variables for showing results and empty result message\n  const [showNokkelhulletResults, setShowNokkelhulletResults] = useState(null);\n  const [showErnaeringsResults, setShowErnaeringsResults] = useState(null);\n  const [showHelsepåstander, setShowHelsepåstander] = useState(null);\n  const [showEmptyResult, setShowEmptyResult] = useState(\"\"); // initialize state variable for showing empty result message.\n\n  //state variable to store the user's food type selection (solid or liquid) and the low sugars claim result\n  const [foodType, setFoodType] = useState(\"\");\n  const [lowSugars, setLowSugars] = useState(null);\n\n  //state variable to track whether the product meets the WITH NO ADDED SUGARS claim or not\n  const [withNoAddedSugars, setWithNoAddedSugars] = useState(false);\n\n  // State variable for tracking if the button is clicked\n  const [buttonClicked, setButtonClicked] = useState(false);\n\n  // useEffect hook for checking the condition for the \"WITH NO ADDED SUGARS\" claim when button is clicked\n  useEffect(() => {\n    if (buttonClicked) {\n      if (withNoAddedSugars) {\n        setShowErnaeringsResults(true);\n      } else {\n        setShowErnaeringsResults(false);\n      }\n    }\n  }, [withNoAddedSugars, buttonClicked]);\n\n  //state for controlling the buttons' visibility\n  const [showButtons, setShowButtons] = useState(false);\n\n  // State variables to control the visibility of the information sections\n  const [infoNokkelhullet, setInfoNokkelhullet] = useState(false);\n  const [infoErnaerings, setInfoErnaerings] = useState(false);\n  const [infoHelsepåstander, setInfoHelsepåstander] = useState(false);\n\n  // Function to show an information section based on the container parameter\n  const onClickInfo = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(true);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(true);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(true);\n    }\n  };\n\n  // Function to hide an information section based on the container parameter\n  const onClickClose = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(false);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(false);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(false);\n    }\n  };\n\n  // State variables for handling input fields and validation errors\n  const [energikj, setEnergikj] = useState(false);\n  const [energikcal, setEnergikcal] = useState(false);\n\n  const [fett, setFett] = useState(false);\n  const [fettNull, setFettNull] = useState(false);\n  const [mettede, setMettede] = useState(false);\n  const [karbohydrat, setKarbohydrat] = useState(false);\n  const [hvoravSukkerarter, setHvoravSukkerarter] = useState(false);\n  const [hvoravSukkerarterNull, setHvoravSukkerarterNull] = useState(false);\n  const [kostfiber, setKostfiber] = useState(false);\n  const [protein, setProtein] = useState(false);\n  const [salt, setSalt] = useState(false);\n  const [saltNull, setSaltNull] = useState(false);\n  // State variable for storing nutrition information entered by user\n  const [nutrition, setNutrition] = useState({\n    energikj: \"\",\n    energikcal: \"\",\n    fett: \"\",\n    mettede: \"\",\n    karbohydrat: \"\",\n    hvoravSukkerarter: \"\",\n    kostfiber: \"\",\n    protein: \"\",\n    salt: \"\",\n  });\n\n  // Handler for updating nutrition state/state variable based on input field changes/input values\n  const changeHandle = (event) => {\n    console.log(\"changeHandle ===\", event.target, event.target.value);\n    setNutrition({\n      ...nutrition,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  // define function to handle form submission\n  const onClick = (e) => {\n    e.preventDefault();\n    setButtonClicked(true);\n    setShowHelsepåstander(true);\n    setShowButtons(true);\n\n    console.log(\"onclick ===\", selectsPart, nutrition);\n\n    // Check if all required fields are filled out and within valid ranges\n    // The if statement checks if all required inputs are non-empty and meet the nutritional requirements\n    if (\n      nutrition.fett !== \"\" &&\n      nutrition.fett <= 10 &&\n      nutrition.mettede !== \"\" &&\n      nutrition.karbohydrat !== \"\" &&\n      nutrition.hvoravSukkerarter !== \"\" &&\n      nutrition.hvoravSukkerarter <= 3 &&\n      nutrition.kostfiber !== \"\" &&\n      nutrition.protein !== \"\" &&\n      nutrition.salt !== \"\" &&\n      nutrition.salt <= 2\n    ) {\n      // If all requirements are met, display the nutrition results\n      setShowNokkelhulletResults(true);\n      // Hide any empty result messages or error messages\n      setShowEmptyResult(false);\n\n      // Check if the user selected \"energikj\" and if nutrition input lable of \"energikj\" is not empty\n      if (selectsPart === \"energikj\" && nutrition.energikj !== \"\") {\n        setEnergikj(false);\n      }\n\n      // Check if the user selected \"energikcal\" and if nutrition input lable of \"energikcal\" is not empty\n      if (selectsPart === \"energikcal\" && nutrition.energikcal !== \"\") {\n        setEnergikcal(false);\n      }\n      // Reset all input validation errors\n      setFett(false);\n      setFettNull(false);\n      setMettede(false);\n      setKarbohydrat(false);\n      setHvoravSukkerarter(false);\n      setHvoravSukkerarterNull(false);\n      setKostfiber(false);\n      setProtein(false);\n      setSalt(false);\n      setSaltNull(false);\n      // If the user has not selected any nutrients, set errors accordingly\n      // Check each nutrition value to see if it is missing or negative\n      // show input validation errors if any input is missing or negative.\n    } else {\n      if (selectsPart === \"energikj\") {\n        console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n        if (nutrition.energikj === \"\" || nutrition.energikj < 0) {\n          console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n          setEnergikj(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikj(false);\n        }\n      }\n\n      if (selectsPart === \"energikcal\") {\n        console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n        if (nutrition.energikcal === \"\" || nutrition.energikcal < 0) {\n          console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n          setEnergikcal(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikcal(false);\n        }\n      }\n\n      // repeat for each nutrition value...\n      if (nutrition.fett === \"\" || nutrition.fett < 0) {\n        setFettNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setFettNull(false);\n      }\n      if (nutrition.fett > 10) {\n        setFett(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setFett(false);\n      }\n\n      if (nutrition.mettede === \"\" || nutrition.mettede < 0) {\n        setMettede(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setMettede(false);\n      }\n\n      // Check if the 'karbohydrat' input is missing or negative, and display an error message if necessary\n      if (nutrition.karbohydrat === \"\" || nutrition.karbohydrat < 0) {\n        setKarbohydrat(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKarbohydrat(false);\n      }\n\n      // Check if the 'hvoravSukkerarter' input is missing, negative or above the maximum allowed value (1),\n      // and display an error message if necessary\n      if (\n        nutrition.hvoravSukkerarter === \"\" ||\n        nutrition.hvoravSukkerarter < 0\n      ) {\n        setHvoravSukkerarterNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setHvoravSukkerarterNull(false);\n      }\n      if (nutrition.hvoravSukkerarter > 3) {\n        setHvoravSukkerarter(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setHvoravSukkerarter(false);\n      }\n\n      if (nutrition.kostfiber === \"\" || nutrition.kostfiber < 0) {\n        setKostfiber(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKostfiber(false);\n      }\n\n      if (nutrition.protein === \"\" || nutrition.protein < 0) {\n        setProtein(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setProtein(false);\n      }\n\n      if (nutrition.salt === \"\" || nutrition.salt < 0) {\n        setSaltNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setSaltNull(false);\n      }\n      if (nutrition.salt > 2) {\n        setSalt(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setSalt(false);\n      }\n    }\n\n    // Check for the \"LOW SUGARS\" claim\n    if (foodType === \"solid\" && parseFloat(nutrition.karbohydrat) <= 5) {\n      setLowSugars(true);\n    } else if (\n      foodType === \"liquid\" &&\n      parseFloat(nutrition.karbohydrat) <= 2.5\n    ) {\n      setLowSugars(true);\n    } else {\n      setLowSugars(false);\n    }\n\n    // Check the condition for the \"WITH NO ADDED SUGARS\" nutrition claim\n    if (nutrition.hvoravSukkerarter === \"0\" && nutrition.karbohydrat > 0) {\n      setWithNoAddedSugars(true);\n    } else {\n      setWithNoAddedSugars(false);\n    }\n  };\n\n  // create an array of energy units to select from\n  const selectUnit = [\n    {\n      value: \"energikj\",\n      label: \"(kj)\",\n    },\n    {\n      value: \"energikcal\",\n      label: \"(kcal)\",\n    },\n  ];\n\n  // Declare a state variable for the select dropdown.\n  const [selectsPart, setSelectPart] = useState(\"\");\n\n  // A function to handle changes to the select dropdown energy unit\n  const handlerPart = (event) => {\n    const inputVal = document.getElementsByName(event.value);\n    console.log(\"handlerPart ===\", event, nutrition, inputVal);\n    setSelectPart(event.value);\n  };\n\n  //create an array of food types to select from\n  const foodTypes = [\n    {\n      value: \"solid\",\n      label: \"Fast form\",\n    },\n    {\n      value: \"liquid\",\n      label: \"Flytende form\",\n    },\n  ];\n\n  return (\n    <div className=\"row\">\n      {/* This div creates a column layout for the left side of the table */}\n      <div className=\"col-md-6\">\n        {/* the selector (dropdown menu) for choosing the food type. */}\n        <div className=\"form-group\">\n          <label htmlFor=\"foodType\">Velg type matvare:</label>\n          <Select\n            className=\"form-control\"\n            id=\"foodType\"\n            options={foodTypes}\n            onChange={(e) => setFoodType(e.value)} // update the onFoodTypeChange function to directly set the food type state\n            placeholder=\"Velg type matvare\"\n          />\n        </div>\n\n        <h5>\n          Næringsinnhold per 100{\" \"}\n          {foodType === \"solid\" ? \"g\" : foodType === \"liquid\" ? \"ml\" : \"g/ml\"}\n        </h5>\n\n        {/* This div adds a light background color to the table */}\n        <div className=\"bg-light\">\n          {/* This table shows the nutritional information */}\n          <table className=\"table table-striped\">\n            {/* The table header */}\n            <thead>\n              <tr>\n                <th scope=\"col\" className=\"table-font\">\n                  Energi eller næringsstoff\n                </th>\n                <th scope=\"col\" className=\"table-font\">\n                  Mengde\n                </th>\n              </tr>\n            </thead>\n\n            {/* The table body */}\n            <tbody>\n              {/* This row shows the energy content */}\n              <tr className={(energikj, energikcal ? \"alert-box\" : null)}>\n                <th scope=\"row\" className=\"table-font\">\n                  {/* An icon with a tooltip to indicate missing values in energy parameters */}\n                  {energikj && energikcal ? (\n                    <Tooltip\n                      title=\"Mangler verdi i energi (kJ/Kcal) parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  {/* This div displays the energy label and unit */}\n                  <div className=\"row\">\n                    <div className=\"col-md-3\">\n                      <label for=\"energiunit\" class=\"form-label\">\n                        Energi\n                      </label>\n                    </div>\n                    {/* A dropdown menu for selecting the energy unit */}\n                    <div className=\"col-md-6\">\n                      <Select\n                        placeholder={<div>Velg enhet</div>}\n                        className=\"form-select-md mb-3\"\n                        options={selectUnit}\n                        onChange={(e) => handlerPart(e)}\n                      />\n                    </div>\n                  </div>\n                </th>\n                {/* An input field for entering the energy value */}\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name={selectsPart}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* Additional rows for other nutrient selections */}\n\n              {/* This row shows the fat content */}\n              <tr\n                className={\n                  fett ? \"alert-box\" : null || fettNull ? \"alert-box\" : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {fett ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden fett. Mengden på fett må være lavere enn eller lik 10 g / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {fettNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i fett parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Fett (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"fett\"\n                    value={nutrition.fett}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the saturated fat content */}\n              <tr className={mettede ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {mettede ? (\n                    <Tooltip\n                      title=\"Mangler verdi i mettede fettsyrer parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Mettede fettsyrer (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"mettede\"\n                    value={nutrition.mettede}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the carbohydrate (total sugars)content */}\n              <tr className={karbohydrat ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {/* If the \"karbohydrat\" value is missing, display an exclamation icon with a tooltip */}\n                  {karbohydrat ? (\n                    <Tooltip\n                      title=\"Mangler verdi i karbohydrat parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Karbohydrat (g)\n                </th>\n                {/* Input field for \"karbohydrat\" value */}\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"karbohydrat\"\n                    value={nutrition.karbohydrat}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows hvorav tilsatte sukkerarter (added sugars)content */}\n              <tr\n                className={\n                  hvoravSukkerarter\n                    ? \"alert-box\"\n                    : null || hvoravSukkerarterNull\n                    ? \"alert-box\"\n                    : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {/* If the \"hvoravSukkerarter\" value is too high, display a ban icon with a tooltip */}\n                  {hvoravSukkerarter ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden hvoravSukkerarter. Mengden på hvoravSukkerarter må være lavere enn eller lik 3 g/ 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {/* If the \"hvoravSukkerarter\" value is missing, display an exclamation icon with a tooltip */}\n                  {hvoravSukkerarterNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i hvorav sukkerarter parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Hvorav tilsatte sukkerarter (g)\n                </th>\n                {/* Input field for \"hvoravSukkerarter\" value */}\n\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"hvoravSukkerarter\"\n                    value={nutrition.hvoravSukkerarter}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows kostfiber content */}\n              <tr className={kostfiber ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {kostfiber ? (\n                    <Tooltip\n                      title=\"Mangler verdi i kostfiber parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Kostfiber (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"kostfiber\"\n                    value={nutrition.kostfiber}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the protein content */}\n              <tr className={protein ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {protein ? (\n                    <Tooltip\n                      title=\"Mangler verdi i protein parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Protein (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"protein\"\n                    value={nutrition.protein}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows salt content */}\n              <tr\n                className={\n                  salt ? \"alert-box\" : null || saltNull ? \"alert-box\" : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {salt ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden salt. Mengden på salt må være lavere enn eller lik 2 g / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {saltNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i salt parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Salt (g)\n                </th>\n                <td colSpan=\"2\">\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"salt\"\n                    value={nutrition.salt}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n\n        {/* Button that submits the form and calls the onClick function */}\n        <div className=\"col-12 button-div\">\n          <button\n            type=\"submit\"\n            className=\"btn btn-primary btn-lg button-search\"\n            onClick={onClick}\n          >\n            Beregn\n          </button>\n        </div>\n      </div>\n\n      <div className=\"col-md-6\">\n        {/* positive results nøkkelhullet container\" */}\n        {showNokkelhulletResults ? (\n          <div className=\"container nøkkelhullet-food-result-container\">\n            {/* An image with class \"keyhole-logo\" and alt text \"keyhole logo\" */}\n            <img\n              src={keyholeLgog}\n              className=\"keyhole-logo img-fluid\"\n              alt=\"keyhole logo\"\n            />\n            {/* A heading with text \"Nøkkelhullet\" */}\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir Nøkkelhullet. </p>\n              </div>\n              <div className=\"col-md-2\">\n                {/* FontAwesome icon with event listener to show the \"Nøkkelhullet\" information section */}\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  {/* A paragraph with a link to Lovdata's \"Forskrift om frivillig merking a nœringsmidler med Nokkellhullet\" */}\n                  <p>\n                    Les mer om hvilke krav det stilles for merking av\n                    Nokkellhullet på Lovdatas \"Forskrift om frivillig merking a\n                    nœringsmidler med Nokkellhullet\":\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  {/* FontAwesome icon with event listener to hide the \"Nøkkelhullet\" information section */}\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        ) : null}\n        {/*Negative results nøkkelhullet container\" */}\n        {showNokkelhulletResults === false && (\n          <div className=\"container nøkkelhullet-food-negResult-container\">\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir ikke Nøkkelhullet.</p>\n                {showEmptyResult ? (\n                  <p>** Obligatoriske næringsverdier kan ikke være tomme.</p>\n                ) : null}\n\n                {fett ? (\n                  <p>** Fett verdien kan være høyst 10 g/100 g.</p>\n                ) : null}\n\n                {hvoravSukkerarter ? (\n                  <p>\n                    ** Tilsatte sukkerarter verdien kan være høyst 3 g/100 g.\n                  </p>\n                ) : null}\n\n                {salt ? <p>** Salt verdien kan være høyst 2 g/100 g.</p> : null}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om frivillig merking av næringsmidler med Nøkkelhullet:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for ernæringspåstander if there are all true results */}\n        {buttonClicked && (\n          <div\n            className={\n              lowSugars && withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-all\"\n                : !lowSugars && !withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-none\"\n                : \"container ernæringspåstander-food-result-container-some\"\n            }\n          >\n            <h5>Ernæringspåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                {/* Low sugars */}\n                {lowSugars ? (\n                  <div>\n                    <p>** Lavt sukkerinnhold:</p>\n                    <p>\n                      Dette produktet inneholder høyst 5 g sukkerarter per 100 g\n                      for næringsmidler i fast form, eller høyst 2,5 g\n                      sukkerarter per 100 ml for næringsmidler i flytende form\n                      og oppfyller kravet for \"Lavt sukkerinnhold\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Lavt sukkerinnhold\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        For faste næringsmidler, sukkerinnholdet må være høyst 5\n                        g per 100 g.\n                      </li>\n                      <li>\n                        For flytende næringsmidler, sukkerinnholdet må være\n                        høyst 2,5 g per 100 ml.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n\n                {/* No added sugars */}\n                {withNoAddedSugars ? (\n                  <div>\n                    <p>** Uten tilsatt sukker:</p>\n                    <p>\n                      Dette produktet er ikke tilsatt monosakkarider,\n                      disakkarider eller andre næringsmidler på grunn av deres\n                      søtende egenskaper og oppfyller kravet for \"Uten tilsatt\n                      sukker\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Uten tilsatt sukker\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        Produktet må ikke være tilsatt monosakkarider,\n                        disakkarider eller andre næringsmidler på grunn av deres\n                        søtende egenskaper.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"ernaerings\")}\n                />\n              </div>\n            </div>\n            {infoErnaerings ? (\n              // Information section for \"Ernæringspåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"ernaerings\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for Helsepåstander results  */}\n        {showHelsepåstander && (\n          <div\n            className=\"container helsepåstander-food-result-container\"\n            style={{ background: \"#f2f0b5\" }}\n          >\n            <h5>Helsepåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Under utvikling. </p>\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"helsepåstander\")}\n                />\n              </div>\n            </div>\n            {infoHelsepåstander ? (\n              // Information section for \"Helsepåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"helsepåstander\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"15px\" }}></div>\n        {/* conditional rendering for the buttons using showButtons state */}\n        {showButtons && (\n          <div className=\"d-flex justify-content-between\">\n            {/* Save button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-save\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Lagre produkt\n            </button>\n\n            {/* Share button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-share\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Del produkt\n            </button>\n\n            {/* Add a new product button */}\n            <button\n              className=\"btn btn-primary\"\n              onClick={() => window.location.reload()}\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-plus\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Legg til et nytt produkt\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Kategori24b2;\n","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Kategori24b4.js",["487","488","489","490"],[],"import React from \"react\";\nimport { useState, useEffect } from \"react\"; // import the useState and useeffect hook.\nimport { faCircleExclamation } from \"@fortawesome/free-solid-svg-icons\"; // import an icon.\nimport { faBan } from \"@fortawesome/free-solid-svg-icons\";\nimport { faSave, faShare, faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"; // import FontAwesomeIcon component.\nimport Tooltip from \"@mui/material/Tooltip\"; // import Tooltip component.\nimport keyholeLgog from \"./circle-keyhole-logo.png\"; // import an image\nimport { faCircleInfo } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport { faXmarkCircle } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport Select from \"react-select\"; // import Select component\n\nconst Kategori24b4 = () => {\n  // State variables for showing results and empty result message\n  const [showNokkelhulletResults, setShowNokkelhulletResults] = useState(null);\n  const [showErnaeringsResults, setShowErnaeringsResults] = useState(null);\n  const [showHelsepåstander, setShowHelsepåstander] = useState(null);\n  const [showEmptyResult, setShowEmptyResult] = useState(\"\"); // initialize state variable for showing empty result message.\n\n  //state variable to store the user's food type selection (solid or liquid) and the low sugars claim result\n  const [foodType, setFoodType] = useState(\"\");\n  const [lowSugars, setLowSugars] = useState(null);\n\n  //state variable to track whether the product meets the WITH NO ADDED SUGARS claim or not\n  const [withNoAddedSugars, setWithNoAddedSugars] = useState(false);\n\n  // State variable for tracking if the button is clicked\n  const [buttonClicked, setButtonClicked] = useState(false);\n\n  // useEffect hook for checking the condition for the \"WITH NO ADDED SUGARS\" claim when button is clicked\n  useEffect(() => {\n    if (buttonClicked) {\n      if (withNoAddedSugars) {\n        setShowErnaeringsResults(true);\n      } else {\n        setShowErnaeringsResults(false);\n      }\n    }\n  }, [withNoAddedSugars, buttonClicked]);\n\n  //state for controlling the buttons' visibility\n  const [showButtons, setShowButtons] = useState(false);\n\n  // State variables to control the visibility of the information sections\n  const [infoNokkelhullet, setInfoNokkelhullet] = useState(false);\n  const [infoErnaerings, setInfoErnaerings] = useState(false);\n  const [infoHelsepåstander, setInfoHelsepåstander] = useState(false);\n\n  // Function to show an information section based on the container parameter\n  const onClickInfo = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(true);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(true);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(true);\n    }\n  };\n\n  // Function to hide an information section based on the container parameter\n  const onClickClose = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(false);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(false);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(false);\n    }\n  };\n\n  // State variables for handling input fields and validation errors\n  const [energikj, setEnergikj] = useState(false);\n  const [energikcal, setEnergikcal] = useState(false);\n\n  const [fett, setFett] = useState(false);\n  const [fettNull, setFettNull] = useState(false);\n  const [mettede, setMettede] = useState(false);\n  const [karbohydrat, setKarbohydrat] = useState(false);\n  const [karbohydratNull, setKarbohydratNull] = useState(false);\n  const [hvoravSukkerarter, setHvoravSukkerarter] = useState(false);\n  const [kostfiber, setKostfiber] = useState(false);\n  const [protein, setProtein] = useState(false);\n  const [salt, setSalt] = useState(false);\n  const [saltNull, setSaltNull] = useState(false);\n\n  // State variable for storing nutrition information entered by user\n  const [nutrition, setNutrition] = useState({\n    energikj: \"\",\n    energikcal: \"\",\n    fett: \"\",\n    mettede: \"\",\n    karbohydrat: \"\",\n    hvoravSukkerarter: \"\",\n    kostfiber: \"\",\n    protein: \"\",\n    salt: \"\",\n  });\n\n  // Handler for updating nutrition state/state variable based on input field changes/input values\n  const changeHandle = (event) => {\n    console.log(\"changeHandle ===\", event.target, event.target.value);\n    setNutrition({\n      ...nutrition,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  // define function to handle form submission\n  const onClick = (e) => {\n    e.preventDefault();\n    setButtonClicked(true);\n    setShowHelsepåstander(true);\n    setShowButtons(true);\n\n    console.log(\"onclick ===\", selectsPart, nutrition);\n\n    // Check if all required fields are filled out and within valid ranges\n    // The if statement checks if all required inputs are non-empty and meet the nutritional requirements\n    if (\n      nutrition.fett !== \"\" &&\n      nutrition.fett <= 10 &&\n      nutrition.mettede !== \"\" &&\n      nutrition.karbohydrat !== \"\" &&\n      nutrition.karbohydrat <= 3 &&\n      nutrition.hvoravSukkerarter !== \"\" &&\n      nutrition.kostfiber !== \"\" &&\n      nutrition.protein !== \"\" &&\n      nutrition.salt !== \"\" &&\n      nutrition.salt <= 1\n    ) {\n      // If all requirements are met, display the nutrition results\n      setShowNokkelhulletResults(true);\n      // Hide any empty result messages or error messages\n      setShowEmptyResult(false);\n\n      // Check if the user selected \"energikj\" and if nutrition input lable of \"energikj\" is not empty\n      if (selectsPart === \"energikj\" && nutrition.energikj !== \"\") {\n        setEnergikj(false);\n      }\n\n      // Check if the user selected \"energikcal\" and if nutrition input lable of \"energikcal\" is not empty\n      if (selectsPart === \"energikcal\" && nutrition.energikcal !== \"\") {\n        setEnergikcal(false);\n      }\n      // Reset all input validation errors\n      setFett(false);\n      setFettNull(false);\n      setMettede(false);\n      setKarbohydrat(false);\n      setKarbohydratNull(false);\n      setHvoravSukkerarter(false);\n      setKostfiber(false);\n      setProtein(false);\n      setSalt(false);\n      setSaltNull(false);\n\n      // If the user has not selected any nutrients, set errors accordingly\n      // Check each nutrition value to see if it is missing or negative\n      // show input validation errors if any input is missing or negative.\n    } else {\n      if (selectsPart === \"energikj\") {\n        console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n        if (nutrition.energikj === \"\" || nutrition.energikj < 0) {\n          console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n          setEnergikj(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikj(false);\n        }\n      }\n\n      if (selectsPart === \"energikcal\") {\n        console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n        if (nutrition.energikcal === \"\" || nutrition.energikcal < 0) {\n          console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n          setEnergikcal(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikcal(false);\n        }\n      }\n\n      // repeat for each nutrition value...\n      if (nutrition.fett === \"\" || nutrition.fett < 0) {\n        setFettNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setFettNull(false);\n      }\n      if (nutrition.fett > 10) {\n        setFett(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setFett(false);\n      }\n\n      if (nutrition.mettede === \"\" || nutrition.mettede < 0) {\n        setMettede(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setMettede(false);\n      }\n\n      if (nutrition.karbohydrat === \"\" || nutrition.karbohydrat < 0) {\n        setKarbohydratNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKarbohydratNull(false);\n      }\n      if (nutrition.karbohydrat > 3) {\n        setKarbohydrat(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setKarbohydrat(false);\n      }\n\n      if (\n        nutrition.hvoravSukkerarter === \"\" ||\n        nutrition.hvoravSukkerarter < 0\n      ) {\n        setHvoravSukkerarter(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setHvoravSukkerarter(false);\n      }\n\n      if (nutrition.kostfiber === \"\" || nutrition.kostfiber < 0) {\n        setKostfiber(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKostfiber(false);\n      }\n\n      if (nutrition.protein === \"\" || nutrition.protein < 0) {\n        setProtein(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setProtein(false);\n      }\n\n      if (nutrition.salt === \"\" || nutrition.salt < 0) {\n        setSaltNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setSaltNull(false);\n      }\n      if (nutrition.salt > 1) {\n        setSalt(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setSalt(false);\n      }\n    }\n\n    // Check for the \"LOW SUGARS\" claim\n    if (foodType === \"solid\" && parseFloat(nutrition.karbohydrat) <= 5) {\n      setLowSugars(true);\n    } else if (\n      foodType === \"liquid\" &&\n      parseFloat(nutrition.karbohydrat) <= 2.5\n    ) {\n      setLowSugars(true);\n    } else {\n      setLowSugars(false);\n    }\n\n    // Check the condition for the \"WITH NO ADDED SUGARS\" nutrition claim\n    if (nutrition.hvoravSukkerarter === \"0\" && nutrition.karbohydrat > 0) {\n      setWithNoAddedSugars(true);\n    } else {\n      setWithNoAddedSugars(false);\n    }\n  };\n\n  // create an array of energy units to select from\n  const selectUnit = [\n    {\n      value: \"energikj\",\n      label: \"(kj)\",\n    },\n    {\n      value: \"energikcal\",\n      label: \"(kcal)\",\n    },\n  ];\n\n  // Declare a state variable for the select dropdown.\n  const [selectsPart, setSelectPart] = useState(\"\");\n\n  // A function to handle changes to the select dropdown energy unit\n  const handlerPart = (event) => {\n    const inputVal = document.getElementsByName(event.value);\n    console.log(\"handlerPart ===\", event, nutrition, inputVal);\n    setSelectPart(event.value);\n  };\n\n  //create an array of food types to select from\n  const foodTypes = [\n    {\n      value: \"solid\",\n      label: \"Fast form\",\n    },\n    {\n      value: \"liquid\",\n      label: \"Flytende form\",\n    },\n  ];\n\n  return (\n    <div className=\"row\">\n      {/* This div creates a column layout for the left side of the table */}\n      <div className=\"col-md-6\">\n        {/* the selector (dropdown menu) for choosing the food type. */}\n        <div className=\"form-group\">\n          <label htmlFor=\"foodType\">Velg type matvare:</label>\n          <Select\n            className=\"form-control\"\n            id=\"foodType\"\n            options={foodTypes}\n            onChange={(e) => setFoodType(e.value)} // update the onFoodTypeChange function to directly set the food type state\n            placeholder=\"Velg type matvare\"\n          />\n        </div>\n\n        <h5>\n          Næringsinnhold per 100{\" \"}\n          {foodType === \"solid\" ? \"g\" : foodType === \"liquid\" ? \"ml\" : \"g/ml\"}\n        </h5>\n\n        {/* This div adds a light background color to the table */}\n        <div className=\"bg-light\">\n          {/* This table shows the nutritional information */}\n          <table className=\"table table-striped\">\n            {/* The table header */}\n            <thead>\n              <tr>\n                <th scope=\"col\" className=\"table-font\">\n                  Energi eller næringsstoff\n                </th>\n                <th scope=\"col\" className=\"table-font\">\n                  Mengde\n                </th>\n              </tr>\n            </thead>\n\n            {/* The table body */}\n            <tbody>\n              {/* This row shows the energy content */}\n              <tr className={(energikj, energikcal ? \"alert-box\" : null)}>\n                <th scope=\"row\" className=\"table-font\">\n                  {/* An icon with a tooltip to indicate missing values in energy parameters */}\n                  {energikj && energikcal ? (\n                    <Tooltip\n                      title=\"Mangler verdi i energi (kJ/Kcal) parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  {/* This div displays the energy label and unit */}\n                  <div className=\"row\">\n                    <div className=\"col-md-3\">\n                      <label for=\"energiunit\" class=\"form-label\">\n                        Energi\n                      </label>\n                    </div>\n                    {/* A dropdown menu for selecting the energy unit */}\n                    <div className=\"col-md-6\">\n                      <Select\n                        placeholder={<div>Velg enhet</div>}\n                        className=\"form-select-md mb-3\"\n                        options={selectUnit}\n                        onChange={(e) => handlerPart(e)}\n                      />\n                    </div>\n                  </div>\n                </th>\n                {/* An input field for entering the energy value */}\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name={selectsPart}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* Additional rows for other nutrient selections */}\n              {/* This row shows the fat content */}\n              <tr\n                className={\n                  fett ? \"alert-box\" : null || fettNull ? \"alert-box\" : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {fett ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden fett. Mengden på fett må være lavere enn eller lik 10 g / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {fettNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i fett parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Fett (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"fett\"\n                    value={nutrition.fett}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the saturated fat content */}\n              <tr className={mettede ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {mettede ? (\n                    <Tooltip\n                      title=\"Mangler verdi i mettede fettsyrer parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Mettede fettsyrer (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"mettede\"\n                    value={nutrition.mettede}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the carbohydrate content */}\n              <tr\n                className={\n                  karbohydrat\n                    ? \"alert-box\"\n                    : null || karbohydratNull\n                    ? \"alert-box\"\n                    : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {karbohydrat ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden sukkerarter. Mengden på sukkerarter må være lavere enn eller lik 3 g / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {karbohydratNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i karbohydrat parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Karbohydrat (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"karbohydrat\"\n                    value={nutrition.karbohydrat}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows hvorav sukkerarter content */}\n              <tr className={hvoravSukkerarter ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {hvoravSukkerarter ? (\n                    <Tooltip\n                      title=\"Mangler verdi i hvorav sukkerarter parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Hvorav tilsatte sukkerarter (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"hvoravSukkerarter\"\n                    value={nutrition.hvoravSukkerarter}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows kostfiber content */}\n              <tr className={kostfiber ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {kostfiber ? (\n                    <Tooltip\n                      title=\"Mangler verdi i kostfiber parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Kostfiber (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"kostfiber\"\n                    value={nutrition.kostfiber}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the protein content */}\n              <tr className={protein ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {protein ? (\n                    <Tooltip\n                      title=\"Mangler verdi i protein parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Protein (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"protein\"\n                    value={nutrition.protein}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows salt content */}\n              <tr\n                className={\n                  salt ? \"alert-box\" : null || saltNull ? \"alert-box\" : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {salt ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden salt. Mengden på salt må være lavere enn eller lik 1 g / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {saltNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i salt parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Salt (g)\n                </th>\n                <td colSpan=\"2\">\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"salt\"\n                    value={nutrition.salt}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n\n        {/* Button that submits the form and calls the onClick function */}\n        <div className=\"col-12 button-div\">\n          <button\n            type=\"submit\"\n            className=\"btn btn-primary btn-lg button-search\"\n            onClick={onClick}\n          >\n            Beregn\n          </button>\n        </div>\n      </div>\n\n      <div className=\"col-md-6\">\n        {/* positive results nøkkelhullet container\" */}\n        {showNokkelhulletResults ? (\n          <div className=\"container nøkkelhullet-food-result-container\">\n            {/* An image with class \"keyhole-logo\" and alt text \"keyhole logo\" */}\n            <img\n              src={keyholeLgog}\n              className=\"keyhole-logo img-fluid\"\n              alt=\"keyhole logo\"\n            />\n            {/* A heading with text \"Nøkkelhullet\" */}\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir Nøkkelhullet. </p>\n              </div>\n              <div className=\"col-md-2\">\n                {/* FontAwesome icon with event listener to show the \"Nøkkelhullet\" information section */}\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  {/* A paragraph with a link to Lovdata's \"Forskrift om frivillig merking a nœringsmidler med Nokkellhullet\" */}\n                  <p>\n                    Les mer om hvilke krav det stilles for merking av\n                    Nokkellhullet på Lovdatas \"Forskrift om frivillig merking a\n                    nœringsmidler med Nokkellhullet\":\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  {/* FontAwesome icon with event listener to hide the \"Nøkkelhullet\" information section */}\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        ) : null}\n        {/*Negative results nøkkelhullet container\" */}\n        {showNokkelhulletResults === false && (\n          <div className=\"container nøkkelhullet-food-negResult-container\">\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir ikke Nøkkelhullet.</p>\n                {showEmptyResult ? (\n                  <p>** Obligatoriske næringsverdier kan ikke være tomme.</p>\n                ) : null}\n\n                {fett ? (\n                  <p>** Fett verdien kan være høyst 10 g/100 g.</p>\n                ) : null}\n\n                {karbohydrat ? (\n                  <p>** Sukkerarter verdien kan være høyst 3 g/100 g.</p>\n                ) : null}\n                {salt ? <p>** Salt verdien kan være høyst 1 g/100 g.</p> : null}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om frivillig merking av næringsmidler med Nøkkelhullet:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for ernæringspåstander if there are all true results */}\n        {buttonClicked && (\n          <div\n            className={\n              lowSugars && withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-all\"\n                : !lowSugars && !withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-none\"\n                : \"container ernæringspåstander-food-result-container-some\"\n            }\n          >\n            <h5>Ernæringspåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                {/* Low sugars */}\n                {lowSugars ? (\n                  <div>\n                    <p>** Lavt sukkerinnhold:</p>\n                    <p>\n                      Dette produktet inneholder høyst 5 g sukkerarter per 100 g\n                      for næringsmidler i fast form, eller høyst 2,5 g\n                      sukkerarter per 100 ml for næringsmidler i flytende form\n                      og oppfyller kravet for \"Lavt sukkerinnhold\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Lavt sukkerinnhold\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        For faste næringsmidler, sukkerinnholdet må være høyst 5\n                        g per 100 g.\n                      </li>\n                      <li>\n                        For flytende næringsmidler, sukkerinnholdet må være\n                        høyst 2,5 g per 100 ml.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n\n                {/* No added sugars */}\n                {withNoAddedSugars ? (\n                  <div>\n                    <p>** Uten tilsatt sukker:</p>\n                    <p>\n                      Dette produktet er ikke tilsatt monosakkarider,\n                      disakkarider eller andre næringsmidler på grunn av deres\n                      søtende egenskaper og oppfyller kravet for \"Uten tilsatt\n                      sukker\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Uten tilsatt sukker\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        Produktet må ikke være tilsatt monosakkarider,\n                        disakkarider eller andre næringsmidler på grunn av deres\n                        søtende egenskaper.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"ernaerings\")}\n                />\n              </div>\n            </div>\n            {infoErnaerings ? (\n              // Information section for \"Ernæringspåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"ernaerings\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for Helsepåstander results  */}\n        {showHelsepåstander && (\n          <div\n            className=\"container helsepåstander-food-result-container\"\n            style={{ background: \"#f2f0b5\" }}\n          >\n            <h5>Helsepåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Under utvikling. </p>\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"helsepåstander\")}\n                />\n              </div>\n            </div>\n            {infoHelsepåstander ? (\n              // Information section for \"Helsepåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"helsepåstander\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"15px\" }}></div>\n        {/* conditional rendering for the buttons using showButtons state */}\n        {showButtons && (\n          <div className=\"d-flex justify-content-between\">\n            {/* Save button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-save\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Lagre produkt\n            </button>\n\n            {/* Share button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-share\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Del produkt\n            </button>\n\n            {/* Add a new product button */}\n            <button\n              className=\"btn btn-primary\"\n              onClick={() => window.location.reload()}\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-plus\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Legg til et nytt produkt\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Kategori24b4;\n","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Kategori24c1.js",["491","492","493","494"],[],"import React from \"react\";\nimport { useState, useEffect } from \"react\"; // import the useState and useeffect hook.\nimport { faCircleExclamation } from \"@fortawesome/free-solid-svg-icons\"; // import an icon.\nimport { faBan } from \"@fortawesome/free-solid-svg-icons\";\nimport { faSave, faShare, faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"; // import FontAwesomeIcon component.\nimport Tooltip from \"@mui/material/Tooltip\"; // import Tooltip component.\nimport keyholeLgog from \"./circle-keyhole-logo.png\"; // import an image\nimport { faCircleInfo } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport { faXmarkCircle } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport Select from \"react-select\"; // import Select component\n\nconst Kategori24c1 = () => {\n  // State variables for showing results and empty result message\n  const [showNokkelhulletResults, setShowNokkelhulletResults] = useState(null);\n  const [showErnaeringsResults, setShowErnaeringsResults] = useState(null);\n  const [showHelsepåstander, setShowHelsepåstander] = useState(null);\n  const [showEmptyResult, setShowEmptyResult] = useState(\"\"); // initialize state variable for showing empty result message.\n\n  //state variable to store the user's food type selection (solid or liquid) and the low sugars claim result\n  const [foodType, setFoodType] = useState(\"\");\n  const [lowSugars, setLowSugars] = useState(null);\n\n  //state variable to track whether the product meets the WITH NO ADDED SUGARS claim or not\n  const [withNoAddedSugars, setWithNoAddedSugars] = useState(false);\n\n  // State variable for tracking if the button is clicked\n  const [buttonClicked, setButtonClicked] = useState(false);\n\n  // useEffect hook for checking the condition for the \"WITH NO ADDED SUGARS\" claim when button is clicked\n  useEffect(() => {\n    if (buttonClicked) {\n      if (withNoAddedSugars) {\n        setShowErnaeringsResults(true);\n      } else {\n        setShowErnaeringsResults(false);\n      }\n    }\n  }, [withNoAddedSugars, buttonClicked]);\n\n  //state for controlling the buttons' visibility\n  const [showButtons, setShowButtons] = useState(false);\n\n  // State variables to control the visibility of the information sections\n  const [infoNokkelhullet, setInfoNokkelhullet] = useState(false);\n  const [infoErnaerings, setInfoErnaerings] = useState(false);\n  const [infoHelsepåstander, setInfoHelsepåstander] = useState(false);\n\n  // Function to show an information section based on the container parameter\n  const onClickInfo = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(true);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(true);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(true);\n    }\n  };\n\n  // Function to hide an information section based on the container parameter\n  const onClickClose = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(false);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(false);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(false);\n    }\n  };\n\n  // State variables for handling input fields and validation errors\n  const [energikj, setEnergikj] = useState(false);\n  const [energikcal, setEnergikcal] = useState(false);\n\n  const [fett, setFett] = useState(false);\n  const [fettNull, setFettNull] = useState(false);\n  const [mettede, setMettede] = useState(false);\n  const [karbohydrat, setKarbohydrat] = useState(false);\n  const [hvoravSukkerarter, setHvoravSukkerarter] = useState(false);\n  const [hvoravSukkerarterNull, setHvoravSukkerarterNull] = useState(false);\n  const [kostfiber, setKostfiber] = useState(false);\n  const [protein, setProtein] = useState(false);\n  const [salt, setSalt] = useState(false);\n  const [saltNull, setSaltNull] = useState(false);\n  // State variable for storing nutrition information entered by user\n  const [nutrition, setNutrition] = useState({\n    energikj: \"\",\n    energikcal: \"\",\n    fett: \"\",\n    mettede: \"\",\n    karbohydrat: \"\",\n    hvoravSukkerarter: \"\",\n    kostfiber: \"\",\n    protein: \"\",\n    salt: \"\",\n  });\n\n  // Handler for updating nutrition state/state variable based on input field changes/input values\n  const changeHandle = (event) => {\n    console.log(\"changeHandle ===\", event.target, event.target.value);\n    setNutrition({\n      ...nutrition,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  // define function to handle form submission\n  const onClick = (e) => {\n    e.preventDefault();\n    setButtonClicked(true);\n    setShowHelsepåstander(true);\n    setShowButtons(true);\n\n    console.log(\"onclick ===\", selectsPart, nutrition);\n\n    // Check if all required fields are filled out and within valid ranges\n    // The if statement checks if all required inputs are non-empty and meet the nutritional requirements\n    if (\n      nutrition.fett !== \"\" &&\n      nutrition.fett <= 10 &&\n      nutrition.mettede !== \"\" &&\n      nutrition.karbohydrat !== \"\" &&\n      nutrition.hvoravSukkerarter !== \"\" &&\n      nutrition.hvoravSukkerarter <= 3 &&\n      nutrition.kostfiber !== \"\" &&\n      nutrition.protein !== \"\" &&\n      nutrition.salt !== \"\" &&\n      nutrition.salt <= 2\n    ) {\n      // If all requirements are met, display the nutrition results\n      setShowNokkelhulletResults(true);\n      // Hide any empty result messages or error messages\n      setShowEmptyResult(false);\n\n      // Check if the user selected \"energikj\" and if nutrition input lable of \"energikj\" is not empty\n      if (selectsPart === \"energikj\" && nutrition.energikj !== \"\") {\n        setEnergikj(false);\n      }\n\n      // Check if the user selected \"energikcal\" and if nutrition input lable of \"energikcal\" is not empty\n      if (selectsPart === \"energikcal\" && nutrition.energikcal !== \"\") {\n        setEnergikcal(false);\n      }\n      // Reset all input validation errors\n      setFett(false);\n      setFettNull(false);\n      setMettede(false);\n      setKarbohydrat(false);\n      setHvoravSukkerarter(false);\n      setHvoravSukkerarterNull(false);\n      setKostfiber(false);\n      setProtein(false);\n      setSalt(false);\n      setSaltNull(false);\n      // If the user has not selected any nutrients, set errors accordingly\n      // Check each nutrition value to see if it is missing or negative\n      // show input validation errors if any input is missing or negative.\n    } else {\n      if (selectsPart === \"energikj\") {\n        console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n        if (nutrition.energikj === \"\" || nutrition.energikj < 0) {\n          console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n          setEnergikj(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikj(false);\n        }\n      }\n\n      if (selectsPart === \"energikcal\") {\n        console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n        if (nutrition.energikcal === \"\" || nutrition.energikcal < 0) {\n          console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n          setEnergikcal(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikcal(false);\n        }\n      }\n\n      // repeat for each nutrition value...\n      if (nutrition.fett === \"\" || nutrition.fett < 0) {\n        setFettNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setFettNull(false);\n      }\n      if (nutrition.fett > 10) {\n        setFett(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setFett(false);\n      }\n\n      if (nutrition.mettede === \"\" || nutrition.mettede < 0) {\n        setMettede(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setMettede(false);\n      }\n\n      // Check if the 'karbohydrat' input is missing or negative, and display an error message if necessary\n      if (nutrition.karbohydrat === \"\" || nutrition.karbohydrat < 0) {\n        setKarbohydrat(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKarbohydrat(false);\n      }\n\n      // Check if the 'hvoravSukkerarter' input is missing, negative or above the maximum allowed value (1),\n      // and display an error message if necessary\n      if (\n        nutrition.hvoravSukkerarter === \"\" ||\n        nutrition.hvoravSukkerarter < 0\n      ) {\n        setHvoravSukkerarterNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setHvoravSukkerarterNull(false);\n      }\n      if (nutrition.hvoravSukkerarter > 3) {\n        setHvoravSukkerarter(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setHvoravSukkerarter(false);\n      }\n\n      if (nutrition.kostfiber === \"\" || nutrition.kostfiber < 0) {\n        setKostfiber(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKostfiber(false);\n      }\n\n      if (nutrition.protein === \"\" || nutrition.protein < 0) {\n        setProtein(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setProtein(false);\n      }\n\n      if (nutrition.salt === \"\" || nutrition.salt < 0) {\n        setSaltNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setSaltNull(false);\n      }\n      if (nutrition.salt > 2) {\n        setSalt(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setSalt(false);\n      }\n    }\n\n    // Check for the \"LOW SUGARS\" claim\n    if (foodType === \"solid\" && parseFloat(nutrition.karbohydrat) <= 5) {\n      setLowSugars(true);\n    } else if (\n      foodType === \"liquid\" &&\n      parseFloat(nutrition.karbohydrat) <= 2.5\n    ) {\n      setLowSugars(true);\n    } else {\n      setLowSugars(false);\n    }\n\n    // Check the condition for the \"WITH NO ADDED SUGARS\" nutrition claim\n    if (nutrition.hvoravSukkerarter === \"0\" && nutrition.karbohydrat > 0) {\n      setWithNoAddedSugars(true);\n    } else {\n      setWithNoAddedSugars(false);\n    }\n  };\n\n  // create an array of energy units to select from\n  const selectUnit = [\n    {\n      value: \"energikj\",\n      label: \"(kj)\",\n    },\n    {\n      value: \"energikcal\",\n      label: \"(kcal)\",\n    },\n  ];\n\n  // Declare a state variable for the select dropdown.\n  const [selectsPart, setSelectPart] = useState(\"\");\n\n  // A function to handle changes to the select dropdown energy unit\n  const handlerPart = (event) => {\n    const inputVal = document.getElementsByName(event.value);\n    console.log(\"handlerPart ===\", event, nutrition, inputVal);\n    setSelectPart(event.value);\n  };\n\n  //create an array of food types to select from\n  const foodTypes = [\n    {\n      value: \"solid\",\n      label: \"Fast form\",\n    },\n    {\n      value: \"liquid\",\n      label: \"Flytende form\",\n    },\n  ];\n\n  return (\n    <div className=\"row\">\n      {/* This div creates a column layout for the left side of the table */}\n      <div className=\"col-md-6\">\n        {/* the selector (dropdown menu) for choosing the food type. */}\n        <div className=\"form-group\">\n          <label htmlFor=\"foodType\">Velg type matvare:</label>\n          <Select\n            className=\"form-control\"\n            id=\"foodType\"\n            options={foodTypes}\n            onChange={(e) => setFoodType(e.value)} // update the onFoodTypeChange function to directly set the food type state\n            placeholder=\"Velg type matvare\"\n          />\n        </div>\n\n        <h5>\n          Næringsinnhold per 100{\" \"}\n          {foodType === \"solid\" ? \"g\" : foodType === \"liquid\" ? \"ml\" : \"g/ml\"}\n        </h5>\n\n        {/* This div adds a light background color to the table */}\n        <div className=\"bg-light\">\n          {/* This table shows the nutritional information */}\n          <table className=\"table table-striped\">\n            {/* The table header */}\n            <thead>\n              <tr>\n                <th scope=\"col\" className=\"table-font\">\n                  Energi eller næringsstoff\n                </th>\n                <th scope=\"col\" className=\"table-font\">\n                  Mengde\n                </th>\n              </tr>\n            </thead>\n\n            {/* The table body */}\n            <tbody>\n              {/* This row shows the energy content */}\n              <tr className={(energikj, energikcal ? \"alert-box\" : null)}>\n                <th scope=\"row\" className=\"table-font\">\n                  {/* An icon with a tooltip to indicate missing values in energy parameters */}\n                  {energikj && energikcal ? (\n                    <Tooltip\n                      title=\"Mangler verdi i energi (kJ/Kcal) parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  {/* This div displays the energy label and unit */}\n                  <div className=\"row\">\n                    <div className=\"col-md-3\">\n                      <label for=\"energiunit\" class=\"form-label\">\n                        Energi\n                      </label>\n                    </div>\n                    {/* A dropdown menu for selecting the energy unit */}\n                    <div className=\"col-md-6\">\n                      <Select\n                        placeholder={<div>Velg enhet</div>}\n                        className=\"form-select-md mb-3\"\n                        options={selectUnit}\n                        onChange={(e) => handlerPart(e)}\n                      />\n                    </div>\n                  </div>\n                </th>\n                {/* An input field for entering the energy value */}\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name={selectsPart}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* Additional rows for other nutrient selections */}\n\n              {/* This row shows the fat content */}\n              <tr\n                className={\n                  fett ? \"alert-box\" : null || fettNull ? \"alert-box\" : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {fett ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden fett. Mengden på fett må være lavere enn eller lik 10 g / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {fettNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i fett parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Fett (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"fett\"\n                    value={nutrition.fett}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the saturated fat content */}\n              <tr className={mettede ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {mettede ? (\n                    <Tooltip\n                      title=\"Mangler verdi i mettede fettsyrer parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Mettede fettsyrer (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"mettede\"\n                    value={nutrition.mettede}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the carbohydrate (total sugars)content */}\n              <tr className={karbohydrat ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {/* If the \"karbohydrat\" value is missing, display an exclamation icon with a tooltip */}\n                  {karbohydrat ? (\n                    <Tooltip\n                      title=\"Mangler verdi i karbohydrat parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Karbohydrat (g)\n                </th>\n                {/* Input field for \"karbohydrat\" value */}\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"karbohydrat\"\n                    value={nutrition.karbohydrat}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows hvorav tilsatte sukkerarter (added sugars)content */}\n              <tr\n                className={\n                  hvoravSukkerarter\n                    ? \"alert-box\"\n                    : null || hvoravSukkerarterNull\n                    ? \"alert-box\"\n                    : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {/* If the \"hvoravSukkerarter\" value is too high, display a ban icon with a tooltip */}\n                  {hvoravSukkerarter ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden hvoravSukkerarter. Mengden på hvoravSukkerarter må være lavere enn eller lik 3 g/ 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {/* If the \"hvoravSukkerarter\" value is missing, display an exclamation icon with a tooltip */}\n                  {hvoravSukkerarterNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i hvorav sukkerarter parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Hvorav tilsatte sukkerarter (g)\n                </th>\n                {/* Input field for \"hvoravSukkerarter\" value */}\n\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"hvoravSukkerarter\"\n                    value={nutrition.hvoravSukkerarter}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows kostfiber content */}\n              <tr className={kostfiber ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {kostfiber ? (\n                    <Tooltip\n                      title=\"Mangler verdi i kostfiber parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Kostfiber (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"kostfiber\"\n                    value={nutrition.kostfiber}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the protein content */}\n              <tr className={protein ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {protein ? (\n                    <Tooltip\n                      title=\"Mangler verdi i protein parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Protein (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"protein\"\n                    value={nutrition.protein}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows salt content */}\n              <tr\n                className={\n                  salt ? \"alert-box\" : null || saltNull ? \"alert-box\" : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {salt ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden salt. Mengden på salt må være lavere enn eller lik 2 g / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {saltNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i salt parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Salt (g)\n                </th>\n                <td colSpan=\"2\">\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"salt\"\n                    value={nutrition.salt}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n\n        {/* Button that submits the form and calls the onClick function */}\n        <div className=\"col-12 button-div\">\n          <button\n            type=\"submit\"\n            className=\"btn btn-primary btn-lg button-search\"\n            onClick={onClick}\n          >\n            Beregn\n          </button>\n        </div>\n      </div>\n\n      <div className=\"col-md-6\">\n        {/* positive results nøkkelhullet container\" */}\n        {showNokkelhulletResults ? (\n          <div className=\"container nøkkelhullet-food-result-container\">\n            {/* An image with class \"keyhole-logo\" and alt text \"keyhole logo\" */}\n            <img\n              src={keyholeLgog}\n              className=\"keyhole-logo img-fluid\"\n              alt=\"keyhole logo\"\n            />\n            {/* A heading with text \"Nøkkelhullet\" */}\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir Nøkkelhullet. </p>\n              </div>\n              <div className=\"col-md-2\">\n                {/* FontAwesome icon with event listener to show the \"Nøkkelhullet\" information section */}\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  {/* A paragraph with a link to Lovdata's \"Forskrift om frivillig merking a nœringsmidler med Nokkellhullet\" */}\n                  <p>\n                    Les mer om hvilke krav det stilles for merking av\n                    Nokkellhullet på Lovdatas \"Forskrift om frivillig merking a\n                    nœringsmidler med Nokkellhullet\":\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  {/* FontAwesome icon with event listener to hide the \"Nøkkelhullet\" information section */}\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        ) : null}\n        {/*Negative results nøkkelhullet container\" */}\n        {showNokkelhulletResults === false && (\n          <div className=\"container nøkkelhullet-food-negResult-container\">\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir ikke Nøkkelhullet.</p>\n                {showEmptyResult ? (\n                  <p>** Obligatoriske næringsverdier kan ikke være tomme.</p>\n                ) : null}\n\n                {fett ? (\n                  <p>** Fett verdien kan være høyst 10 g/100 g.</p>\n                ) : null}\n\n                {hvoravSukkerarter ? (\n                  <p>\n                    ** Tilsatte sukkerarter verdien kan være høyst 3 g/100 g.\n                  </p>\n                ) : null}\n\n                {salt ? <p>** Salt verdien kan være høyst 2 g/100 g.</p> : null}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om frivillig merking av næringsmidler med Nøkkelhullet:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for ernæringspåstander if there are all true results */}\n        {buttonClicked && (\n          <div\n            className={\n              lowSugars && withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-all\"\n                : !lowSugars && !withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-none\"\n                : \"container ernæringspåstander-food-result-container-some\"\n            }\n          >\n            <h5>Ernæringspåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                {/* Low sugars */}\n                {lowSugars ? (\n                  <div>\n                    <p>** Lavt sukkerinnhold:</p>\n                    <p>\n                      Dette produktet inneholder høyst 5 g sukkerarter per 100 g\n                      for næringsmidler i fast form, eller høyst 2,5 g\n                      sukkerarter per 100 ml for næringsmidler i flytende form\n                      og oppfyller kravet for \"Lavt sukkerinnhold\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Lavt sukkerinnhold\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        For faste næringsmidler, sukkerinnholdet må være høyst 5\n                        g per 100 g.\n                      </li>\n                      <li>\n                        For flytende næringsmidler, sukkerinnholdet må være\n                        høyst 2,5 g per 100 ml.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n\n                {/* No added sugars */}\n                {withNoAddedSugars ? (\n                  <div>\n                    <p>** Uten tilsatt sukker:</p>\n                    <p>\n                      Dette produktet er ikke tilsatt monosakkarider,\n                      disakkarider eller andre næringsmidler på grunn av deres\n                      søtende egenskaper og oppfyller kravet for \"Uten tilsatt\n                      sukker\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Uten tilsatt sukker\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        Produktet må ikke være tilsatt monosakkarider,\n                        disakkarider eller andre næringsmidler på grunn av deres\n                        søtende egenskaper.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"ernaerings\")}\n                />\n              </div>\n            </div>\n            {infoErnaerings ? (\n              // Information section for \"Ernæringspåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"ernaerings\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for Helsepåstander results  */}\n        {showHelsepåstander && (\n          <div\n            className=\"container helsepåstander-food-result-container\"\n            style={{ background: \"#f2f0b5\" }}\n          >\n            <h5>Helsepåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Under utvikling. </p>\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"helsepåstander\")}\n                />\n              </div>\n            </div>\n            {infoHelsepåstander ? (\n              // Information section for \"Helsepåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"helsepåstander\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"15px\" }}></div>\n        {/* conditional rendering for the buttons using showButtons state */}\n        {showButtons && (\n          <div className=\"d-flex justify-content-between\">\n            {/* Save button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-save\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Lagre produkt\n            </button>\n\n            {/* Share button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-share\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Del produkt\n            </button>\n\n            {/* Add a new product button */}\n            <button\n              className=\"btn btn-primary\"\n              onClick={() => window.location.reload()}\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-plus\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Legg til et nytt produkt\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Kategori24c1;\n","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Kategori24c2.js",["495","496","497","498"],[],"import React from \"react\";\nimport { useState, useEffect } from \"react\"; // import the useState and useeffect hook.\nimport { faCircleExclamation } from \"@fortawesome/free-solid-svg-icons\"; // import an icon.\nimport { faBan } from \"@fortawesome/free-solid-svg-icons\";\nimport { faSave, faShare, faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"; // import FontAwesomeIcon component.\nimport Tooltip from \"@mui/material/Tooltip\"; // import Tooltip component.\nimport keyholeLgog from \"./circle-keyhole-logo.png\"; // import an image\nimport { faCircleInfo } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport { faXmarkCircle } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport Select from \"react-select\"; // import Select component\n\nconst Kategori24c2 = () => {\n  // State variables for showing results and empty result message\n  const [showNokkelhulletResults, setShowNokkelhulletResults] = useState(null);\n  const [showErnaeringsResults, setShowErnaeringsResults] = useState(null);\n  const [showHelsepåstander, setShowHelsepåstander] = useState(null);\n  const [showEmptyResult, setShowEmptyResult] = useState(\"\"); // initialize state variable for showing empty result message.\n\n  //state variable to store the user's food type selection (solid or liquid) and the low sugars claim result\n  const [foodType, setFoodType] = useState(\"\");\n  const [lowSugars, setLowSugars] = useState(null);\n\n  //state variable to track whether the product meets the WITH NO ADDED SUGARS claim or not\n  const [withNoAddedSugars, setWithNoAddedSugars] = useState(false);\n\n  // State variable for tracking if the button is clicked\n  const [buttonClicked, setButtonClicked] = useState(false);\n\n  // useEffect hook for checking the condition for the \"WITH NO ADDED SUGARS\" claim when button is clicked\n  useEffect(() => {\n    if (buttonClicked) {\n      if (withNoAddedSugars) {\n        setShowErnaeringsResults(true);\n      } else {\n        setShowErnaeringsResults(false);\n      }\n    }\n  }, [withNoAddedSugars, buttonClicked]);\n\n  //state for controlling the buttons' visibility\n  const [showButtons, setShowButtons] = useState(false);\n\n  // State variables to control the visibility of the information sections\n  const [infoNokkelhullet, setInfoNokkelhullet] = useState(false);\n  const [infoErnaerings, setInfoErnaerings] = useState(false);\n  const [infoHelsepåstander, setInfoHelsepåstander] = useState(false);\n\n  // Function to show an information section based on the container parameter\n  const onClickInfo = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(true);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(true);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(true);\n    }\n  };\n\n  // Function to hide an information section based on the container parameter\n  const onClickClose = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(false);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(false);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(false);\n    }\n  };\n\n  // State variables for handling input fields and validation errors\n  const [energikj, setEnergikj] = useState(false);\n  const [energikcal, setEnergikcal] = useState(false);\n\n  const [fett, setFett] = useState(false);\n  const [fettNull, setFettNull] = useState(false);\n  const [mettede, setMettede] = useState(false);\n  const [karbohydrat, setKarbohydrat] = useState(false);\n  const [hvoravSukkerarter, setHvoravSukkerarter] = useState(false);\n  const [hvoravSukkerarterNull, setHvoravSukkerarterNull] = useState(false);\n  const [kostfiber, setKostfiber] = useState(false);\n  const [protein, setProtein] = useState(false);\n  const [salt, setSalt] = useState(false);\n  const [saltNull, setSaltNull] = useState(false);\n  // State variable for storing nutrition information entered by user\n  const [nutrition, setNutrition] = useState({\n    energikj: \"\",\n    energikcal: \"\",\n    fett: \"\",\n    mettede: \"\",\n    karbohydrat: \"\",\n    hvoravSukkerarter: \"\",\n    kostfiber: \"\",\n    protein: \"\",\n    salt: \"\",\n  });\n\n  // Handler for updating nutrition state/state variable based on input field changes/input values\n  const changeHandle = (event) => {\n    console.log(\"changeHandle ===\", event.target, event.target.value);\n    setNutrition({\n      ...nutrition,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  // define function to handle form submission\n  const onClick = (e) => {\n    e.preventDefault();\n    setButtonClicked(true);\n    setShowHelsepåstander(true);\n    setShowButtons(true);\n\n    console.log(\"onclick ===\", selectsPart, nutrition);\n\n    // Check if all required fields are filled out and within valid ranges\n    // The if statement checks if all required inputs are non-empty and meet the nutritional requirements\n    if (\n      nutrition.fett !== \"\" &&\n      nutrition.fett <= 10 &&\n      nutrition.mettede !== \"\" &&\n      nutrition.karbohydrat !== \"\" &&\n      nutrition.hvoravSukkerarter !== \"\" &&\n      nutrition.hvoravSukkerarter <= 3 &&\n      nutrition.kostfiber !== \"\" &&\n      nutrition.protein !== \"\" &&\n      nutrition.salt !== \"\" &&\n      nutrition.salt <= 2.5\n    ) {\n      // If all requirements are met, display the nutrition results\n      setShowNokkelhulletResults(true);\n      // Hide any empty result messages or error messages\n      setShowEmptyResult(false);\n\n      // Check if the user selected \"energikj\" and if nutrition input lable of \"energikj\" is not empty\n      if (selectsPart === \"energikj\" && nutrition.energikj !== \"\") {\n        setEnergikj(false);\n      }\n\n      // Check if the user selected \"energikcal\" and if nutrition input lable of \"energikcal\" is not empty\n      if (selectsPart === \"energikcal\" && nutrition.energikcal !== \"\") {\n        setEnergikcal(false);\n      }\n      // Reset all input validation errors\n      setFett(false);\n      setFettNull(false);\n      setMettede(false);\n      setKarbohydrat(false);\n      setHvoravSukkerarter(false);\n      setHvoravSukkerarterNull(false);\n      setKostfiber(false);\n      setProtein(false);\n      setSalt(false);\n      setSaltNull(false);\n      // If the user has not selected any nutrients, set errors accordingly\n      // Check each nutrition value to see if it is missing or negative\n      // show input validation errors if any input is missing or negative.\n    } else {\n      if (selectsPart === \"energikj\") {\n        console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n        if (nutrition.energikj === \"\" || nutrition.energikj < 0) {\n          console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n          setEnergikj(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikj(false);\n        }\n      }\n\n      if (selectsPart === \"energikcal\") {\n        console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n        if (nutrition.energikcal === \"\" || nutrition.energikcal < 0) {\n          console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n          setEnergikcal(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikcal(false);\n        }\n      }\n\n      // repeat for each nutrition value...\n      if (nutrition.fett === \"\" || nutrition.fett < 0) {\n        setFettNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setFettNull(false);\n      }\n      if (nutrition.fett > 10) {\n        setFett(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setFett(false);\n      }\n\n      if (nutrition.mettede === \"\" || nutrition.mettede < 0) {\n        setMettede(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setMettede(false);\n      }\n\n      // Check if the 'karbohydrat' input is missing or negative, and display an error message if necessary\n      if (nutrition.karbohydrat === \"\" || nutrition.karbohydrat < 0) {\n        setKarbohydrat(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKarbohydrat(false);\n      }\n\n      // Check if the 'hvoravSukkerarter' input is missing, negative or above the maximum allowed value (1),\n      // and display an error message if necessary\n      if (\n        nutrition.hvoravSukkerarter === \"\" ||\n        nutrition.hvoravSukkerarter < 0\n      ) {\n        setHvoravSukkerarterNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setHvoravSukkerarterNull(false);\n      }\n      if (nutrition.hvoravSukkerarter > 3) {\n        setHvoravSukkerarter(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setHvoravSukkerarter(false);\n      }\n\n      if (nutrition.kostfiber === \"\" || nutrition.kostfiber < 0) {\n        setKostfiber(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKostfiber(false);\n      }\n\n      if (nutrition.protein === \"\" || nutrition.protein < 0) {\n        setProtein(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setProtein(false);\n      }\n\n      if (nutrition.salt === \"\" || nutrition.salt < 0) {\n        setSaltNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setSaltNull(false);\n      }\n      if (nutrition.salt > 2.5) {\n        setSalt(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setSalt(false);\n      }\n    }\n\n    // Check for the \"LOW SUGARS\" claim\n    if (foodType === \"solid\" && parseFloat(nutrition.karbohydrat) <= 5) {\n      setLowSugars(true);\n    } else if (\n      foodType === \"liquid\" &&\n      parseFloat(nutrition.karbohydrat) <= 2.5\n    ) {\n      setLowSugars(true);\n    } else {\n      setLowSugars(false);\n    }\n\n    // Check the condition for the \"WITH NO ADDED SUGARS\" nutrition claim\n    if (nutrition.hvoravSukkerarter === \"0\" && nutrition.karbohydrat > 0) {\n      setWithNoAddedSugars(true);\n    } else {\n      setWithNoAddedSugars(false);\n    }\n  };\n\n  // create an array of energy units to select from\n  const selectUnit = [\n    {\n      value: \"energikj\",\n      label: \"(kj)\",\n    },\n    {\n      value: \"energikcal\",\n      label: \"(kcal)\",\n    },\n  ];\n\n  // Declare a state variable for the select dropdown.\n  const [selectsPart, setSelectPart] = useState(\"\");\n\n  // A function to handle changes to the select dropdown energy unit\n  const handlerPart = (event) => {\n    const inputVal = document.getElementsByName(event.value);\n    console.log(\"handlerPart ===\", event, nutrition, inputVal);\n    setSelectPart(event.value);\n  };\n\n  //create an array of food types to select from\n  const foodTypes = [\n    {\n      value: \"solid\",\n      label: \"Fast form\",\n    },\n    {\n      value: \"liquid\",\n      label: \"Flytende form\",\n    },\n  ];\n\n  return (\n    <div className=\"row\">\n      {/* This div creates a column layout for the left side of the table */}\n      <div className=\"col-md-6\">\n        {/* the selector (dropdown menu) for choosing the food type. */}\n        <div className=\"form-group\">\n          <label htmlFor=\"foodType\">Velg type matvare:</label>\n          <Select\n            className=\"form-control\"\n            id=\"foodType\"\n            options={foodTypes}\n            onChange={(e) => setFoodType(e.value)} // update the onFoodTypeChange function to directly set the food type state\n            placeholder=\"Velg type matvare\"\n          />\n        </div>\n\n        <h5>\n          Næringsinnhold per 100{\" \"}\n          {foodType === \"solid\" ? \"g\" : foodType === \"liquid\" ? \"ml\" : \"g/ml\"}\n        </h5>\n\n        {/* This div adds a light background color to the table */}\n        <div className=\"bg-light\">\n          {/* This table shows the nutritional information */}\n          <table className=\"table table-striped\">\n            {/* The table header */}\n            <thead>\n              <tr>\n                <th scope=\"col\" className=\"table-font\">\n                  Energi eller næringsstoff\n                </th>\n                <th scope=\"col\" className=\"table-font\">\n                  Mengde\n                </th>\n              </tr>\n            </thead>\n\n            {/* The table body */}\n            <tbody>\n              {/* This row shows the energy content */}\n              <tr className={(energikj, energikcal ? \"alert-box\" : null)}>\n                <th scope=\"row\" className=\"table-font\">\n                  {/* An icon with a tooltip to indicate missing values in energy parameters */}\n                  {energikj && energikcal ? (\n                    <Tooltip\n                      title=\"Mangler verdi i energi (kJ/Kcal) parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  {/* This div displays the energy label and unit */}\n                  <div className=\"row\">\n                    <div className=\"col-md-3\">\n                      <label for=\"energiunit\" class=\"form-label\">\n                        Energi\n                      </label>\n                    </div>\n                    {/* A dropdown menu for selecting the energy unit */}\n                    <div className=\"col-md-6\">\n                      <Select\n                        placeholder={<div>Velg enhet</div>}\n                        className=\"form-select-md mb-3\"\n                        options={selectUnit}\n                        onChange={(e) => handlerPart(e)}\n                      />\n                    </div>\n                  </div>\n                </th>\n                {/* An input field for entering the energy value */}\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name={selectsPart}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* Additional rows for other nutrient selections */}\n\n              {/* This row shows the fat content */}\n              <tr\n                className={\n                  fett ? \"alert-box\" : null || fettNull ? \"alert-box\" : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {fett ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden fett. Mengden på fett må være lavere enn eller lik 10 g / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {fettNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i fett parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Fett (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"fett\"\n                    value={nutrition.fett}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the saturated fat content */}\n              <tr className={mettede ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {mettede ? (\n                    <Tooltip\n                      title=\"Mangler verdi i mettede fettsyrer parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Mettede fettsyrer (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"mettede\"\n                    value={nutrition.mettede}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the carbohydrate (total sugars)content */}\n              <tr className={karbohydrat ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {/* If the \"karbohydrat\" value is missing, display an exclamation icon with a tooltip */}\n                  {karbohydrat ? (\n                    <Tooltip\n                      title=\"Mangler verdi i karbohydrat parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Karbohydrat (g)\n                </th>\n                {/* Input field for \"karbohydrat\" value */}\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"karbohydrat\"\n                    value={nutrition.karbohydrat}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows hvorav tilsatte sukkerarter (added sugars)content */}\n              <tr\n                className={\n                  hvoravSukkerarter\n                    ? \"alert-box\"\n                    : null || hvoravSukkerarterNull\n                    ? \"alert-box\"\n                    : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {/* If the \"hvoravSukkerarter\" value is too high, display a ban icon with a tooltip */}\n                  {hvoravSukkerarter ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden hvoravSukkerarter. Mengden på hvoravSukkerarter må være lavere enn eller lik 3 g/ 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {/* If the \"hvoravSukkerarter\" value is missing, display an exclamation icon with a tooltip */}\n                  {hvoravSukkerarterNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i hvorav sukkerarter parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Hvorav tilsatte sukkerarter (g)\n                </th>\n                {/* Input field for \"hvoravSukkerarter\" value */}\n\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"hvoravSukkerarter\"\n                    value={nutrition.hvoravSukkerarter}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows kostfiber content */}\n              <tr className={kostfiber ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {kostfiber ? (\n                    <Tooltip\n                      title=\"Mangler verdi i kostfiber parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Kostfiber (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"kostfiber\"\n                    value={nutrition.kostfiber}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the protein content */}\n              <tr className={protein ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {protein ? (\n                    <Tooltip\n                      title=\"Mangler verdi i protein parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Protein (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"protein\"\n                    value={nutrition.protein}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows salt content */}\n              <tr\n                className={\n                  salt ? \"alert-box\" : null || saltNull ? \"alert-box\" : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {salt ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden salt. Mengden på salt må være lavere enn eller lik 2.5 g / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {saltNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i salt parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Salt (g)\n                </th>\n                <td colSpan=\"2\">\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"salt\"\n                    value={nutrition.salt}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n\n        {/* Button that submits the form and calls the onClick function */}\n        <div className=\"col-12 button-div\">\n          <button\n            type=\"submit\"\n            className=\"btn btn-primary btn-lg button-search\"\n            onClick={onClick}\n          >\n            Beregn\n          </button>\n        </div>\n      </div>\n\n      <div className=\"col-md-6\">\n        {/* positive results nøkkelhullet container\" */}\n        {showNokkelhulletResults ? (\n          <div className=\"container nøkkelhullet-food-result-container\">\n            {/* An image with class \"keyhole-logo\" and alt text \"keyhole logo\" */}\n            <img\n              src={keyholeLgog}\n              className=\"keyhole-logo img-fluid\"\n              alt=\"keyhole logo\"\n            />\n            {/* A heading with text \"Nøkkelhullet\" */}\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir Nøkkelhullet. </p>\n              </div>\n              <div className=\"col-md-2\">\n                {/* FontAwesome icon with event listener to show the \"Nøkkelhullet\" information section */}\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  {/* A paragraph with a link to Lovdata's \"Forskrift om frivillig merking a nœringsmidler med Nokkellhullet\" */}\n                  <p>\n                    Les mer om hvilke krav det stilles for merking av\n                    Nokkellhullet på Lovdatas \"Forskrift om frivillig merking a\n                    nœringsmidler med Nokkellhullet\":\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  {/* FontAwesome icon with event listener to hide the \"Nøkkelhullet\" information section */}\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        ) : null}\n        {/*Negative results nøkkelhullet container\" */}\n        {showNokkelhulletResults === false && (\n          <div className=\"container nøkkelhullet-food-negResult-container\">\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir ikke Nøkkelhullet.</p>\n                {showEmptyResult ? (\n                  <p>** Obligatoriske næringsverdier kan ikke være tomme.</p>\n                ) : null}\n\n                {fett ? (\n                  <p>** Fett verdien kan være høyst 10 g/100 g.</p>\n                ) : null}\n\n                {hvoravSukkerarter ? (\n                  <p>\n                    ** Tilsatte sukkerarter verdien kan være høyst 3 g/100 g.\n                  </p>\n                ) : null}\n\n                {salt ? (\n                  <p>** Salt verdien kan være høyst 2.5 g/100 g.</p>\n                ) : null}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om frivillig merking av næringsmidler med Nøkkelhullet:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for ernæringspåstander if there are all true results */}\n        {buttonClicked && (\n          <div\n            className={\n              lowSugars && withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-all\"\n                : !lowSugars && !withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-none\"\n                : \"container ernæringspåstander-food-result-container-some\"\n            }\n          >\n            <h5>Ernæringspåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                {/* Low sugars */}\n                {lowSugars ? (\n                  <div>\n                    <p>** Lavt sukkerinnhold:</p>\n                    <p>\n                      Dette produktet inneholder høyst 5 g sukkerarter per 100 g\n                      for næringsmidler i fast form, eller høyst 2,5 g\n                      sukkerarter per 100 ml for næringsmidler i flytende form\n                      og oppfyller kravet for \"Lavt sukkerinnhold\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Lavt sukkerinnhold\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        For faste næringsmidler, sukkerinnholdet må være høyst 5\n                        g per 100 g.\n                      </li>\n                      <li>\n                        For flytende næringsmidler, sukkerinnholdet må være\n                        høyst 2,5 g per 100 ml.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n\n                {/* No added sugars */}\n                {withNoAddedSugars ? (\n                  <div>\n                    <p>** Uten tilsatt sukker:</p>\n                    <p>\n                      Dette produktet er ikke tilsatt monosakkarider,\n                      disakkarider eller andre næringsmidler på grunn av deres\n                      søtende egenskaper og oppfyller kravet for \"Uten tilsatt\n                      sukker\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Uten tilsatt sukker\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        Produktet må ikke være tilsatt monosakkarider,\n                        disakkarider eller andre næringsmidler på grunn av deres\n                        søtende egenskaper.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"ernaerings\")}\n                />\n              </div>\n            </div>\n            {infoErnaerings ? (\n              // Information section for \"Ernæringspåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"ernaerings\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for Helsepåstander results  */}\n        {showHelsepåstander && (\n          <div\n            className=\"container helsepåstander-food-result-container\"\n            style={{ background: \"#f2f0b5\" }}\n          >\n            <h5>Helsepåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Under utvikling. </p>\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"helsepåstander\")}\n                />\n              </div>\n            </div>\n            {infoHelsepåstander ? (\n              // Information section for \"Helsepåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"helsepåstander\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"15px\" }}></div>\n        {/* conditional rendering for the buttons using showButtons state */}\n        {showButtons && (\n          <div className=\"d-flex justify-content-between\">\n            {/* Save button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-save\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Lagre produkt\n            </button>\n\n            {/* Share button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-share\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Del produkt\n            </button>\n\n            {/* Add a new product button */}\n            <button\n              className=\"btn btn-primary\"\n              onClick={() => window.location.reload()}\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-plus\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Legg til et nytt produkt\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Kategori24c2;\n","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Kategori25b.js",["499","500","501","502"],[],"import React from \"react\";\nimport { useState, useEffect } from \"react\"; // import the useState and useeffect hook.\nimport { faCircleExclamation } from \"@fortawesome/free-solid-svg-icons\"; // import an icon.\nimport { faBan } from \"@fortawesome/free-solid-svg-icons\";\nimport { faSave, faShare, faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"; // import FontAwesomeIcon component.\nimport Tooltip from \"@mui/material/Tooltip\"; // import Tooltip component.\nimport keyholeLgog from \"./circle-keyhole-logo.png\"; // import an image\nimport { faCircleInfo } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport { faXmarkCircle } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport Select from \"react-select\"; // import Select component\n\nconst Kategori25b = () => {\n  // State variables for showing results and empty result message\n  const [showNokkelhulletResults, setShowNokkelhulletResults] = useState(null);\n  const [showErnaeringsResults, setShowErnaeringsResults] = useState(null);\n  const [showHelsepåstander, setShowHelsepåstander] = useState(null);\n  const [showEmptyResult, setShowEmptyResult] = useState(\"\"); // initialize state variable for showing empty result message.\n\n  //state variable to store the user's food type selection (solid or liquid) and the low sugars claim result\n  const [foodType, setFoodType] = useState(\"\");\n  const [lowSugars, setLowSugars] = useState(null);\n\n  //state variable to track whether the product meets the WITH NO ADDED SUGARS claim or not\n  const [withNoAddedSugars, setWithNoAddedSugars] = useState(false);\n\n  // State variable for tracking if the button is clicked\n  const [buttonClicked, setButtonClicked] = useState(false);\n\n  // useEffect hook for checking the condition for the \"WITH NO ADDED SUGARS\" claim when button is clicked\n  useEffect(() => {\n    if (buttonClicked) {\n      if (withNoAddedSugars) {\n        setShowErnaeringsResults(true);\n      } else {\n        setShowErnaeringsResults(false);\n      }\n    }\n  }, [withNoAddedSugars, buttonClicked]);\n\n  //state for controlling the buttons' visibility\n  const [showButtons, setShowButtons] = useState(false);\n\n  // State variables to control the visibility of the information sections\n  const [infoNokkelhullet, setInfoNokkelhullet] = useState(false);\n  const [infoErnaerings, setInfoErnaerings] = useState(false);\n  const [infoHelsepåstander, setInfoHelsepåstander] = useState(false);\n\n  // Function to show an information section based on the container parameter\n  const onClickInfo = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(true);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(true);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(true);\n    }\n  };\n\n  // Function to hide an information section based on the container parameter\n  const onClickClose = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(false);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(false);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(false);\n    }\n  };\n\n  // State variables for handling input fields and validation errors\n  const [energikj, setEnergikj] = useState(false);\n  const [energikcal, setEnergikcal] = useState(false);\n\n  const [fett, setFett] = useState(false);\n  const [fettNull, setFettNull] = useState(false);\n  const [mettede, setMettede] = useState(false);\n  const [mettedeNull, setMettedeNull] = useState(false);\n  const [karbohydrat, setKarbohydrat] = useState(false);\n  const [hvoravSukkerarter, setHvoravSukkerarter] = useState(false);\n  const [hvoravSukkerarterNull, setHvoravSukkerarterNull] = useState(false);\n  const [kostfiber, setKostfiber] = useState(false);\n  const [protein, setProtein] = useState(false);\n  const [salt, setSalt] = useState(false);\n  const [saltNull, setSaltNull] = useState(false);\n  // State variable for storing nutrition information entered by user\n  const [nutrition, setNutrition] = useState({\n    energikj: \"\",\n    energikcal: \"\",\n    fett: \"\",\n    mettede: \"\",\n    karbohydrat: \"\",\n    hvoravSukkerarter: \"\",\n    kostfiber: \"\",\n    protein: \"\",\n    salt: \"\",\n  });\n\n  // Handler for updating nutrition state/state variable based on input field changes/input values\n  const changeHandle = (event) => {\n    console.log(\"changeHandle ===\", event.target, event.target.value);\n    setNutrition({\n      ...nutrition,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  // define function to handle form submission\n  const onClick = (e) => {\n    e.preventDefault();\n    setButtonClicked(true);\n    setShowHelsepåstander(true);\n    setShowButtons(true);\n\n    console.log(\"onclick ===\", selectsPart, nutrition);\n\n    // Check if all required fields are filled out and within valid ranges\n    // The if statement checks if all required inputs are non-empty and meet the nutritional requirements\n    if (\n      nutrition.fett !== \"\" &&\n      nutrition.fett <= 10 &&\n      nutrition.mettede !== \"\" &&\n      nutrition.mettede <= 3.5 &&\n      nutrition.karbohydrat !== \"\" &&\n      nutrition.hvoravSukkerarter !== \"\" &&\n      nutrition.hvoravSukkerarter <= 3 &&\n      nutrition.kostfiber !== \"\" &&\n      nutrition.protein !== \"\" &&\n      nutrition.salt !== \"\" &&\n      nutrition.salt <= 1\n    ) {\n      // If all requirements are met, display the nutrition results\n      setShowNokkelhulletResults(true);\n      // Hide any empty result messages or error messages\n      setShowEmptyResult(false);\n\n      // Check if the user selected \"energikj\" and if nutrition input lable of \"energikj\" is not empty\n      if (selectsPart === \"energikj\" && nutrition.energikj !== \"\") {\n        setEnergikj(false);\n      }\n\n      // Check if the user selected \"energikcal\" and if nutrition input lable of \"energikcal\" is not empty\n      if (selectsPart === \"energikcal\" && nutrition.energikcal !== \"\") {\n        setEnergikcal(false);\n      }\n      // Reset all input validation errors\n      setFett(false);\n      setFettNull(false);\n      setMettede(false);\n      setMettedeNull(false);\n      setKarbohydrat(false);\n      setHvoravSukkerarter(false);\n      setHvoravSukkerarterNull(false);\n      setKostfiber(false);\n      setProtein(false);\n      setSalt(false);\n      setSaltNull(false);\n      // If the user has not selected any nutrients, set errors accordingly\n      // Check each nutrition value to see if it is missing or negative\n      // show input validation errors if any input is missing or negative.\n    } else {\n      if (selectsPart === \"energikj\") {\n        console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n        if (nutrition.energikj === \"\" || nutrition.energikj < 0) {\n          console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n          setEnergikj(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikj(false);\n        }\n      }\n\n      if (selectsPart === \"energikcal\") {\n        console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n        if (nutrition.energikcal === \"\" || nutrition.energikcal < 0) {\n          console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n          setEnergikcal(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikcal(false);\n        }\n      }\n\n      // repeat for each nutrition value...\n      if (nutrition.fett === \"\" || nutrition.fett < 0) {\n        setFettNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setFettNull(false);\n      }\n      if (nutrition.fett > 10) {\n        setFett(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setFett(false);\n      }\n\n      if (nutrition.mettede === \"\" || nutrition.mettede < 0) {\n        setMettedeNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setMettedeNull(false);\n      }\n      if (nutrition.mettede > 3.5) {\n        setMettede(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setMettede(false);\n      }\n\n      // Check if the 'karbohydrat' input is missing or negative, and display an error message if necessary\n      if (nutrition.karbohydrat === \"\" || nutrition.karbohydrat < 0) {\n        setKarbohydrat(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKarbohydrat(false);\n      }\n\n      // Check if the 'hvoravSukkerarter' input is missing, negative or above the maximum allowed value (1),\n      // and display an error message if necessary\n      if (\n        nutrition.hvoravSukkerarter === \"\" ||\n        nutrition.hvoravSukkerarter < 0\n      ) {\n        setHvoravSukkerarterNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setHvoravSukkerarterNull(false);\n      }\n      if (nutrition.hvoravSukkerarter > 3) {\n        setHvoravSukkerarter(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setHvoravSukkerarter(false);\n      }\n\n      if (nutrition.kostfiber === \"\" || nutrition.kostfiber < 0) {\n        setKostfiber(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKostfiber(false);\n      }\n\n      if (nutrition.protein === \"\" || nutrition.protein < 0) {\n        setProtein(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setProtein(false);\n      }\n\n      if (nutrition.salt === \"\" || nutrition.salt < 0) {\n        setSaltNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setSaltNull(false);\n      }\n      if (nutrition.salt > 1) {\n        setSalt(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setSalt(false);\n      }\n    }\n\n    // Check for the \"LOW SUGARS\" claim\n    if (foodType === \"solid\" && parseFloat(nutrition.karbohydrat) <= 5) {\n      setLowSugars(true);\n    } else if (\n      foodType === \"liquid\" &&\n      parseFloat(nutrition.karbohydrat) <= 2.5\n    ) {\n      setLowSugars(true);\n    } else {\n      setLowSugars(false);\n    }\n\n    // Check the condition for the \"WITH NO ADDED SUGARS\" nutrition claim\n    if (nutrition.hvoravSukkerarter === \"0\" && nutrition.karbohydrat > 0) {\n      setWithNoAddedSugars(true);\n    } else {\n      setWithNoAddedSugars(false);\n    }\n  };\n\n  // create an array of energy units to select from\n  const selectUnit = [\n    {\n      value: \"energikj\",\n      label: \"(kj)\",\n    },\n    {\n      value: \"energikcal\",\n      label: \"(kcal)\",\n    },\n  ];\n\n  // Declare a state variable for the select dropdown.\n  const [selectsPart, setSelectPart] = useState(\"\");\n\n  // A function to handle changes to the select dropdown energy unit\n  const handlerPart = (event) => {\n    const inputVal = document.getElementsByName(event.value);\n    console.log(\"handlerPart ===\", event, nutrition, inputVal);\n    setSelectPart(event.value);\n  };\n\n  //create an array of food types to select from\n  const foodTypes = [\n    {\n      value: \"solid\",\n      label: \"Fast form\",\n    },\n    {\n      value: \"liquid\",\n      label: \"Flytende form\",\n    },\n  ];\n\n  return (\n    <div className=\"row\">\n      {/* This div creates a column layout for the left side of the table */}\n      <div className=\"col-md-6\">\n        {/* the selector (dropdown menu) for choosing the food type. */}\n        <div className=\"form-group\">\n          <label htmlFor=\"foodType\">Velg type matvare:</label>\n          <Select\n            className=\"form-control\"\n            id=\"foodType\"\n            options={foodTypes}\n            onChange={(e) => setFoodType(e.value)} // update the onFoodTypeChange function to directly set the food type state\n            placeholder=\"Velg type matvare\"\n          />\n        </div>\n\n        <h5>\n          Næringsinnhold per 100{\" \"}\n          {foodType === \"solid\" ? \"g\" : foodType === \"liquid\" ? \"ml\" : \"g/ml\"}\n        </h5>\n\n        {/* This div adds a light background color to the table */}\n        <div className=\"bg-light\">\n          {/* This table shows the nutritional information */}\n          <table className=\"table table-striped\">\n            {/* The table header */}\n            <thead>\n              <tr>\n                <th scope=\"col\" className=\"table-font\">\n                  Energi eller næringsstoff\n                </th>\n                <th scope=\"col\" className=\"table-font\">\n                  Mengde\n                </th>\n              </tr>\n            </thead>\n\n            {/* The table body */}\n            <tbody>\n              {/* This row shows the energy content */}\n              <tr className={(energikj, energikcal ? \"alert-box\" : null)}>\n                <th scope=\"row\" className=\"table-font\">\n                  {/* An icon with a tooltip to indicate missing values in energy parameters */}\n                  {energikj && energikcal ? (\n                    <Tooltip\n                      title=\"Mangler verdi i energi (kJ/Kcal) parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  {/* This div displays the energy label and unit */}\n                  <div className=\"row\">\n                    <div className=\"col-md-3\">\n                      <label for=\"energiunit\" class=\"form-label\">\n                        Energi\n                      </label>\n                    </div>\n                    {/* A dropdown menu for selecting the energy unit */}\n                    <div className=\"col-md-6\">\n                      <Select\n                        placeholder={<div>Velg enhet</div>}\n                        className=\"form-select-md mb-3\"\n                        options={selectUnit}\n                        onChange={(e) => handlerPart(e)}\n                      />\n                    </div>\n                  </div>\n                </th>\n                {/* An input field for entering the energy value */}\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name={selectsPart}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* Additional rows for other nutrient selections */}\n              {/* This row shows the fat content */}\n              <tr\n                className={\n                  fett ? \"alert-box\" : null || fettNull ? \"alert-box\" : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {fett ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden fett. Mengden på fett må være lavere enn eller lik 10/ 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {fettNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i fett parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Fett (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"fett\"\n                    value={nutrition.fett}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the saturated fat content */}\n              <tr\n                className={\n                  mettede\n                    ? \"alert-box\"\n                    : null || mettedeNull\n                    ? \"alert-box\"\n                    : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {mettede ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden mettede fettsyrer. Mengden på mettede fettsyrer må være lavere enn eller lik 3.5 / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {mettedeNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i mettede fettsyrer parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Mettede fettsyrer (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"mettede\"\n                    value={nutrition.mettede}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the carbohydrate (total sugars)content */}\n              <tr className={karbohydrat ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {/* If the \"karbohydrat\" value is missing, display an exclamation icon with a tooltip */}\n                  {karbohydrat ? (\n                    <Tooltip\n                      title=\"Mangler verdi i karbohydrat parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Karbohydrat (g)\n                </th>\n                {/* Input field for \"karbohydrat\" value */}\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"karbohydrat\"\n                    value={nutrition.karbohydrat}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows hvorav tilsatte sukkerarter (added sugars)content */}\n              <tr\n                className={\n                  hvoravSukkerarter\n                    ? \"alert-box\"\n                    : null || hvoravSukkerarterNull\n                    ? \"alert-box\"\n                    : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {/* If the \"hvoravSukkerarter\" value is too high, display a ban icon with a tooltip */}\n                  {hvoravSukkerarter ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden hvoravSukkerarter. Mengden på hvoravSukkerarter må være lavere enn eller lik 3 g/ 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {/* If the \"hvoravSukkerarter\" value is missing, display an exclamation icon with a tooltip */}\n                  {hvoravSukkerarterNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i hvorav sukkerarter parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Hvorav tilsatte sukkerarter (g)\n                </th>\n                {/* Input field for \"hvoravSukkerarter\" value */}\n\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"hvoravSukkerarter\"\n                    value={nutrition.hvoravSukkerarter}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows kostfiber content */}\n              <tr className={kostfiber ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {kostfiber ? (\n                    <Tooltip\n                      title=\"Mangler verdi i kostfiber parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Kostfiber (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"kostfiber\"\n                    value={nutrition.kostfiber}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the protein content */}\n              <tr className={protein ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {protein ? (\n                    <Tooltip\n                      title=\"Mangler verdi i protein parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Protein (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"protein\"\n                    value={nutrition.protein}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows salt content */}\n              <tr\n                className={\n                  salt ? \"alert-box\" : null || saltNull ? \"alert-box\" : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {salt ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden salt. Mengden på salt må være lavere enn eller lik 1 / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {saltNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i salt parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Salt (g)\n                </th>\n                <td colSpan=\"2\">\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"salt\"\n                    value={nutrition.salt}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n\n        {/* Button that submits the form and calls the onClick function */}\n        <div className=\"col-12 button-div\">\n          <button\n            type=\"submit\"\n            className=\"btn btn-primary btn-lg button-search\"\n            onClick={onClick}\n          >\n            Beregn\n          </button>\n        </div>\n      </div>\n\n      <div className=\"col-md-6\">\n        {/* positive results nøkkelhullet container\" */}\n        {showNokkelhulletResults ? (\n          <div className=\"container nøkkelhullet-food-result-container\">\n            {/* An image with class \"keyhole-logo\" and alt text \"keyhole logo\" */}\n            <img\n              src={keyholeLgog}\n              className=\"keyhole-logo img-fluid\"\n              alt=\"keyhole logo\"\n            />\n            {/* A heading with text \"Nøkkelhullet\" */}\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir Nøkkelhullet. </p>\n              </div>\n              <div className=\"col-md-2\">\n                {/* FontAwesome icon with event listener to show the \"Nøkkelhullet\" information section */}\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  {/* A paragraph with a link to Lovdata's \"Forskrift om frivillig merking a nœringsmidler med Nokkellhullet\" */}\n                  <p>\n                    Les mer om hvilke krav det stilles for merking av\n                    Nokkellhullet på Lovdatas \"Forskrift om frivillig merking a\n                    nœringsmidler med Nokkellhullet\":\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  {/* FontAwesome icon with event listener to hide the \"Nøkkelhullet\" information section */}\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        ) : null}\n        {/*Negative results nøkkelhullet container\" */}\n        {showNokkelhulletResults === false && (\n          <div className=\"container nøkkelhullet-food-negResult-container\">\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir ikke Nøkkelhullet.</p>\n                {showEmptyResult ? (\n                  <p>** Obligatoriske næringsverdier kan ikke være tomme.</p>\n                ) : null}\n\n                {mettede ? (\n                  <p>\n                    ** Mettede fettsyrer verdien kan være høyst 3.5 g/100 g.\n                  </p>\n                ) : null}\n\n                {fett ? (\n                  <p>** Fett verdien kan være høyst 10 g/100 g.</p>\n                ) : null}\n\n                {hvoravSukkerarter ? (\n                  <p>\n                    ** Tilsatte sukkerarter verdien kan være høyst 3 g/100 g.\n                  </p>\n                ) : null}\n\n                {salt ? <p>** Salt verdien kan være høyst 1 g/100 g.</p> : null}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om frivillig merking av næringsmidler med Nøkkelhullet:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for ernæringspåstander if there are all true results */}\n        {buttonClicked && (\n          <div\n            className={\n              lowSugars && withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-all\"\n                : !lowSugars && !withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-none\"\n                : \"container ernæringspåstander-food-result-container-some\"\n            }\n          >\n            <h5>Ernæringspåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                {/* Low sugars */}\n                {lowSugars ? (\n                  <div>\n                    <p>** Lavt sukkerinnhold:</p>\n                    <p>\n                      Dette produktet inneholder høyst 5 g sukkerarter per 100 g\n                      for næringsmidler i fast form, eller høyst 2,5 g\n                      sukkerarter per 100 ml for næringsmidler i flytende form\n                      og oppfyller kravet for \"Lavt sukkerinnhold\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Lavt sukkerinnhold\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        For faste næringsmidler, sukkerinnholdet må være høyst 5\n                        g per 100 g.\n                      </li>\n                      <li>\n                        For flytende næringsmidler, sukkerinnholdet må være\n                        høyst 2,5 g per 100 ml.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n\n                {/* No added sugars */}\n                {withNoAddedSugars ? (\n                  <div>\n                    <p>** Uten tilsatt sukker:</p>\n                    <p>\n                      Dette produktet er ikke tilsatt monosakkarider,\n                      disakkarider eller andre næringsmidler på grunn av deres\n                      søtende egenskaper og oppfyller kravet for \"Uten tilsatt\n                      sukker\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Uten tilsatt sukker\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        Produktet må ikke være tilsatt monosakkarider,\n                        disakkarider eller andre næringsmidler på grunn av deres\n                        søtende egenskaper.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"ernaerings\")}\n                />\n              </div>\n            </div>\n            {infoErnaerings ? (\n              // Information section for \"Ernæringspåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"ernaerings\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for Helsepåstander results  */}\n        {showHelsepåstander && (\n          <div\n            className=\"container helsepåstander-food-result-container\"\n            style={{ background: \"#f2f0b5\" }}\n          >\n            <h5>Helsepåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Under utvikling. </p>\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"helsepåstander\")}\n                />\n              </div>\n            </div>\n            {infoHelsepåstander ? (\n              // Information section for \"Helsepåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"helsepåstander\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"15px\" }}></div>\n        {/* conditional rendering for the buttons using showButtons state */}\n        {showButtons && (\n          <div className=\"d-flex justify-content-between\">\n            {/* Save button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-save\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Lagre produkt\n            </button>\n\n            {/* Share button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-share\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Del produkt\n            </button>\n\n            {/* Add a new product button */}\n            <button\n              className=\"btn btn-primary\"\n              onClick={() => window.location.reload()}\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-plus\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Legg til et nytt produkt\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Kategori25b;\n","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Kategori27.js",["503","504","505","506"],[],"import React from \"react\";\nimport { useState, useEffect } from \"react\"; // import the useState and useeffect hook.\nimport { faCircleExclamation } from \"@fortawesome/free-solid-svg-icons\"; // import an icon.\nimport { faBan } from \"@fortawesome/free-solid-svg-icons\";\nimport { faSave, faShare, faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"; // import FontAwesomeIcon component.\nimport Tooltip from \"@mui/material/Tooltip\"; // import Tooltip component.\nimport keyholeLgog from \"./circle-keyhole-logo.png\"; // import an image\nimport { faCircleInfo } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport { faXmarkCircle } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport Select from \"react-select\"; // import Select component\n\nconst Kategori27 = () => {\n  // State variables for showing results and empty result message\n  const [showNokkelhulletResults, setShowNokkelhulletResults] = useState(null);\n  const [showErnaeringsResults, setShowErnaeringsResults] = useState(null);\n  const [showHelsepåstander, setShowHelsepåstander] = useState(null);\n  const [showEmptyResult, setShowEmptyResult] = useState(\"\"); // initialize state variable for showing empty result message.\n\n  //state variable to store the user's food type selection (solid or liquid) and the low sugars claim result\n  const [foodType, setFoodType] = useState(\"\");\n  const [lowSugars, setLowSugars] = useState(null);\n\n  //state variable to track whether the product meets the WITH NO ADDED SUGARS claim or not\n  const [withNoAddedSugars, setWithNoAddedSugars] = useState(false);\n\n  // State variable for tracking if the button is clicked\n  const [buttonClicked, setButtonClicked] = useState(false);\n\n  // useEffect hook for checking the condition for the \"WITH NO ADDED SUGARS\" claim when button is clicked\n  useEffect(() => {\n    if (buttonClicked) {\n      if (withNoAddedSugars) {\n        setShowErnaeringsResults(true);\n      } else {\n        setShowErnaeringsResults(false);\n      }\n    }\n  }, [withNoAddedSugars, buttonClicked]);\n\n  //state for controlling the buttons' visibility\n  const [showButtons, setShowButtons] = useState(false);\n\n  // State variables to control the visibility of the information sections\n  const [infoNokkelhullet, setInfoNokkelhullet] = useState(false);\n  const [infoErnaerings, setInfoErnaerings] = useState(false);\n  const [infoHelsepåstander, setInfoHelsepåstander] = useState(false);\n\n  // Function to show an information section based on the container parameter\n  const onClickInfo = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(true);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(true);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(true);\n    }\n  };\n\n  // Function to hide an information section based on the container parameter\n  const onClickClose = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(false);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(false);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(false);\n    }\n  };\n\n  // State variables for handling input fields and validation errors\n  const [energikj, setEnergikj] = useState(false);\n  const [energikcal, setEnergikcal] = useState(false);\n\n  const [fett, setFett] = useState(false);\n  const [mettede, setMettede] = useState(false);\n  const [mettedeNull, setMettedeNull] = useState(false);\n  const [karbohydrat, setKarbohydrat] = useState(false);\n  const [hvoravSukkerarter, setHvoravSukkerarter] = useState(false);\n  const [hvoravSukkerarterNull, setHvoravSukkerarterNull] = useState(false);\n  const [kostfiber, setKostfiber] = useState(false);\n  const [protein, setProtein] = useState(false);\n  const [salt, setSalt] = useState(false);\n  const [saltNull, setSaltNull] = useState(false);\n  // State variable for storing nutrition information entered by user\n  const [nutrition, setNutrition] = useState({\n    energikj: \"\",\n    energikcal: \"\",\n    fett: \"\",\n    mettede: \"\",\n    karbohydrat: \"\",\n    hvoravSukkerarter: \"\",\n    kostfiber: \"\",\n    protein: \"\",\n    salt: \"\",\n  });\n\n  // Handler for updating nutrition state/state variable based on input field changes/input values\n  const changeHandle = (event) => {\n    console.log(\"changeHandle ===\", event.target, event.target.value);\n    setNutrition({\n      ...nutrition,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  // define function to handle form submission\n  const onClick = (e) => {\n    e.preventDefault();\n    setButtonClicked(true);\n    setShowHelsepåstander(true);\n    setShowButtons(true);\n\n    console.log(\"onclick ===\", selectsPart, nutrition);\n\n    // Check if all required fields are filled out and within valid ranges\n    // The if statement checks if all required inputs are non-empty and meet the nutritional requirements\n    if (\n      nutrition.fett !== \"\" &&\n      nutrition.mettede !== \"\" &&\n      nutrition.mettede <= 1.5 &&\n      nutrition.karbohydrat !== \"\" &&\n      nutrition.hvoravSukkerarter !== \"\" &&\n      nutrition.hvoravSukkerarter <= 3 &&\n      nutrition.kostfiber !== \"\" &&\n      nutrition.protein !== \"\" &&\n      nutrition.salt !== \"\" &&\n      nutrition.salt <= 0.8\n    ) {\n      // If all requirements are met, display the nutrition results\n      setShowNokkelhulletResults(true);\n      // Hide any empty result messages or error messages\n      setShowEmptyResult(false);\n\n      // Check if the user selected \"energikj\" and if nutrition input lable of \"energikj\" is not empty\n      if (selectsPart === \"energikj\" && nutrition.energikj !== \"\") {\n        setEnergikj(false);\n      }\n\n      // Check if the user selected \"energikcal\" and if nutrition input lable of \"energikcal\" is not empty\n      if (selectsPart === \"energikcal\" && nutrition.energikcal !== \"\") {\n        setEnergikcal(false);\n      }\n      // Reset all input validation errors\n      setFett(false);\n      setMettede(false);\n      setMettedeNull(false);\n      setKarbohydrat(false);\n      setHvoravSukkerarter(false);\n      setHvoravSukkerarterNull(false);\n      setKostfiber(false);\n      setProtein(false);\n      setSalt(false);\n      setSaltNull(false);\n      // If the user has not selected any nutrients, set errors accordingly\n      // Check each nutrition value to see if it is missing or negative\n      // show input validation errors if any input is missing or negative.\n    } else {\n      if (selectsPart === \"energikj\") {\n        console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n        if (nutrition.energikj === \"\" || nutrition.energikj < 0) {\n          console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n          setEnergikj(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikj(false);\n        }\n      }\n\n      if (selectsPart === \"energikcal\") {\n        console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n        if (nutrition.energikcal === \"\" || nutrition.energikcal < 0) {\n          console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n          setEnergikcal(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikcal(false);\n        }\n      }\n\n      // repeat for each nutrition value...\n      if (nutrition.fett === \"\" || nutrition.fett < 0) {\n        setFett(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setFett(false);\n      }\n\n      if (nutrition.mettede === \"\" || nutrition.mettede < 0) {\n        setMettedeNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setMettedeNull(false);\n      }\n      if (nutrition.mettede > 1.5) {\n        setMettede(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setMettede(false);\n      }\n\n      // Check if the 'karbohydrat' input is missing or negative, and display an error message if necessary\n      if (nutrition.karbohydrat === \"\" || nutrition.karbohydrat < 0) {\n        setKarbohydrat(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKarbohydrat(false);\n      }\n\n      // Check if the 'hvoravSukkerarter' input is missing, negative or above the maximum allowed value (1),\n      // and display an error message if necessary\n      if (\n        nutrition.hvoravSukkerarter === \"\" ||\n        nutrition.hvoravSukkerarter < 0\n      ) {\n        setHvoravSukkerarterNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setHvoravSukkerarterNull(false);\n      }\n      if (nutrition.hvoravSukkerarter > 3) {\n        setHvoravSukkerarter(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setHvoravSukkerarter(false);\n      }\n\n      if (nutrition.kostfiber === \"\" || nutrition.kostfiber < 0) {\n        setKostfiber(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKostfiber(false);\n      }\n\n      if (nutrition.protein === \"\" || nutrition.protein < 0) {\n        setProtein(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setProtein(false);\n      }\n\n      if (nutrition.salt === \"\" || nutrition.salt < 0) {\n        setSaltNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setSaltNull(false);\n      }\n      if (nutrition.salt > 0.8) {\n        setSalt(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setSalt(false);\n      }\n    }\n\n    // Check for the \"LOW SUGARS\" claim\n    if (foodType === \"solid\" && parseFloat(nutrition.karbohydrat) <= 5) {\n      setLowSugars(true);\n    } else if (\n      foodType === \"liquid\" &&\n      parseFloat(nutrition.karbohydrat) <= 2.5\n    ) {\n      setLowSugars(true);\n    } else {\n      setLowSugars(false);\n    }\n\n    // Check the condition for the \"WITH NO ADDED SUGARS\" nutrition claim\n    if (nutrition.hvoravSukkerarter === \"0\" && nutrition.karbohydrat > 0) {\n      setWithNoAddedSugars(true);\n    } else {\n      setWithNoAddedSugars(false);\n    }\n  };\n\n  // create an array of energy units to select from\n  const selectUnit = [\n    {\n      value: \"energikj\",\n      label: \"(kj)\",\n    },\n    {\n      value: \"energikcal\",\n      label: \"(kcal)\",\n    },\n  ];\n\n  // Declare a state variable for the select dropdown.\n  const [selectsPart, setSelectPart] = useState(\"\");\n\n  // A function to handle changes to the select dropdown energy unit\n  const handlerPart = (event) => {\n    const inputVal = document.getElementsByName(event.value);\n    console.log(\"handlerPart ===\", event, nutrition, inputVal);\n    setSelectPart(event.value);\n  };\n\n  //create an array of food types to select from\n  const foodTypes = [\n    {\n      value: \"solid\",\n      label: \"Fast form\",\n    },\n    {\n      value: \"liquid\",\n      label: \"Flytende form\",\n    },\n  ];\n\n  return (\n    <div className=\"row\">\n      {/* This div creates a column layout for the left side of the table */}\n      <div className=\"col-md-6\">\n        {/* the selector (dropdown menu) for choosing the food type. */}\n        <div className=\"form-group\">\n          <label htmlFor=\"foodType\">Velg type matvare:</label>\n          <Select\n            className=\"form-control\"\n            id=\"foodType\"\n            options={foodTypes}\n            onChange={(e) => setFoodType(e.value)} // update the onFoodTypeChange function to directly set the food type state\n            placeholder=\"Velg type matvare\"\n          />\n        </div>\n\n        <h5>\n          Næringsinnhold per 100{\" \"}\n          {foodType === \"solid\" ? \"g\" : foodType === \"liquid\" ? \"ml\" : \"g/ml\"}\n        </h5>\n\n        {/* This div adds a light background color to the table */}\n        <div className=\"bg-light\">\n          {/* This table shows the nutritional information */}\n          <table className=\"table table-striped\">\n            {/* The table header */}\n            <thead>\n              <tr>\n                <th scope=\"col\" className=\"table-font\">\n                  Energi eller næringsstoff\n                </th>\n                <th scope=\"col\" className=\"table-font\">\n                  Mengde\n                </th>\n              </tr>\n            </thead>\n\n            {/* The table body */}\n            <tbody>\n              {/* This row shows the energy content */}\n              <tr className={(energikj, energikcal ? \"alert-box\" : null)}>\n                <th scope=\"row\" className=\"table-font\">\n                  {/* An icon with a tooltip to indicate missing values in energy parameters */}\n                  {energikj && energikcal ? (\n                    <Tooltip\n                      title=\"Mangler verdi i energi (kJ/Kcal) parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  {/* This div displays the energy label and unit */}\n                  <div className=\"row\">\n                    <div className=\"col-md-3\">\n                      <label for=\"energiunit\" class=\"form-label\">\n                        Energi\n                      </label>\n                    </div>\n                    {/* A dropdown menu for selecting the energy unit */}\n                    <div className=\"col-md-6\">\n                      <Select\n                        placeholder={<div>Velg enhet</div>}\n                        className=\"form-select-md mb-3\"\n                        options={selectUnit}\n                        onChange={(e) => handlerPart(e)}\n                      />\n                    </div>\n                  </div>\n                </th>\n                {/* An input field for entering the energy value */}\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name={selectsPart}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* Additional rows for other nutrient selections */}\n              {/* This row shows the fat content */}\n              <tr className={fett ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {fett ? (\n                    <Tooltip\n                      title=\"Mangler verdi i fett parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Fett (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"fett\"\n                    value={nutrition.fett}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the saturated fat content */}\n              <tr\n                className={\n                  mettede\n                    ? \"alert-box\"\n                    : null || mettedeNull\n                    ? \"alert-box\"\n                    : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {mettede ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden mettede fettsyrer. Mengden på mettede fettsyrer må være  høyst enn eller lik 1.5 / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {mettedeNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i mettede fettsyrer parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Mettede fettsyrer (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"mettede\"\n                    value={nutrition.mettede}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the carbohydrate (total sugars)content */}\n              <tr className={karbohydrat ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {/* If the \"karbohydrat\" value is missing, display an exclamation icon with a tooltip */}\n                  {karbohydrat ? (\n                    <Tooltip\n                      title=\"Mangler verdi i karbohydrat parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Karbohydrat (g)\n                </th>\n                {/* Input field for \"karbohydrat\" value */}\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"karbohydrat\"\n                    value={nutrition.karbohydrat}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows hvorav tilsatte sukkerarter (added sugars)content */}\n              <tr\n                className={\n                  hvoravSukkerarter\n                    ? \"alert-box\"\n                    : null || hvoravSukkerarterNull\n                    ? \"alert-box\"\n                    : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {/* If the \"hvoravSukkerarter\" value is too high, display a ban icon with a tooltip */}\n                  {hvoravSukkerarter ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden hvoravSukkerarter. Mengden på hvoravSukkerarter må være lavere enn eller lik 3 g/ 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {/* If the \"hvoravSukkerarter\" value is missing, display an exclamation icon with a tooltip */}\n                  {hvoravSukkerarterNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i hvorav sukkerarter parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Hvorav tilsatte sukkerarter (g)\n                </th>\n                {/* Input field for \"hvoravSukkerarter\" value */}\n\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"hvoravSukkerarter\"\n                    value={nutrition.hvoravSukkerarter}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows kostfiber content */}\n              <tr className={kostfiber ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {kostfiber ? (\n                    <Tooltip\n                      title=\"Mangler verdi i kostfiber parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Kostfiber (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"kostfiber\"\n                    value={nutrition.kostfiber}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the protein content */}\n              <tr className={protein ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {protein ? (\n                    <Tooltip\n                      title=\"Mangler verdi i protein parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Protein (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"protein\"\n                    value={nutrition.protein}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows salt content */}\n              <tr\n                className={\n                  salt ? \"alert-box\" : null || saltNull ? \"alert-box\" : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {salt ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden salt. Mengden på salt må være lavere enn eller lik 0.8 g/ 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {saltNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i salt parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Salt (g)\n                </th>\n                <td colSpan=\"2\">\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"salt\"\n                    value={nutrition.salt}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n\n        {/* Button that submits the form and calls the onClick function */}\n        <div className=\"col-12 button-div\">\n          <button\n            type=\"submit\"\n            className=\"btn btn-primary btn-lg button-search\"\n            onClick={onClick}\n          >\n            Beregn\n          </button>\n        </div>\n      </div>\n\n      <div className=\"col-md-6\">\n        {/* positive results nøkkelhullet container\" */}\n        {showNokkelhulletResults ? (\n          <div className=\"container nøkkelhullet-food-result-container\">\n            {/* An image with class \"keyhole-logo\" and alt text \"keyhole logo\" */}\n            <img\n              src={keyholeLgog}\n              className=\"keyhole-logo img-fluid\"\n              alt=\"keyhole logo\"\n            />\n            {/* A heading with text \"Nøkkelhullet\" */}\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir Nøkkelhullet. </p>\n              </div>\n              <div className=\"col-md-2\">\n                {/* FontAwesome icon with event listener to show the \"Nøkkelhullet\" information section */}\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  {/* A paragraph with a link to Lovdata's \"Forskrift om frivillig merking a nœringsmidler med Nokkellhullet\" */}\n                  <p>\n                    Les mer om hvilke krav det stilles for merking av\n                    Nokkellhullet på Lovdatas \"Forskrift om frivillig merking a\n                    nœringsmidler med Nokkellhullet\":\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  {/* FontAwesome icon with event listener to hide the \"Nøkkelhullet\" information section */}\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        ) : null}\n        {/*Negative results nøkkelhullet container\" */}\n        {showNokkelhulletResults === false && (\n          <div className=\"container nøkkelhullet-food-negResult-container\">\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir ikke Nøkkelhullet.</p>\n                {showEmptyResult ? (\n                  <p>** Obligatoriske næringsverdier kan ikke være tomme.</p>\n                ) : null}\n\n                {mettede ? (\n                  <p>** Mettede fettsyrer verdien kan være høyst 1,5 g/100 g</p>\n                ) : null}\n\n                {hvoravSukkerarter ? (\n                  <p>\n                    ** Tilsatte sukkerarter verdien kan være høyst 3 g/100 g.\n                  </p>\n                ) : null}\n\n                {salt ? (\n                  <p>** Salt verdien kan være høyst 0.8 g/100 g.</p>\n                ) : null}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om frivillig merking av næringsmidler med Nøkkelhullet:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for ernæringspåstander if there are all true results */}\n        {buttonClicked && (\n          <div\n            className={\n              lowSugars && withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-all\"\n                : !lowSugars && !withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-none\"\n                : \"container ernæringspåstander-food-result-container-some\"\n            }\n          >\n            <h5>Ernæringspåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                {/* Low sugars */}\n                {lowSugars ? (\n                  <div>\n                    <p>** Lavt sukkerinnhold:</p>\n                    <p>\n                      Dette produktet inneholder høyst 5 g sukkerarter per 100 g\n                      for næringsmidler i fast form, eller høyst 2,5 g\n                      sukkerarter per 100 ml for næringsmidler i flytende form\n                      og oppfyller kravet for \"Lavt sukkerinnhold\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Lavt sukkerinnhold\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        For faste næringsmidler, sukkerinnholdet må være høyst 5\n                        g per 100 g.\n                      </li>\n                      <li>\n                        For flytende næringsmidler, sukkerinnholdet må være\n                        høyst 2,5 g per 100 ml.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n\n                {/* No added sugars */}\n                {withNoAddedSugars ? (\n                  <div>\n                    <p>** Uten tilsatt sukker:</p>\n                    <p>\n                      Dette produktet er ikke tilsatt monosakkarider,\n                      disakkarider eller andre næringsmidler på grunn av deres\n                      søtende egenskaper og oppfyller kravet for \"Uten tilsatt\n                      sukker\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Uten tilsatt sukker\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        Produktet må ikke være tilsatt monosakkarider,\n                        disakkarider eller andre næringsmidler på grunn av deres\n                        søtende egenskaper.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"ernaerings\")}\n                />\n              </div>\n            </div>\n            {infoErnaerings ? (\n              // Information section for \"Ernæringspåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"ernaerings\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for Helsepåstander results  */}\n        {showHelsepåstander && (\n          <div\n            className=\"container helsepåstander-food-result-container\"\n            style={{ background: \"#f2f0b5\" }}\n          >\n            <h5>Helsepåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Under utvikling. </p>\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"helsepåstander\")}\n                />\n              </div>\n            </div>\n            {infoHelsepåstander ? (\n              // Information section for \"Helsepåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"helsepåstander\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"15px\" }}></div>\n        {/* conditional rendering for the buttons using showButtons state */}\n        {showButtons && (\n          <div className=\"d-flex justify-content-between\">\n            {/* Save button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-save\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Lagre produkt\n            </button>\n\n            {/* Share button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-share\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Del produkt\n            </button>\n\n            {/* Add a new product button */}\n            <button\n              className=\"btn btn-primary\"\n              onClick={() => window.location.reload()}\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-plus\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Legg til et nytt produkt\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Kategori27;\n","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Kategori25a.js",["507","508","509","510"],[],"import React from \"react\";\nimport { useState, useEffect } from \"react\"; // import the useState and useeffect hook.\nimport { faCircleExclamation } from \"@fortawesome/free-solid-svg-icons\"; // import an icon.\nimport { faBan } from \"@fortawesome/free-solid-svg-icons\";\nimport { faSave, faShare, faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"; // import FontAwesomeIcon component.\nimport Tooltip from \"@mui/material/Tooltip\"; // import Tooltip component.\nimport keyholeLgog from \"./circle-keyhole-logo.png\"; // import an image\nimport { faCircleInfo } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport { faXmarkCircle } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport Select from \"react-select\"; // import Select component\n\nconst Kategori25a = () => {\n  // State variables for showing results and empty result message\n  const [showNokkelhulletResults, setShowNokkelhulletResults] = useState(null);\n  const [showErnaeringsResults, setShowErnaeringsResults] = useState(null);\n  const [showHelsepåstander, setShowHelsepåstander] = useState(null);\n  const [showEmptyResult, setShowEmptyResult] = useState(\"\"); // initialize state variable for showing empty result message.\n\n  //state variable to store the user's food type selection (solid or liquid) and the low sugars claim result\n  const [foodType, setFoodType] = useState(\"\");\n  const [lowSugars, setLowSugars] = useState(null);\n\n  //state variable to track whether the product meets the WITH NO ADDED SUGARS claim or not\n  const [withNoAddedSugars, setWithNoAddedSugars] = useState(false);\n\n  // State variable for tracking if the button is clicked\n  const [buttonClicked, setButtonClicked] = useState(false);\n\n  // useEffect hook for checking the condition for the \"WITH NO ADDED SUGARS\" claim when button is clicked\n  useEffect(() => {\n    if (buttonClicked) {\n      if (withNoAddedSugars) {\n        setShowErnaeringsResults(true);\n      } else {\n        setShowErnaeringsResults(false);\n      }\n    }\n  }, [withNoAddedSugars, buttonClicked]);\n\n  //state for controlling the buttons' visibility\n  const [showButtons, setShowButtons] = useState(false);\n\n  // State variables to control the visibility of the information sections\n  const [infoNokkelhullet, setInfoNokkelhullet] = useState(false);\n  const [infoErnaerings, setInfoErnaerings] = useState(false);\n  const [infoHelsepåstander, setInfoHelsepåstander] = useState(false);\n\n  // Function to show an information section based on the container parameter\n  const onClickInfo = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(true);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(true);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(true);\n    }\n  };\n\n  // Function to hide an information section based on the container parameter\n  const onClickClose = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(false);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(false);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(false);\n    }\n  };\n\n  // State variables for handling input fields and validation errors\n  const [energikj, setEnergikj] = useState(false);\n  const [energikcal, setEnergikcal] = useState(false);\n\n  const [fett, setFett] = useState(false);\n  const [fettNull, setFettNull] = useState(false);\n  const [mettede, setMettede] = useState(false);\n  const [mettedeNull, setMettedeNull] = useState(false);\n  const [karbohydrat, setKarbohydrat] = useState(false);\n  const [hvoravSukkerarter, setHvoravSukkerarter] = useState(false);\n  const [hvoravSukkerarterNull, setHvoravSukkerarterNull] = useState(false);\n  const [kostfiber, setKostfiber] = useState(false);\n  const [protein, setProtein] = useState(false);\n  const [salt, setSalt] = useState(false);\n  const [saltNull, setSaltNull] = useState(false);\n  // State variable for storing nutrition information entered by user\n  const [nutrition, setNutrition] = useState({\n    energikj: \"\",\n    energikcal: \"\",\n    fett: \"\",\n    mettede: \"\",\n    karbohydrat: \"\",\n    hvoravSukkerarter: \"\",\n    kostfiber: \"\",\n    protein: \"\",\n    salt: \"\",\n  });\n  // Handler for updating nutrition state/state variable based on input field changes/input values\n  const changeHandle = (event) => {\n    console.log(\"changeHandle ===\", event.target, event.target.value);\n    setNutrition({\n      ...nutrition,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  // define function to handle form submission\n  const onClick = (e) => {\n    e.preventDefault();\n    setButtonClicked(true);\n    setShowHelsepåstander(true);\n    setShowButtons(true);\n\n    console.log(\"onclick ===\", selectsPart, nutrition);\n\n    // Check if all required fields are filled out and within valid ranges\n    // The if statement checks if all required inputs are non-empty and meet the nutritional requirements\n    if (\n      nutrition.fett !== \"\" &&\n      nutrition.fett <= 10 &&\n      nutrition.mettede !== \"\" &&\n      nutrition.mettede <= 3.5 &&\n      nutrition.karbohydrat !== \"\" &&\n      nutrition.hvoravSukkerarter !== \"\" &&\n      nutrition.hvoravSukkerarter <= 3 &&\n      nutrition.kostfiber !== \"\" &&\n      nutrition.protein !== \"\" &&\n      nutrition.salt !== \"\" &&\n      nutrition.salt <= 1.5\n    ) {\n      // If all requirements are met, display the nutrition results\n      setShowNokkelhulletResults(true);\n      // Hide any empty result messages or error messages\n      setShowEmptyResult(false);\n\n      // Check if the user selected \"energikj\" and if nutrition input lable of \"energikj\" is not empty\n      if (selectsPart === \"energikj\" && nutrition.energikj !== \"\") {\n        setEnergikj(false);\n      }\n\n      // Check if the user selected \"energikcal\" and if nutrition input lable of \"energikcal\" is not empty\n      if (selectsPart === \"energikcal\" && nutrition.energikcal !== \"\") {\n        setEnergikcal(false);\n      }\n      // Reset all input validation errors\n      setFett(false);\n      setFettNull(false);\n      setMettede(false);\n      setMettedeNull(false);\n      setKarbohydrat(false);\n      setHvoravSukkerarter(false);\n      setHvoravSukkerarterNull(false);\n      setKostfiber(false);\n      setProtein(false);\n      setSalt(false);\n      setSaltNull(false);\n      // If the user has not selected any nutrients, set errors accordingly\n      // Check each nutrition value to see if it is missing or negative\n      // show input validation errors if any input is missing or negative.\n    } else {\n      if (selectsPart === \"energikj\") {\n        console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n        if (nutrition.energikj === \"\" || nutrition.energikj < 0) {\n          console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n          setEnergikj(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikj(false);\n        }\n      }\n\n      if (selectsPart === \"energikcal\") {\n        console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n        if (nutrition.energikcal === \"\" || nutrition.energikcal < 0) {\n          console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n          setEnergikcal(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikcal(false);\n        }\n      }\n\n      // repeat for each nutrition value...\n      if (nutrition.fett === \"\" || nutrition.fett < 0) {\n        setFettNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setFettNull(false);\n      }\n      if (nutrition.fett > 10) {\n        setFett(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setFett(false);\n      }\n\n      if (nutrition.mettede === \"\" || nutrition.mettede < 0) {\n        setMettedeNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setMettedeNull(false);\n      }\n      if (nutrition.mettede > 3.5) {\n        setMettede(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setMettede(false);\n      }\n\n      // Check if the 'karbohydrat' input is missing or negative, and display an error message if necessary\n      if (nutrition.karbohydrat === \"\" || nutrition.karbohydrat < 0) {\n        setKarbohydrat(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKarbohydrat(false);\n      }\n\n      // Check if the 'hvoravSukkerarter' input is missing, negative or above the maximum allowed value (1),\n      // and display an error message if necessary\n      if (\n        nutrition.hvoravSukkerarter === \"\" ||\n        nutrition.hvoravSukkerarter < 0\n      ) {\n        setHvoravSukkerarterNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setHvoravSukkerarterNull(false);\n      }\n      if (nutrition.hvoravSukkerarter > 3) {\n        setHvoravSukkerarter(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setHvoravSukkerarter(false);\n      }\n      if (nutrition.kostfiber === \"\" || nutrition.kostfiber < 0) {\n        setKostfiber(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKostfiber(false);\n      }\n\n      if (nutrition.protein === \"\" || nutrition.protein < 0) {\n        setProtein(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setProtein(false);\n      }\n\n      if (nutrition.salt === \"\" || nutrition.salt < 0) {\n        setSaltNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setSaltNull(false);\n      }\n      if (nutrition.salt > 1.5) {\n        setSalt(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setSalt(false);\n      }\n    }\n    // Check for the \"LOW SUGARS\" claim\n    if (foodType === \"solid\" && parseFloat(nutrition.karbohydrat) <= 5) {\n      setLowSugars(true);\n    } else if (\n      foodType === \"liquid\" &&\n      parseFloat(nutrition.karbohydrat) <= 2.5\n    ) {\n      setLowSugars(true);\n    } else {\n      setLowSugars(false);\n    }\n\n    // Check the condition for the \"WITH NO ADDED SUGARS\" nutrition claim\n    if (nutrition.hvoravSukkerarter === \"0\" && nutrition.karbohydrat > 0) {\n      setWithNoAddedSugars(true);\n    } else {\n      setWithNoAddedSugars(false);\n    }\n  };\n\n  // create an array of energy units to select from\n  const selectUnit = [\n    {\n      value: \"energikj\",\n      label: \"(kj)\",\n    },\n    {\n      value: \"energikcal\",\n      label: \"(kcal)\",\n    },\n  ];\n\n  // Declare a state variable for the select dropdown.\n  const [selectsPart, setSelectPart] = useState(\"\");\n\n  // A function to handle changes to the select dropdown energy unit\n  const handlerPart = (event) => {\n    const inputVal = document.getElementsByName(event.value);\n    console.log(\"handlerPart ===\", event, nutrition, inputVal);\n    setSelectPart(event.value);\n  };\n\n  //create an array of food types to select from\n  const foodTypes = [\n    {\n      value: \"solid\",\n      label: \"Fast form\",\n    },\n    {\n      value: \"liquid\",\n      label: \"Flytende form\",\n    },\n  ];\n\n  return (\n    <div className=\"row\">\n      {/* This div creates a column layout for the left side of the table */}\n      <div className=\"col-md-6\">\n        {/* the selector (dropdown menu) for choosing the food type. */}\n        <div className=\"form-group\">\n          <label htmlFor=\"foodType\">Velg type matvare:</label>\n          <Select\n            className=\"form-control\"\n            id=\"foodType\"\n            options={foodTypes}\n            onChange={(e) => setFoodType(e.value)} // update the onFoodTypeChange function to directly set the food type state\n            placeholder=\"Velg type matvare\"\n          />\n        </div>\n\n        <h5>\n          Næringsinnhold per 100{\" \"}\n          {foodType === \"solid\" ? \"g\" : foodType === \"liquid\" ? \"ml\" : \"g/ml\"}\n        </h5>\n\n        {/* This div adds a light background color to the table */}\n        <div className=\"bg-light\">\n          {/* This table shows the nutritional information */}\n          <table className=\"table table-striped\">\n            {/* The table header */}\n            <thead>\n              <tr>\n                <th scope=\"col\" className=\"table-font\">\n                  Energi eller næringsstoff\n                </th>\n                <th scope=\"col\" className=\"table-font\">\n                  Mengde\n                </th>\n              </tr>\n            </thead>\n\n            {/* The table body */}\n            <tbody>\n              {/* This row shows the energy content */}\n              <tr className={(energikj, energikcal ? \"alert-box\" : null)}>\n                <th scope=\"row\" className=\"table-font\">\n                  {/* An icon with a tooltip to indicate missing values in energy parameters */}\n                  {energikj && energikcal ? (\n                    <Tooltip\n                      title=\"Mangler verdi i energi (kJ/Kcal) parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  {/* This div displays the energy label and unit */}\n                  <div className=\"row\">\n                    <div className=\"col-md-3\">\n                      <label for=\"energiunit\" class=\"form-label\">\n                        Energi\n                      </label>\n                    </div>\n                    {/* A dropdown menu for selecting the energy unit */}\n                    <div className=\"col-md-6\">\n                      <Select\n                        placeholder={<div>Velg enhet</div>}\n                        className=\"form-select-md mb-3\"\n                        options={selectUnit}\n                        onChange={(e) => handlerPart(e)}\n                      />\n                    </div>\n                  </div>\n                </th>\n                {/* An input field for entering the energy value */}\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name={selectsPart}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* Additional rows for other nutrient selections */}\n              {/* This row shows the fat content */}\n              <tr\n                className={\n                  fett ? \"alert-box\" : null || fettNull ? \"alert-box\" : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {fett ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden fett. Mengden på fett må være lavere enn eller lik 10/ 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {fettNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i fett parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Fett (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"fett\"\n                    value={nutrition.fett}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the saturated fat content */}\n              <tr\n                className={\n                  mettede\n                    ? \"alert-box\"\n                    : null || mettedeNull\n                    ? \"alert-box\"\n                    : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {mettede ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden mettede fettsyrer. Mengden på mettede fettsyrer må være lavere enn eller lik 3.5 / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {mettedeNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i mettede fettsyrer parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Mettede fettsyrer (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"mettede\"\n                    value={nutrition.mettede}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the carbohydrate (total sugars)content */}\n              <tr className={karbohydrat ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {/* If the \"karbohydrat\" value is missing, display an exclamation icon with a tooltip */}\n                  {karbohydrat ? (\n                    <Tooltip\n                      title=\"Mangler verdi i karbohydrat parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Karbohydrat (g)\n                </th>\n                {/* Input field for \"karbohydrat\" value */}\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"karbohydrat\"\n                    value={nutrition.karbohydrat}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows hvorav tilsatte sukkerarter (added sugars)content */}\n              <tr\n                className={\n                  hvoravSukkerarter\n                    ? \"alert-box\"\n                    : null || hvoravSukkerarterNull\n                    ? \"alert-box\"\n                    : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {/* If the \"hvoravSukkerarter\" value is too high, display a ban icon with a tooltip */}\n                  {hvoravSukkerarter ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden hvoravSukkerarter. Mengden på hvoravSukkerarter må være lavere enn eller lik 3 g/ 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {/* If the \"hvoravSukkerarter\" value is missing, display an exclamation icon with a tooltip */}\n                  {hvoravSukkerarterNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i hvorav sukkerarter parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Hvorav tilsatte sukkerarter (g)\n                </th>\n                {/* Input field for \"hvoravSukkerarter\" value */}\n\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"hvoravSukkerarter\"\n                    value={nutrition.hvoravSukkerarter}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows kostfiber content */}\n              <tr className={kostfiber ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {kostfiber ? (\n                    <Tooltip\n                      title=\"Mangler verdi i kostfiber parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Kostfiber (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"kostfiber\"\n                    value={nutrition.kostfiber}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the protein content */}\n              <tr className={protein ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {protein ? (\n                    <Tooltip\n                      title=\"Mangler verdi i protein parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Protein (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"protein\"\n                    value={nutrition.protein}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows salt content */}\n              <tr\n                className={\n                  salt ? \"alert-box\" : null || saltNull ? \"alert-box\" : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {salt ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden salt. Mengden på salt må være lavere enn eller lik 1.5 / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {saltNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i salt parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Salt (g)\n                </th>\n                <td colSpan=\"2\">\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"salt\"\n                    value={nutrition.salt}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n\n        {/* Button that submits the form and calls the onClick function */}\n        <div className=\"col-12 button-div\">\n          <button\n            type=\"submit\"\n            className=\"btn btn-primary btn-lg button-search\"\n            onClick={onClick}\n          >\n            Beregn\n          </button>\n        </div>\n      </div>\n\n      <div className=\"col-md-6\">\n        {/* positive results nøkkelhullet container\" */}\n        {showNokkelhulletResults ? (\n          <div className=\"container nøkkelhullet-food-result-container\">\n            {/* An image with class \"keyhole-logo\" and alt text \"keyhole logo\" */}\n            <img\n              src={keyholeLgog}\n              className=\"keyhole-logo img-fluid\"\n              alt=\"keyhole logo\"\n            />\n            {/* A heading with text \"Nøkkelhullet\" */}\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir Nøkkelhullet. </p>\n              </div>\n              <div className=\"col-md-2\">\n                {/* FontAwesome icon with event listener to show the \"Nøkkelhullet\" information section */}\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  {/* A paragraph with a link to Lovdata's \"Forskrift om frivillig merking a nœringsmidler med Nokkellhullet\" */}\n                  <p>\n                    Les mer om hvilke krav det stilles for merking av\n                    Nokkellhullet på Lovdatas \"Forskrift om frivillig merking a\n                    nœringsmidler med Nokkellhullet\":\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  {/* FontAwesome icon with event listener to hide the \"Nøkkelhullet\" information section */}\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        ) : null}\n        {/*Negative results nøkkelhullet container\" */}\n        {showNokkelhulletResults === false && (\n          <div className=\"container nøkkelhullet-food-negResult-container\">\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir ikke Nøkkelhullet.</p>\n                {showEmptyResult ? (\n                  <p>** Obligatoriske næringsverdier kan ikke være tomme.</p>\n                ) : null}\n\n                {mettede ? (\n                  <p>\n                    ** Mettede fettsyrer verdien kan være høyst 3.5 g/100 g.\n                  </p>\n                ) : null}\n\n                {fett ? (\n                  <p>** Fett verdien kan være høyst 10 g/100 g.</p>\n                ) : null}\n\n                {hvoravSukkerarter ? (\n                  <p>\n                    ** Tilsatte sukkerarter verdien kan være høyst 3 g/100 g.\n                  </p>\n                ) : null}\n\n                {salt ? (\n                  <p>** Salt verdien kan være høyst 1.5 g/100 g.</p>\n                ) : null}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om frivillig merking av næringsmidler med Nøkkelhullet:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for ernæringspåstander if there are all true results */}\n        {buttonClicked && (\n          <div\n            className={\n              lowSugars && withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-all\"\n                : !lowSugars && !withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-none\"\n                : \"container ernæringspåstander-food-result-container-some\"\n            }\n          >\n            <h5>Ernæringspåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                {/* Low sugars */}\n                {lowSugars ? (\n                  <div>\n                    <p>** Lavt sukkerinnhold:</p>\n                    <p>\n                      Dette produktet inneholder høyst 5 g sukkerarter per 100 g\n                      for næringsmidler i fast form, eller høyst 2,5 g\n                      sukkerarter per 100 ml for næringsmidler i flytende form\n                      og oppfyller kravet for \"Lavt sukkerinnhold\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Lavt sukkerinnhold\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        For faste næringsmidler, sukkerinnholdet må være høyst 5\n                        g per 100 g.\n                      </li>\n                      <li>\n                        For flytende næringsmidler, sukkerinnholdet må være\n                        høyst 2,5 g per 100 ml.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n\n                {/* No added sugars */}\n                {withNoAddedSugars ? (\n                  <div>\n                    <p>** Uten tilsatt sukker:</p>\n                    <p>\n                      Dette produktet er ikke tilsatt monosakkarider,\n                      disakkarider eller andre næringsmidler på grunn av deres\n                      søtende egenskaper og oppfyller kravet for \"Uten tilsatt\n                      sukker\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Uten tilsatt sukker\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        Produktet må ikke være tilsatt monosakkarider,\n                        disakkarider eller andre næringsmidler på grunn av deres\n                        søtende egenskaper.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"ernaerings\")}\n                />\n              </div>\n            </div>\n            {infoErnaerings ? (\n              // Information section for \"Ernæringspåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"ernaerings\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for Helsepåstander results  */}\n        {showHelsepåstander && (\n          <div\n            className=\"container helsepåstander-food-result-container\"\n            style={{ background: \"#f2f0b5\" }}\n          >\n            <h5>Helsepåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Under utvikling. </p>\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"helsepåstander\")}\n                />\n              </div>\n            </div>\n            {infoHelsepåstander ? (\n              // Information section for \"Helsepåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"helsepåstander\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"15px\" }}></div>\n        {/* conditional rendering for the buttons using showButtons state */}\n        {showButtons && (\n          <div className=\"d-flex justify-content-between\">\n            {/* Save button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-save\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Lagre produkt\n            </button>\n\n            {/* Share button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-share\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Del produkt\n            </button>\n\n            {/* Add a new product button */}\n            <button\n              className=\"btn btn-primary\"\n              onClick={() => window.location.reload()}\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-plus\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Legg til et nytt produkt\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Kategori25a;\n","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Kategori26.js",["511","512","513","514"],[],"import React from \"react\";\nimport { useState, useEffect } from \"react\"; // import the useState and useeffect hook.\nimport { faCircleExclamation } from \"@fortawesome/free-solid-svg-icons\"; // import an icon.\nimport { faBan } from \"@fortawesome/free-solid-svg-icons\";\nimport { faSave, faShare, faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"; // import FontAwesomeIcon component.\nimport Tooltip from \"@mui/material/Tooltip\"; // import Tooltip component.\nimport keyholeLgog from \"./circle-keyhole-logo.png\"; // import an image\nimport { faCircleInfo } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport { faXmarkCircle } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport Select from \"react-select\"; // import Select component\n\nconst Kategori26 = () => {\n  // State variables for showing results and empty result message\n  const [showNokkelhulletResults, setShowNokkelhulletResults] = useState(null);\n  const [showErnaeringsResults, setShowErnaeringsResults] = useState(null);\n  const [showHelsepåstander, setShowHelsepåstander] = useState(null);\n  const [showEmptyResult, setShowEmptyResult] = useState(\"\"); // initialize state variable for showing empty result message.\n\n  //state variable to store the user's food type selection (solid or liquid) and the low sugars claim result\n  const [foodType, setFoodType] = useState(\"\");\n  const [lowSugars, setLowSugars] = useState(null);\n\n  //state variable to track whether the product meets the WITH NO ADDED SUGARS claim or not\n  const [withNoAddedSugars, setWithNoAddedSugars] = useState(false);\n\n  // State variable for tracking if the button is clicked\n  const [buttonClicked, setButtonClicked] = useState(false);\n\n  // useEffect hook for checking the condition for the \"WITH NO ADDED SUGARS\" claim when button is clicked\n  useEffect(() => {\n    if (buttonClicked) {\n      if (withNoAddedSugars) {\n        setShowErnaeringsResults(true);\n      } else {\n        setShowErnaeringsResults(false);\n      }\n    }\n  }, [withNoAddedSugars, buttonClicked]);\n\n  //state for controlling the buttons' visibility\n  const [showButtons, setShowButtons] = useState(false);\n\n  // State variables to control the visibility of the information sections\n  const [infoNokkelhullet, setInfoNokkelhullet] = useState(false);\n  const [infoErnaerings, setInfoErnaerings] = useState(false);\n  const [infoHelsepåstander, setInfoHelsepåstander] = useState(false);\n\n  // Function to show an information section based on the container parameter\n  const onClickInfo = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(true);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(true);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(true);\n    }\n  };\n\n  // Function to hide an information section based on the container parameter\n  const onClickClose = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(false);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(false);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(false);\n    }\n  };\n\n  // State variables for handling input fields and validation errors\n  const [energikj, setEnergikj] = useState(false);\n  const [energikcal, setEnergikcal] = useState(false);\n\n  const [fett, setFett] = useState(false);\n  const [mettede, setMettede] = useState(false);\n  const [mettedeNull, setMettedeNull] = useState(false);\n  const [karbohydrat, setKarbohydrat] = useState(false);\n  const [hvoravSukkerarter, setHvoravSukkerarter] = useState(false);\n  const [hvoravSukkerarterNull, setHvoravSukkerarterNull] = useState(false);\n  const [kostfiber, setKostfiber] = useState(false);\n  const [protein, setProtein] = useState(false);\n  const [salt, setSalt] = useState(false);\n  const [saltNull, setSaltNull] = useState(false);\n\n  // State variable for storing nutrition information entered by user\n  const [nutrition, setNutrition] = useState({\n    energikj: \"\",\n    energikcal: \"\",\n    fett: \"\",\n    mettede: \"\",\n    karbohydrat: \"\",\n    hvoravSukkerarter: \"\",\n    kostfiber: \"\",\n    protein: \"\",\n    salt: \"\",\n  });\n\n  // Handler for updating nutrition state/state variable based on input field changes/input values\n  const changeHandle = (event) => {\n    console.log(\"changeHandle ===\", event.target, event.target.value);\n    setNutrition({\n      ...nutrition,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  // define function to handle form submission\n  const onClick = (e) => {\n    e.preventDefault();\n    setButtonClicked(true);\n    setShowHelsepåstander(true);\n    setShowButtons(true);\n\n    console.log(\"onclick ===\", selectsPart, nutrition);\n\n    // Check if all required fields are filled out and within valid ranges\n    // The if statement checks if all required inputs are non-empty and meet the nutritional requirements\n    if (\n      nutrition.fett !== \"\" &&\n      nutrition.mettede !== \"\" &&\n      nutrition.mettede <= 1.8 &&\n      nutrition.karbohydrat !== \"\" &&\n      nutrition.hvoravSukkerarter !== \"\" &&\n      nutrition.hvoravSukkerarter <= 3 &&\n      nutrition.kostfiber !== \"\" &&\n      nutrition.protein !== \"\" &&\n      nutrition.salt !== \"\" &&\n      nutrition.salt <= 0.8\n    ) {\n      // If all requirements are met, display the nutrition results\n      setShowNokkelhulletResults(true);\n      // Hide any empty result messages or error messages\n      setShowEmptyResult(false);\n\n      // Check if the user selected \"energikj\" and if nutrition input lable of \"energikj\" is not empty\n      if (selectsPart === \"energikj\" && nutrition.energikj !== \"\") {\n        setEnergikj(false);\n      }\n\n      // Check if the user selected \"energikcal\" and if nutrition input lable of \"energikcal\" is not empty\n      if (selectsPart === \"energikcal\" && nutrition.energikcal !== \"\") {\n        setEnergikcal(false);\n      }\n      // Reset all input validation errors\n      setFett(false);\n      setMettede(false);\n      setMettedeNull(false);\n      setKarbohydrat(false);\n      setHvoravSukkerarter(false);\n      setHvoravSukkerarterNull(false);\n      setKostfiber(false);\n      setProtein(false);\n      setSalt(false);\n      setSaltNull(false);\n      // If the user has not selected any nutrients, set errors accordingly\n      // Check each nutrition value to see if it is missing or negative\n      // show input validation errors if any input is missing or negative.\n    } else {\n      if (selectsPart === \"energikj\") {\n        console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n        if (nutrition.energikj === \"\" || nutrition.energikj < 0) {\n          console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n          setEnergikj(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikj(false);\n        }\n      }\n\n      if (selectsPart === \"energikcal\") {\n        console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n        if (nutrition.energikcal === \"\" || nutrition.energikcal < 0) {\n          console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n          setEnergikcal(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikcal(false);\n        }\n      }\n\n      // repeat for each nutrition value...\n      if (nutrition.fett === \"\" || nutrition.fett < 0) {\n        setFett(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setFett(false);\n      }\n\n      if (nutrition.mettede === \"\" || nutrition.mettede < 0) {\n        setMettedeNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setMettedeNull(false);\n      }\n      if (nutrition.mettede > 1.8) {\n        setMettede(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setMettede(false);\n      }\n\n      // Check if the 'karbohydrat' input is missing or negative, and display an error message if necessary\n      if (nutrition.karbohydrat === \"\" || nutrition.karbohydrat < 0) {\n        setKarbohydrat(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKarbohydrat(false);\n      }\n\n      // Check if the 'hvoravSukkerarter' input is missing, negative or above the maximum allowed value (1),\n      // and display an error message if necessary\n      if (\n        nutrition.hvoravSukkerarter === \"\" ||\n        nutrition.hvoravSukkerarter < 0\n      ) {\n        setHvoravSukkerarterNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setHvoravSukkerarterNull(false);\n      }\n      if (nutrition.hvoravSukkerarter > 3) {\n        setHvoravSukkerarter(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setHvoravSukkerarter(false);\n      }\n\n      if (nutrition.kostfiber === \"\" || nutrition.kostfiber < 0) {\n        setKostfiber(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKostfiber(false);\n      }\n\n      if (nutrition.protein === \"\" || nutrition.protein < 0) {\n        setProtein(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setProtein(false);\n      }\n\n      if (nutrition.salt === \"\" || nutrition.salt < 0) {\n        setSaltNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setSaltNull(false);\n      }\n      if (nutrition.salt > 0.8) {\n        setSalt(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setSalt(false);\n      }\n    }\n\n    // Check for the \"LOW SUGARS\" claim\n    if (foodType === \"solid\" && parseFloat(nutrition.karbohydrat) <= 5) {\n      setLowSugars(true);\n    } else if (\n      foodType === \"liquid\" &&\n      parseFloat(nutrition.karbohydrat) <= 2.5\n    ) {\n      setLowSugars(true);\n    } else {\n      setLowSugars(false);\n    }\n\n    // Check the condition for the \"WITH NO ADDED SUGARS\" nutrition claim\n    if (nutrition.hvoravSukkerarter === \"0\" && nutrition.karbohydrat > 0) {\n      setWithNoAddedSugars(true);\n    } else {\n      setWithNoAddedSugars(false);\n    }\n  };\n\n  // create an array of energy units to select from\n  const selectUnit = [\n    {\n      value: \"energikj\",\n      label: \"(kj)\",\n    },\n    {\n      value: \"energikcal\",\n      label: \"(kcal)\",\n    },\n  ];\n\n  // Declare a state variable for the select dropdown.\n  const [selectsPart, setSelectPart] = useState(\"\");\n\n  // A function to handle changes to the select dropdown energy unit\n  const handlerPart = (event) => {\n    const inputVal = document.getElementsByName(event.value);\n    console.log(\"handlerPart ===\", event, nutrition, inputVal);\n    setSelectPart(event.value);\n  };\n\n  //create an array of food types to select from\n  const foodTypes = [\n    {\n      value: \"solid\",\n      label: \"Fast form\",\n    },\n    {\n      value: \"liquid\",\n      label: \"Flytende form\",\n    },\n  ];\n\n  return (\n    <div className=\"row\">\n      {/* This div creates a column layout for the left side of the table */}\n      <div className=\"col-md-6\">\n        {/* the selector (dropdown menu) for choosing the food type. */}\n        <div className=\"form-group\">\n          <label htmlFor=\"foodType\">Velg type matvare:</label>\n          <Select\n            className=\"form-control\"\n            id=\"foodType\"\n            options={foodTypes}\n            onChange={(e) => setFoodType(e.value)} // update the onFoodTypeChange function to directly set the food type state\n            placeholder=\"Velg type matvare\"\n          />\n        </div>\n\n        <h5>\n          Næringsinnhold per 100{\" \"}\n          {foodType === \"solid\" ? \"g\" : foodType === \"liquid\" ? \"ml\" : \"g/ml\"}\n        </h5>\n\n        {/* This div adds a light background color to the table */}\n        <div className=\"bg-light\">\n          {/* This table shows the nutritional information */}\n          <table className=\"table table-striped\">\n            {/* The table header */}\n            <thead>\n              <tr>\n                <th scope=\"col\" className=\"table-font\">\n                  Energi eller næringsstoff\n                </th>\n                <th scope=\"col\" className=\"table-font\">\n                  Mengde\n                </th>\n              </tr>\n            </thead>\n\n            {/* The table body */}\n            <tbody>\n              {/* This row shows the energy content */}\n              <tr className={(energikj, energikcal ? \"alert-box\" : null)}>\n                <th scope=\"row\" className=\"table-font\">\n                  {/* An icon with a tooltip to indicate missing values in energy parameters */}\n                  {energikj && energikcal ? (\n                    <Tooltip\n                      title=\"Mangler verdi i energi (kJ/Kcal) parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  {/* This div displays the energy label and unit */}\n                  <div className=\"row\">\n                    <div className=\"col-md-3\">\n                      <label for=\"energiunit\" class=\"form-label\">\n                        Energi\n                      </label>\n                    </div>\n                    {/* A dropdown menu for selecting the energy unit */}\n                    <div className=\"col-md-6\">\n                      <Select\n                        placeholder={<div>Velg enhet</div>}\n                        className=\"form-select-md mb-3\"\n                        options={selectUnit}\n                        onChange={(e) => handlerPart(e)}\n                      />\n                    </div>\n                  </div>\n                </th>\n                {/* An input field for entering the energy value */}\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name={selectsPart}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* Additional rows for other nutrient selections */}\n              {/* This row shows the fat content */}\n              <tr className={fett ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {fett ? (\n                    <Tooltip\n                      title=\"Mangler verdi i fett parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Fett (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"fett\"\n                    value={nutrition.fett}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the saturated fat content */}\n              <tr\n                className={\n                  mettede\n                    ? \"alert-box\"\n                    : null || mettedeNull\n                    ? \"alert-box\"\n                    : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {mettede ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden mettede fettsyrer. Mengden på mettede fettsyrer må være  høyst enn eller lik 1.8 / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {mettedeNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i mettede fettsyrer parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Mettede fettsyrer (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"mettede\"\n                    value={nutrition.mettede}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the carbohydrate (total sugars)content */}\n              <tr className={karbohydrat ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {/* If the \"karbohydrat\" value is missing, display an exclamation icon with a tooltip */}\n                  {karbohydrat ? (\n                    <Tooltip\n                      title=\"Mangler verdi i karbohydrat parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Karbohydrat (g)\n                </th>\n                {/* Input field for \"karbohydrat\" value */}\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"karbohydrat\"\n                    value={nutrition.karbohydrat}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows hvorav tilsatte sukkerarter (added sugars)content */}\n              <tr\n                className={\n                  hvoravSukkerarter\n                    ? \"alert-box\"\n                    : null || hvoravSukkerarterNull\n                    ? \"alert-box\"\n                    : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {/* If the \"hvoravSukkerarter\" value is too high, display a ban icon with a tooltip */}\n                  {hvoravSukkerarter ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden hvoravSukkerarter. Mengden på hvoravSukkerarter må være lavere enn eller lik 3 g/ 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {/* If the \"hvoravSukkerarter\" value is missing, display an exclamation icon with a tooltip */}\n                  {hvoravSukkerarterNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i hvorav sukkerarter parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Hvorav tilsatte sukkerarter (g)\n                </th>\n                {/* Input field for \"hvoravSukkerarter\" value */}\n\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"hvoravSukkerarter\"\n                    value={nutrition.hvoravSukkerarter}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows kostfiber content */}\n              <tr className={kostfiber ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {kostfiber ? (\n                    <Tooltip\n                      title=\"Mangler verdi i kostfiber parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Kostfiber (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"kostfiber\"\n                    value={nutrition.kostfiber}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the protein content */}\n              <tr className={protein ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {protein ? (\n                    <Tooltip\n                      title=\"Mangler verdi i protein parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Protein (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"protein\"\n                    value={nutrition.protein}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows salt content */}\n              <tr\n                className={\n                  salt ? \"alert-box\" : null || saltNull ? \"alert-box\" : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {salt ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden salt. Mengden på salt må være lavere enn eller lik 0.8 g/ 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {saltNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i salt parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Salt (g)\n                </th>\n                <td colSpan=\"2\">\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"salt\"\n                    value={nutrition.salt}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n\n        {/* Button that submits the form and calls the onClick function */}\n        <div className=\"col-12 button-div\">\n          <button\n            type=\"submit\"\n            className=\"btn btn-primary btn-lg button-search\"\n            onClick={onClick}\n          >\n            Beregn\n          </button>\n        </div>\n      </div>\n\n      <div className=\"col-md-6\">\n        {/* positive results nøkkelhullet container\" */}\n        {showNokkelhulletResults ? (\n          <div className=\"container nøkkelhullet-food-result-container\">\n            {/* An image with class \"keyhole-logo\" and alt text \"keyhole logo\" */}\n            <img\n              src={keyholeLgog}\n              className=\"keyhole-logo img-fluid\"\n              alt=\"keyhole logo\"\n            />\n            {/* A heading with text \"Nøkkelhullet\" */}\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir Nøkkelhullet. </p>\n              </div>\n              <div className=\"col-md-2\">\n                {/* FontAwesome icon with event listener to show the \"Nøkkelhullet\" information section */}\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  {/* A paragraph with a link to Lovdata's \"Forskrift om frivillig merking a nœringsmidler med Nokkellhullet\" */}\n                  <p>\n                    Les mer om hvilke krav det stilles for merking av\n                    Nokkellhullet på Lovdatas \"Forskrift om frivillig merking a\n                    nœringsmidler med Nokkellhullet\":\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  {/* FontAwesome icon with event listener to hide the \"Nøkkelhullet\" information section */}\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        ) : null}\n        {/*Negative results nøkkelhullet container\" */}\n        {showNokkelhulletResults === false && (\n          <div className=\"container nøkkelhullet-food-negResult-container\">\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir ikke Nøkkelhullet.</p>\n                {showEmptyResult ? (\n                  <p>** Obligatoriske næringsverdier kan ikke være tomme.</p>\n                ) : null}\n\n                {mettede ? (\n                  <p>** Mettede fettsyrer verdien kan være høyst 1,8 g/100 g</p>\n                ) : null}\n\n                {hvoravSukkerarter ? (\n                  <p>\n                    ** Tilsatte sukkerarter verdien kan være høyst 3 g/100 g.\n                  </p>\n                ) : null}\n\n                {salt ? (\n                  <p>** Salt verdien kan være høyst 0.8 g/100 g.</p>\n                ) : null}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om frivillig merking av næringsmidler med Nøkkelhullet:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for ernæringspåstander if there are all true results */}\n        {buttonClicked && (\n          <div\n            className={\n              lowSugars && withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-all\"\n                : !lowSugars && !withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-none\"\n                : \"container ernæringspåstander-food-result-container-some\"\n            }\n          >\n            <h5>Ernæringspåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                {/* Low sugars */}\n                {lowSugars ? (\n                  <div>\n                    <p>** Lavt sukkerinnhold:</p>\n                    <p>\n                      Dette produktet inneholder høyst 5 g sukkerarter per 100 g\n                      for næringsmidler i fast form, eller høyst 2,5 g\n                      sukkerarter per 100 ml for næringsmidler i flytende form\n                      og oppfyller kravet for \"Lavt sukkerinnhold\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Lavt sukkerinnhold\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        For faste næringsmidler, sukkerinnholdet må være høyst 5\n                        g per 100 g.\n                      </li>\n                      <li>\n                        For flytende næringsmidler, sukkerinnholdet må være\n                        høyst 2,5 g per 100 ml.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n\n                {/* No added sugars */}\n                {withNoAddedSugars ? (\n                  <div>\n                    <p>** Uten tilsatt sukker:</p>\n                    <p>\n                      Dette produktet er ikke tilsatt monosakkarider,\n                      disakkarider eller andre næringsmidler på grunn av deres\n                      søtende egenskaper og oppfyller kravet for \"Uten tilsatt\n                      sukker\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Uten tilsatt sukker\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        Produktet må ikke være tilsatt monosakkarider,\n                        disakkarider eller andre næringsmidler på grunn av deres\n                        søtende egenskaper.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"ernaerings\")}\n                />\n              </div>\n            </div>\n            {infoErnaerings ? (\n              // Information section for \"Ernæringspåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"ernaerings\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for Helsepåstander results  */}\n        {showHelsepåstander && (\n          <div\n            className=\"container helsepåstander-food-result-container\"\n            style={{ background: \"#f2f0b5\" }}\n          >\n            <h5>Helsepåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Under utvikling. </p>\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"helsepåstander\")}\n                />\n              </div>\n            </div>\n            {infoHelsepåstander ? (\n              // Information section for \"Helsepåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"helsepåstander\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"15px\" }}></div>\n        {/* conditional rendering for the buttons using showButtons state */}\n        {showButtons && (\n          <div className=\"d-flex justify-content-between\">\n            {/* Save button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-save\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Lagre produkt\n            </button>\n\n            {/* Share button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-share\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Del produkt\n            </button>\n\n            {/* Add a new product button */}\n            <button\n              className=\"btn btn-primary\"\n              onClick={() => window.location.reload()}\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-plus\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Legg til et nytt produkt\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Kategori26;\n","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Kategori30.js",["515","516","517","518"],[],"import React from \"react\";\nimport { useState, useEffect } from \"react\"; // import the useState and useeffect hook.\nimport { faCircleExclamation } from \"@fortawesome/free-solid-svg-icons\"; // import an icon.\nimport { faBan } from \"@fortawesome/free-solid-svg-icons\";\nimport { faSave, faShare, faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"; // import FontAwesomeIcon component.\nimport Tooltip from \"@mui/material/Tooltip\"; // import Tooltip component.\nimport keyholeLgog from \"./circle-keyhole-logo.png\"; // import an image\nimport { faCircleInfo } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport { faXmarkCircle } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport Select from \"react-select\"; // import Select component\n\nconst Kategori30 = () => {\n  // State variables for showing results and empty result message\n  const [showNokkelhulletResults, setShowNokkelhulletResults] = useState(null);\n  const [showErnaeringsResults, setShowErnaeringsResults] = useState(null);\n  const [showHelsepåstander, setShowHelsepåstander] = useState(null);\n  const [showEmptyResult, setShowEmptyResult] = useState(\"\"); // initialize state variable for showing empty result message.\n\n  //state variable to store the user's food type selection (solid or liquid) and the low sugars claim result\n  const [foodType, setFoodType] = useState(\"\");\n  const [lowSugars, setLowSugars] = useState(null);\n\n  //state variable to track whether the product meets the WITH NO ADDED SUGARS claim or not\n  const [withNoAddedSugars, setWithNoAddedSugars] = useState(false);\n\n  // State variable for tracking if the button is clicked\n  const [buttonClicked, setButtonClicked] = useState(false);\n\n  // useEffect hook for checking the condition for the \"WITH NO ADDED SUGARS\" claim when button is clicked\n  useEffect(() => {\n    if (buttonClicked) {\n      if (withNoAddedSugars) {\n        setShowErnaeringsResults(true);\n      } else {\n        setShowErnaeringsResults(false);\n      }\n    }\n  }, [withNoAddedSugars, buttonClicked]);\n\n  //state for controlling the buttons' visibility\n  const [showButtons, setShowButtons] = useState(false);\n\n  // State variables to control the visibility of the information sections\n  const [infoNokkelhullet, setInfoNokkelhullet] = useState(false);\n  const [infoErnaerings, setInfoErnaerings] = useState(false);\n  const [infoHelsepåstander, setInfoHelsepåstander] = useState(false);\n\n  // Function to show an information section based on the container parameter\n  const onClickInfo = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(true);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(true);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(true);\n    }\n  };\n\n  // Function to hide an information section based on the container parameter\n  const onClickClose = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(false);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(false);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(false);\n    }\n  };\n\n  // State variables for handling input fields and validation errors\n  const [energikj, setEnergikj] = useState(false);\n  const [energikcal, setEnergikcal] = useState(false);\n\n  const [fett, setFett] = useState(false);\n  const [mettede, setMettede] = useState(false);\n  const [mettedeNull, setMettedeNull] = useState(false);\n  const [karbohydrat, setKarbohydrat] = useState(false);\n  const [hvoravSukkerarter, setHvoravSukkerarter] = useState(false);\n  const [hvoravSukkerarterNull, setHvoravSukkerarterNull] = useState(false);\n  const [kostfiber, setKostfiber] = useState(false);\n  const [protein, setProtein] = useState(false);\n  const [salt, setSalt] = useState(false);\n  const [saltNull, setSaltNull] = useState(false);\n  // State variable for storing nutrition information entered by user\n  const [nutrition, setNutrition] = useState({\n    energikj: \"\",\n    energikcal: \"\",\n    fett: \"\",\n    mettede: \"\",\n    karbohydrat: \"\",\n    hvoravSukkerarter: \"\",\n    kostfiber: \"\",\n    protein: \"\",\n    salt: \"\",\n  });\n\n  // Handler for updating nutrition state/state variable based on input field changes/input values\n  const changeHandle = (event) => {\n    console.log(\"changeHandle ===\", event.target, event.target.value);\n    setNutrition({\n      ...nutrition,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  // define function to handle form submission\n  const onClick = (e) => {\n    e.preventDefault();\n    setButtonClicked(true);\n    setShowHelsepåstander(true);\n    setShowButtons(true);\n\n    console.log(\"onclick ===\", selectsPart, nutrition);\n\n    // Check if all required fields are filled out and within valid ranges\n    // The if statement checks if all required inputs are non-empty and meet the nutritional requirements\n    if (\n      nutrition.fett !== \"\" &&\n      nutrition.mettede !== \"\" &&\n      nutrition.mettede <= 1.5 &&\n      nutrition.karbohydrat !== \"\" &&\n      nutrition.hvoravSukkerarter !== \"\" &&\n      nutrition.hvoravSukkerarter <= 3 &&\n      nutrition.kostfiber !== \"\" &&\n      nutrition.protein !== \"\" &&\n      nutrition.salt !== \"\" &&\n      nutrition.salt <= 0.8\n    ) {\n      // If all requirements are met, display the nutrition results\n      setShowNokkelhulletResults(true);\n      // Hide any empty result messages or error messages\n      setShowEmptyResult(false);\n\n      // Check if the user selected \"energikj\" and if nutrition input lable of \"energikj\" is not empty\n      if (selectsPart === \"energikj\" && nutrition.energikj !== \"\") {\n        setEnergikj(false);\n      }\n\n      // Check if the user selected \"energikcal\" and if nutrition input lable of \"energikcal\" is not empty\n      if (selectsPart === \"energikcal\" && nutrition.energikcal !== \"\") {\n        setEnergikcal(false);\n      }\n      // Reset all input validation errors\n      setFett(false);\n      setMettede(false);\n      setMettedeNull(false);\n      setKarbohydrat(false);\n      setHvoravSukkerarter(false);\n      setHvoravSukkerarterNull(false);\n      setKostfiber(false);\n      setProtein(false);\n      setSalt(false);\n      setSaltNull(false);\n      // If the user has not selected any nutrients, set errors accordingly\n      // Check each nutrition value to see if it is missing or negative\n      // show input validation errors if any input is missing or negative.\n    } else {\n      if (selectsPart === \"energikj\") {\n        console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n        if (nutrition.energikj === \"\" || nutrition.energikj < 0) {\n          console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n          setEnergikj(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikj(false);\n        }\n      }\n\n      if (selectsPart === \"energikcal\") {\n        console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n        if (nutrition.energikcal === \"\" || nutrition.energikcal < 0) {\n          console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n          setEnergikcal(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikcal(false);\n        }\n      }\n\n      // repeat for each nutrition value...\n      if (nutrition.fett === \"\" || nutrition.fett < 0) {\n        setFett(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setFett(false);\n      }\n\n      if (nutrition.mettede === \"\" || nutrition.mettede < 0) {\n        setMettedeNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setMettedeNull(false);\n      }\n      if (nutrition.mettede > 1.5) {\n        setMettede(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setMettede(false);\n      }\n\n      // Check if the 'karbohydrat' input is missing or negative, and display an error message if necessary\n      if (nutrition.karbohydrat === \"\" || nutrition.karbohydrat < 0) {\n        setKarbohydrat(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKarbohydrat(false);\n      }\n\n      // Check if the 'hvoravSukkerarter' input is missing, negative or above the maximum allowed value (1),\n      // and display an error message if necessary\n      if (\n        nutrition.hvoravSukkerarter === \"\" ||\n        nutrition.hvoravSukkerarter < 0\n      ) {\n        setHvoravSukkerarterNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setHvoravSukkerarterNull(false);\n      }\n      if (nutrition.hvoravSukkerarter > 3) {\n        setHvoravSukkerarter(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setHvoravSukkerarter(false);\n      }\n\n      if (nutrition.kostfiber === \"\" || nutrition.kostfiber < 0) {\n        setKostfiber(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKostfiber(false);\n      }\n\n      if (nutrition.protein === \"\" || nutrition.protein < 0) {\n        setProtein(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setProtein(false);\n      }\n\n      if (nutrition.salt === \"\" || nutrition.salt < 0) {\n        setSaltNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setSaltNull(false);\n      }\n      if (nutrition.salt > 0.8) {\n        setSalt(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setSalt(false);\n      }\n    }\n\n    // Check for the \"LOW SUGARS\" claim\n    if (foodType === \"solid\" && parseFloat(nutrition.karbohydrat) <= 5) {\n      setLowSugars(true);\n    } else if (\n      foodType === \"liquid\" &&\n      parseFloat(nutrition.karbohydrat) <= 2.5\n    ) {\n      setLowSugars(true);\n    } else {\n      setLowSugars(false);\n    }\n\n    // Check the condition for the \"WITH NO ADDED SUGARS\" nutrition claim\n    if (nutrition.hvoravSukkerarter === \"0\" && nutrition.karbohydrat > 0) {\n      setWithNoAddedSugars(true);\n    } else {\n      setWithNoAddedSugars(false);\n    }\n  };\n\n  // create an array of energy units to select from\n  const selectUnit = [\n    {\n      value: \"energikj\",\n      label: \"(kj)\",\n    },\n    {\n      value: \"energikcal\",\n      label: \"(kcal)\",\n    },\n  ];\n\n  // Declare a state variable for the select dropdown.\n  const [selectsPart, setSelectPart] = useState(\"\");\n\n  // A function to handle changes to the select dropdown energy unit\n  const handlerPart = (event) => {\n    const inputVal = document.getElementsByName(event.value);\n    console.log(\"handlerPart ===\", event, nutrition, inputVal);\n    setSelectPart(event.value);\n  };\n\n  //create an array of food types to select from\n  const foodTypes = [\n    {\n      value: \"solid\",\n      label: \"Fast form\",\n    },\n    {\n      value: \"liquid\",\n      label: \"Flytende form\",\n    },\n  ];\n\n  return (\n    <div className=\"row\">\n      {/* This div creates a column layout for the left side of the table */}\n      <div className=\"col-md-6\">\n        {/* the selector (dropdown menu) for choosing the food type. */}\n        <div className=\"form-group\">\n          <label htmlFor=\"foodType\">Velg type matvare:</label>\n          <Select\n            className=\"form-control\"\n            id=\"foodType\"\n            options={foodTypes}\n            onChange={(e) => setFoodType(e.value)} // update the onFoodTypeChange function to directly set the food type state\n            placeholder=\"Velg type matvare\"\n          />\n        </div>\n\n        <h5>\n          Næringsinnhold per 100{\" \"}\n          {foodType === \"solid\" ? \"g\" : foodType === \"liquid\" ? \"ml\" : \"g/ml\"}\n        </h5>\n\n        {/* This div adds a light background color to the table */}\n        <div className=\"bg-light\">\n          {/* This table shows the nutritional information */}\n          <table className=\"table table-striped\">\n            {/* The table header */}\n            <thead>\n              <tr>\n                <th scope=\"col\" className=\"table-font\">\n                  Energi eller næringsstoff\n                </th>\n                <th scope=\"col\" className=\"table-font\">\n                  Mengde\n                </th>\n              </tr>\n            </thead>\n\n            {/* The table body */}\n            <tbody>\n              {/* This row shows the energy content */}\n              <tr className={(energikj, energikcal ? \"alert-box\" : null)}>\n                <th scope=\"row\" className=\"table-font\">\n                  {/* An icon with a tooltip to indicate missing values in energy parameters */}\n                  {energikj && energikcal ? (\n                    <Tooltip\n                      title=\"Mangler verdi i energi (kJ/Kcal) parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  {/* This div displays the energy label and unit */}\n                  <div className=\"row\">\n                    <div className=\"col-md-3\">\n                      <label for=\"energiunit\" class=\"form-label\">\n                        Energi\n                      </label>\n                    </div>\n                    {/* A dropdown menu for selecting the energy unit */}\n                    <div className=\"col-md-6\">\n                      <Select\n                        placeholder={<div>Velg enhet</div>}\n                        className=\"form-select-md mb-3\"\n                        options={selectUnit}\n                        onChange={(e) => handlerPart(e)}\n                      />\n                    </div>\n                  </div>\n                </th>\n                {/* An input field for entering the energy value */}\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name={selectsPart}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* Additional rows for other nutrient selections */}\n              {/* This row shows the fat content */}\n              <tr className={fett ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {fett ? (\n                    <Tooltip\n                      title=\"Mangler verdi i fett parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Fett (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"fett\"\n                    value={nutrition.fett}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the saturated fat content */}\n              <tr\n                className={\n                  mettede\n                    ? \"alert-box\"\n                    : null || mettedeNull\n                    ? \"alert-box\"\n                    : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {mettede ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden mettede fettsyrer. Mengden på mettede fettsyrer må være  høyst enn eller lik 1.5 / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {mettedeNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i mettede fettsyrer parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Mettede fettsyrer (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"mettede\"\n                    value={nutrition.mettede}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the carbohydrate (total sugars)content */}\n              <tr className={karbohydrat ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {/* If the \"karbohydrat\" value is missing, display an exclamation icon with a tooltip */}\n                  {karbohydrat ? (\n                    <Tooltip\n                      title=\"Mangler verdi i karbohydrat parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Karbohydrat (g)\n                </th>\n                {/* Input field for \"karbohydrat\" value */}\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"karbohydrat\"\n                    value={nutrition.karbohydrat}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows hvorav tilsatte sukkerarter (added sugars)content */}\n              <tr\n                className={\n                  hvoravSukkerarter\n                    ? \"alert-box\"\n                    : null || hvoravSukkerarterNull\n                    ? \"alert-box\"\n                    : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {/* If the \"hvoravSukkerarter\" value is too high, display a ban icon with a tooltip */}\n                  {hvoravSukkerarter ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden hvoravSukkerarter. Mengden på hvoravSukkerarter må være lavere enn eller lik 3 g/ 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {/* If the \"hvoravSukkerarter\" value is missing, display an exclamation icon with a tooltip */}\n                  {hvoravSukkerarterNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i hvorav sukkerarter parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Hvorav tilsatte sukkerarter (g)\n                </th>\n                {/* Input field for \"hvoravSukkerarter\" value */}\n\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"hvoravSukkerarter\"\n                    value={nutrition.hvoravSukkerarter}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows kostfiber content */}\n              <tr className={kostfiber ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {kostfiber ? (\n                    <Tooltip\n                      title=\"Mangler verdi i kostfiber parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Kostfiber (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"kostfiber\"\n                    value={nutrition.kostfiber}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the protein content */}\n              <tr className={protein ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {protein ? (\n                    <Tooltip\n                      title=\"Mangler verdi i protein parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Protein (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"protein\"\n                    value={nutrition.protein}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows salt content */}\n              <tr\n                className={\n                  salt ? \"alert-box\" : null || saltNull ? \"alert-box\" : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {salt ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden salt. Mengden på salt må være lavere enn eller lik 0.8 g/ 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {saltNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i salt parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Salt (g)\n                </th>\n                <td colSpan=\"2\">\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"salt\"\n                    value={nutrition.salt}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n\n        {/* Button that submits the form and calls the onClick function */}\n        <div className=\"col-12 button-div\">\n          <button\n            type=\"submit\"\n            className=\"btn btn-primary btn-lg button-search\"\n            onClick={onClick}\n          >\n            Beregn\n          </button>\n        </div>\n      </div>\n\n      <div className=\"col-md-6\">\n        {/* positive results nøkkelhullet container\" */}\n        {showNokkelhulletResults ? (\n          <div className=\"container nøkkelhullet-food-result-container\">\n            {/* An image with class \"keyhole-logo\" and alt text \"keyhole logo\" */}\n            <img\n              src={keyholeLgog}\n              className=\"keyhole-logo img-fluid\"\n              alt=\"keyhole logo\"\n            />\n            {/* A heading with text \"Nøkkelhullet\" */}\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir Nøkkelhullet. </p>\n              </div>\n              <div className=\"col-md-2\">\n                {/* FontAwesome icon with event listener to show the \"Nøkkelhullet\" information section */}\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  {/* A paragraph with a link to Lovdata's \"Forskrift om frivillig merking a nœringsmidler med Nokkellhullet\" */}\n                  <p>\n                    Les mer om hvilke krav det stilles for merking av\n                    Nokkellhullet på Lovdatas \"Forskrift om frivillig merking a\n                    nœringsmidler med Nokkellhullet\":\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  {/* FontAwesome icon with event listener to hide the \"Nøkkelhullet\" information section */}\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        ) : null}\n        {/*Negative results nøkkelhullet container\" */}\n        {showNokkelhulletResults === false && (\n          <div className=\"container nøkkelhullet-food-negResult-container\">\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir ikke Nøkkelhullet.</p>\n                {showEmptyResult ? (\n                  <p>** Obligatoriske næringsverdier kan ikke være tomme.</p>\n                ) : null}\n\n                {mettede ? (\n                  <p>** Mettede fettsyrer verdien kan være høyst 1,5 g/100 g</p>\n                ) : null}\n\n                {hvoravSukkerarter ? (\n                  <p>\n                    ** Tilsatte sukkerarter verdien kan være høyst 3 g/100 g.\n                  </p>\n                ) : null}\n\n                {salt ? (\n                  <p>** Salt verdien kan være høyst 0.8 g/100 g.</p>\n                ) : null}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om frivillig merking av næringsmidler med Nøkkelhullet:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for ernæringspåstander if there are all true results */}\n        {buttonClicked && (\n          <div\n            className={\n              lowSugars && withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-all\"\n                : !lowSugars && !withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-none\"\n                : \"container ernæringspåstander-food-result-container-some\"\n            }\n          >\n            <h5>Ernæringspåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                {/* Low sugars */}\n                {lowSugars ? (\n                  <div>\n                    <p>** Lavt sukkerinnhold:</p>\n                    <p>\n                      Dette produktet inneholder høyst 5 g sukkerarter per 100 g\n                      for næringsmidler i fast form, eller høyst 2,5 g\n                      sukkerarter per 100 ml for næringsmidler i flytende form\n                      og oppfyller kravet for \"Lavt sukkerinnhold\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Lavt sukkerinnhold\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        For faste næringsmidler, sukkerinnholdet må være høyst 5\n                        g per 100 g.\n                      </li>\n                      <li>\n                        For flytende næringsmidler, sukkerinnholdet må være\n                        høyst 2,5 g per 100 ml.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n\n                {/* No added sugars */}\n                {withNoAddedSugars ? (\n                  <div>\n                    <p>** Uten tilsatt sukker:</p>\n                    <p>\n                      Dette produktet er ikke tilsatt monosakkarider,\n                      disakkarider eller andre næringsmidler på grunn av deres\n                      søtende egenskaper og oppfyller kravet for \"Uten tilsatt\n                      sukker\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Uten tilsatt sukker\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        Produktet må ikke være tilsatt monosakkarider,\n                        disakkarider eller andre næringsmidler på grunn av deres\n                        søtende egenskaper.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"ernaerings\")}\n                />\n              </div>\n            </div>\n            {infoErnaerings ? (\n              // Information section for \"Ernæringspåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"ernaerings\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for Helsepåstander results  */}\n        {showHelsepåstander && (\n          <div\n            className=\"container helsepåstander-food-result-container\"\n            style={{ background: \"#f2f0b5\" }}\n          >\n            <h5>Helsepåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Under utvikling. </p>\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"helsepåstander\")}\n                />\n              </div>\n            </div>\n            {infoHelsepåstander ? (\n              // Information section for \"Helsepåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"helsepåstander\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"15px\" }}></div>\n        {/* conditional rendering for the buttons using showButtons state */}\n        {showButtons && (\n          <div className=\"d-flex justify-content-between\">\n            {/* Save button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-save\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Lagre produkt\n            </button>\n\n            {/* Share button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-share\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Del produkt\n            </button>\n\n            {/* Add a new product button */}\n            <button\n              className=\"btn btn-primary\"\n              onClick={() => window.location.reload()}\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-plus\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Legg til et nytt produkt\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Kategori30;\n","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Kategori28.js",["519","520","521","522"],[],"import React from \"react\";\nimport { useState, useEffect } from \"react\"; // import the useState and useeffect hook.\nimport { faCircleExclamation } from \"@fortawesome/free-solid-svg-icons\"; // import an icon.\nimport { faBan } from \"@fortawesome/free-solid-svg-icons\";\nimport { faSave, faShare, faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"; // import FontAwesomeIcon component.\nimport Tooltip from \"@mui/material/Tooltip\"; // import Tooltip component.\nimport keyholeLgog from \"./circle-keyhole-logo.png\"; // import an image\nimport { faCircleInfo } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport { faXmarkCircle } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport Select from \"react-select\"; // import Select component\n\nconst Kategori28 = () => {\n  // State variables for showing/hiding results and empty result message\n  const [showNokkelhulletResults, setShowNokkelhulletResults] = useState(null);\n  const [showErnaeringsResults, setShowErnaeringsResults] = useState(null);\n  const [showHelsepåstander, setShowHelsepåstander] = useState(null);\n  const [showEmptyResult, setShowEmptyResult] = useState(\"\"); // initialize state variable for showing empty result message.\n\n  //state variable to store the user's food type selection (solid or liquid) and the low sugars claim result\n  const [foodType, setFoodType] = useState(\"\");\n  const [lowSugars, setLowSugars] = useState(null);\n\n  //state variable to track whether the product meets the WITH NO ADDED SUGARS claim or not\n  const [withNoAddedSugars, setWithNoAddedSugars] = useState(false);\n\n  // State variable for tracking if the button is clicked\n  const [buttonClicked, setButtonClicked] = useState(false);\n\n  // useEffect hook for checking the condition for the \"WITH NO ADDED SUGARS\" claim when button is clicked\n  useEffect(() => {\n    if (buttonClicked) {\n      if (withNoAddedSugars) {\n        setShowErnaeringsResults(true);\n      } else {\n        setShowErnaeringsResults(false);\n      }\n    }\n  }, [withNoAddedSugars, buttonClicked]);\n\n  //state for controlling the buttons' visibility\n  const [showButtons, setShowButtons] = useState(false);\n\n  // State variables to control the visibility of the information sections\n  const [infoNokkelhullet, setInfoNokkelhullet] = useState(false);\n  const [infoErnaerings, setInfoErnaerings] = useState(false);\n  const [infoHelsepåstander, setInfoHelsepåstander] = useState(false);\n\n  // Function to show an information section based on the container parameter\n  const onClickInfo = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(true);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(true);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(true);\n    }\n  };\n\n  // Function to hide an information section based on the container parameter\n  const onClickClose = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(false);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(false);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(false);\n    }\n  };\n\n  // State variables for handling input fields and validation errors\n  const [energikj, setEnergikj] = useState(false);\n  const [energikcal, setEnergikcal] = useState(false);\n\n  const [mettede, setMettede] = useState(false);\n  const [mettedeNull, setMettedeNull] = useState(false);\n  const [fett, setFett] = useState(false);\n  const [protein, setProtein] = useState(false);\n  const [karbohydrat, setKarbohydrat] = useState(false);\n  const [hvoravSukkerarter, setHvoravSukkerarter] = useState(false);\n  const [hvoravSukkerarterNull, setHvoravSukkerarterNull] = useState(false);\n  const [kostfiber, setKostfiber] = useState(false);\n  const [salt, setSalt] = useState(false);\n  const [saltNull, setSaltNull] = useState(false);\n\n  // State variable for storing nutrition information entered by user\n  const [nutrition, setNutrition] = useState({\n    energikj: \"\",\n    energikcal: \"\",\n    mettede: \"\",\n    fett: \"\",\n    protein: \"\",\n    karbohydrat: \"\",\n    hvoravSukkerarter: \"\",\n    kostfiber: \"\",\n    salt: \"\",\n  });\n\n  const changeHandle = (event) => {\n    console.log(\"changeHandle ===\", event.target, event.target.value);\n    setNutrition({\n      ...nutrition,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  // define function to handle form submission\n  const onClick = (e) => {\n    e.preventDefault();\n    setButtonClicked(true);\n    setShowHelsepåstander(true);\n    setShowButtons(true);\n\n    console.log(\"onclick ===\", selectsPart, nutrition);\n\n    // Check if all required fields are filled out and within valid ranges\n    // The if statement checks if all required inputs are non-empty and meet the nutritional requirements\n    if (\n      nutrition.mettede !== \"\" &&\n      nutrition.mettede <= 2 &&\n      nutrition.fett !== \"\" &&\n      nutrition.protein !== \"\" &&\n      nutrition.karbohydrat !== \"\" &&\n      nutrition.hvoravSukkerarter !== \"\" &&\n      nutrition.hvoravSukkerarter <= 3 &&\n      nutrition.kostfiber !== \"\" &&\n      nutrition.salt !== \"\" &&\n      nutrition.salt <= 1\n    ) {\n      // If all requirements are met, display the nutrition results\n      setShowNokkelhulletResults(true);\n      // Hide any empty result messages or error messages\n      setShowEmptyResult(false);\n\n      // Check if the user selected \"energikj\" and if nutrition input lable of \"energikj\" is not empty\n      if (selectsPart === \"energikj\" && nutrition.energikj !== \"\") {\n        setEnergikj(false);\n      }\n\n      // Check if the user selected \"energikcal\" and if nutrition input lable of \"energikcal\" is not empty\n      if (selectsPart === \"energikcal\" && nutrition.energikcal !== \"\") {\n        setEnergikcal(false);\n      }\n      // Reset all input validation errors\n      setFett(false);\n      setMettede(false);\n      setMettedeNull(false);\n      setKarbohydrat(false);\n      setHvoravSukkerarter(false);\n      setHvoravSukkerarterNull(false);\n      setKostfiber(false);\n      setProtein(false);\n      setSalt(false);\n      setSaltNull(false);\n\n      // If the user has not selected any nutrients, set errors accordingly\n      // Check each nutrition value to see if it is missing or negative\n      // show input validation errors if any input is missing or negative.\n    } else {\n      if (selectsPart === \"energikj\") {\n        console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n        if (nutrition.energikj === \"\" || nutrition.energikj < 0) {\n          console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n          setEnergikj(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikj(false);\n        }\n      }\n\n      if (selectsPart === \"energikcal\") {\n        console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n        if (nutrition.energikcal === \"\" || nutrition.energikcal < 0) {\n          console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n          setEnergikcal(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikcal(false);\n        }\n      }\n\n      // repeat for each nutrition value...\n      if (nutrition.fett === \"\" || nutrition.fett < 0) {\n        setFett(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setFett(false);\n      }\n\n      if (nutrition.mettede === \"\" || nutrition.mettede < 0) {\n        setMettedeNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setMettedeNull(false);\n      }\n      if (nutrition.mettede > 2) {\n        setMettede(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setMettede(false);\n      }\n\n      // Check if the 'karbohydrat' input is missing or negative, and display an error message if necessary\n      if (nutrition.karbohydrat === \"\" || nutrition.karbohydrat < 0) {\n        setKarbohydrat(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKarbohydrat(false);\n      }\n\n      // Check if the 'hvoravSukkerarter' input is missing, negative or above the maximum allowed value (1),\n      // and display an error message if necessary\n      if (\n        nutrition.hvoravSukkerarter === \"\" ||\n        nutrition.hvoravSukkerarter < 0\n      ) {\n        setHvoravSukkerarterNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setHvoravSukkerarterNull(false);\n      }\n      if (nutrition.hvoravSukkerarter > 3) {\n        setHvoravSukkerarter(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setHvoravSukkerarter(false);\n      }\n\n      if (nutrition.kostfiber === \"\" || nutrition.kostfiber < 0) {\n        setKostfiber(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKostfiber(false);\n      }\n\n      if (nutrition.protein === \"\" || nutrition.protein < 0) {\n        setProtein(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setProtein(false);\n      }\n\n      if (nutrition.salt === \"\" || nutrition.salt < 0) {\n        setSaltNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setSaltNull(false);\n      }\n      if (nutrition.salt > 1) {\n        setSalt(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setSalt(false);\n      }\n    }\n\n    // Check for the \"LOW SUGARS\" claim\n    if (foodType === \"solid\" && parseFloat(nutrition.karbohydrat) <= 5) {\n      setLowSugars(true);\n    } else if (\n      foodType === \"liquid\" &&\n      parseFloat(nutrition.karbohydrat) <= 2.5\n    ) {\n      setLowSugars(true);\n    } else {\n      setLowSugars(false);\n    }\n\n    // Check the condition for the \"WITH NO ADDED SUGARS\" nutrition claim\n    if (nutrition.hvoravSukkerarter === \"0\" && nutrition.karbohydrat > 0) {\n      setWithNoAddedSugars(true);\n    } else {\n      setWithNoAddedSugars(false);\n    }\n  };\n\n  // create an array of energy units to select from\n  const selectUnit = [\n    {\n      value: \"energikj\",\n      label: \"(kj)\",\n    },\n    {\n      value: \"energikcal\",\n      label: \"(kcal)\",\n    },\n  ];\n\n  // Declare a state variable for the select dropdown.\n  const [selectsPart, setSelectPart] = useState(\"\");\n\n  // A function to handle changes to the select dropdown energy unit\n  const handlerPart = (event) => {\n    const inputVal = document.getElementsByName(event.value);\n    console.log(\"handlerPart ===\", event, nutrition, inputVal);\n    setSelectPart(event.value);\n  };\n\n  //create an array of food types to select from\n  const foodTypes = [\n    {\n      value: \"solid\",\n      label: \"Fast form\",\n    },\n    {\n      value: \"liquid\",\n      label: \"Flytende form\",\n    },\n  ];\n\n  return (\n    <div className=\"row\">\n      {/* This div creates a column layout for the left side of the table */}\n      <div className=\"col-md-6\">\n        {/* the selector (dropdown menu) for choosing the food type. */}\n        <div className=\"form-group\">\n          <label htmlFor=\"foodType\">Velg type matvare:</label>\n          <Select\n            className=\"form-control\"\n            id=\"foodType\"\n            options={foodTypes}\n            onChange={(e) => setFoodType(e.value)} // update the onFoodTypeChange function to directly set the food type state\n            placeholder=\"Velg type matvare\"\n          />\n        </div>\n\n        <h5>\n          Næringsinnhold per 100{\" \"}\n          {foodType === \"solid\" ? \"g\" : foodType === \"liquid\" ? \"ml\" : \"g/ml\"}\n        </h5>\n\n        {/* This div adds a light background color to the table */}\n        <div className=\"bg-light\">\n          {/* This table shows the nutritional information */}\n          <table className=\"table table-striped\">\n            {/* The table header */}\n            <thead>\n              <tr>\n                <th scope=\"col\" className=\"table-font\">\n                  Energi eller næringsstoff\n                </th>\n                <th scope=\"col\" className=\"table-font\">\n                  Mengde\n                </th>\n              </tr>\n            </thead>\n\n            {/* The table body */}\n            <tbody>\n              {/* This row shows the energy content */}\n              <tr className={(energikj, energikcal ? \"alert-box\" : null)}>\n                <th scope=\"row\" className=\"table-font\">\n                  {/* An icon with a tooltip to indicate missing values in energy parameters */}\n                  {energikj && energikcal ? (\n                    <Tooltip\n                      title=\"Mangler verdi i energi (kJ/Kcal) parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  {/* This div displays the energy label and unit */}\n                  <div className=\"row\">\n                    <div className=\"col-md-3\">\n                      <label for=\"energiunit\" class=\"form-label\">\n                        Energi\n                      </label>\n                    </div>\n                    {/* A dropdown menu for selecting the energy unit */}\n                    <div className=\"col-md-6\">\n                      <Select\n                        placeholder={<div>Velg enhet</div>}\n                        className=\"form-select-md mb-3\"\n                        options={selectUnit}\n                        onChange={(e) => handlerPart(e)}\n                      />\n                    </div>\n                  </div>\n                </th>\n                {/* An input field for entering the energy value */}\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name={selectsPart}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n              {/* Additional rows for other nutrient selections */}\n              {/* This row shows the fat content */}\n\n              <tr className={fett ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {fett ? (\n                    <Tooltip\n                      title=\"Mangler verdi i fett parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Fett (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"fett\"\n                    value={nutrition.fett}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the saturated fat content */}\n              <tr\n                className={\n                  mettede\n                    ? \"alert-box\"\n                    : null || mettedeNull\n                    ? \"alert-box\"\n                    : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {mettede ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden mettede fettsyrer. Mengden på mettede fettsyrer må være  høyst enn eller lik 2 / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {mettedeNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i mettede fettsyrer parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Mettede fettsyrer (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"mettede\"\n                    value={nutrition.mettede}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the carbohydrate (total sugars)content */}\n              <tr className={karbohydrat ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {/* If the \"karbohydrat\" value is missing, display an exclamation icon with a tooltip */}\n                  {karbohydrat ? (\n                    <Tooltip\n                      title=\"Mangler verdi i karbohydrat parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Karbohydrat (g)\n                </th>\n                {/* Input field for \"karbohydrat\" value */}\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"karbohydrat\"\n                    value={nutrition.karbohydrat}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows hvorav tilsatte sukkerarter (added sugars)content */}\n              <tr\n                className={\n                  hvoravSukkerarter\n                    ? \"alert-box\"\n                    : null || hvoravSukkerarterNull\n                    ? \"alert-box\"\n                    : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {/* If the \"hvoravSukkerarter\" value is too high, display a ban icon with a tooltip */}\n                  {hvoravSukkerarter ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden hvoravSukkerarter. Mengden på hvoravSukkerarter må være lavere enn eller lik 3 g/ 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {/* If the \"hvoravSukkerarter\" value is missing, display an exclamation icon with a tooltip */}\n                  {hvoravSukkerarterNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i hvorav sukkerarter parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Hvorav tilsatte sukkerarter (g)\n                </th>\n                {/* Input field for \"hvoravSukkerarter\" value */}\n\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"hvoravSukkerarter\"\n                    value={nutrition.hvoravSukkerarter}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows kostfiber content */}\n              <tr className={kostfiber ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {kostfiber ? (\n                    <Tooltip\n                      title=\"Mangler verdi i kostfiber parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Kostfiber (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"kostfiber\"\n                    value={nutrition.kostfiber}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the protein content */}\n              <tr className={protein ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {protein ? (\n                    <Tooltip\n                      title=\"Mangler verdi i protein parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Protein (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"protein\"\n                    value={nutrition.protein}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows salt content */}\n              <tr\n                className={\n                  salt ? \"alert-box\" : null || saltNull ? \"alert-box\" : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {salt ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden salt. Mengden på salt må være lavere enn eller lik 1 g/ 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {saltNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i salt parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Salt (g)\n                </th>\n                <td colSpan=\"2\">\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"salt\"\n                    value={nutrition.salt}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n\n        {/* Button that submits the form and calls the onClick function */}\n        <div className=\"col-12 button-div\">\n          <button\n            type=\"submit\"\n            className=\"btn btn-primary btn-lg button-search\"\n            onClick={onClick}\n          >\n            Beregn\n          </button>\n        </div>\n      </div>\n\n      <div className=\"col-md-6\">\n        {/* positive results nøkkelhullet container\" */}\n        {showNokkelhulletResults ? (\n          <div className=\"container nøkkelhullet-food-result-container\">\n            {/* An image with class \"keyhole-logo\" and alt text \"keyhole logo\" */}\n            <img\n              src={keyholeLgog}\n              className=\"keyhole-logo img-fluid\"\n              alt=\"keyhole logo\"\n            />\n            {/* A heading with text \"Nøkkelhullet\" */}\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir Nøkkelhullet. </p>\n              </div>\n              <div className=\"col-md-2\">\n                {/* FontAwesome icon with event listener to show the \"Nøkkelhullet\" information section */}\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  {/* A paragraph with a link to Lovdata's \"Forskrift om frivillig merking a nœringsmidler med Nokkellhullet\" */}\n                  <p>\n                    Les mer om hvilke krav det stilles for merking av\n                    Nokkellhullet på Lovdatas \"Forskrift om frivillig merking a\n                    nœringsmidler med Nokkellhullet\":\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  {/* FontAwesome icon with event listener to hide the \"Nøkkelhullet\" information section */}\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        ) : null}\n        {/*Negative results nøkkelhullet container\" */}\n        {showNokkelhulletResults === false && (\n          <div className=\"container nøkkelhullet-food-negResult-container\">\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir ikke Nøkkelhullet.</p>\n                {showEmptyResult ? (\n                  <p>** Obligatoriske næringsverdier kan ikke være tomme.</p>\n                ) : null}\n\n                {mettede ? (\n                  <p>** Mettede fettsyrer verdien kan være høyst 2 g/100 g</p>\n                ) : null}\n\n                {hvoravSukkerarter ? (\n                  <p>\n                    ** Tilsatte sukkerarter verdien kan være høyst 3 g/100 g.\n                  </p>\n                ) : null}\n\n                {salt ? <p>** Salt verdien kan være høyst 1 g/100 g.</p> : null}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om frivillig merking av næringsmidler med Nøkkelhullet:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for ernæringspåstander if there are all true results */}\n        {buttonClicked && (\n          <div\n            className={\n              lowSugars && withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-all\"\n                : !lowSugars && !withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-none\"\n                : \"container ernæringspåstander-food-result-container-some\"\n            }\n          >\n            <h5>Ernæringspåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                {/* Low sugars */}\n                {lowSugars ? (\n                  <div>\n                    <p>** Lavt sukkerinnhold:</p>\n                    <p>\n                      Dette produktet inneholder høyst 5 g sukkerarter per 100 g\n                      for næringsmidler i fast form, eller høyst 2,5 g\n                      sukkerarter per 100 ml for næringsmidler i flytende form\n                      og oppfyller kravet for \"Lavt sukkerinnhold\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Lavt sukkerinnhold\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        For faste næringsmidler, sukkerinnholdet må være høyst 5\n                        g per 100 g.\n                      </li>\n                      <li>\n                        For flytende næringsmidler, sukkerinnholdet må være\n                        høyst 2,5 g per 100 ml.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n\n                {/* No added sugars */}\n                {withNoAddedSugars ? (\n                  <div>\n                    <p>** Uten tilsatt sukker:</p>\n                    <p>\n                      Dette produktet er ikke tilsatt monosakkarider,\n                      disakkarider eller andre næringsmidler på grunn av deres\n                      søtende egenskaper og oppfyller kravet for \"Uten tilsatt\n                      sukker\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Uten tilsatt sukker\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        Produktet må ikke være tilsatt monosakkarider,\n                        disakkarider eller andre næringsmidler på grunn av deres\n                        søtende egenskaper.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"ernaerings\")}\n                />\n              </div>\n            </div>\n            {infoErnaerings ? (\n              // Information section for \"Ernæringspåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"ernaerings\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for Helsepåstander results  */}\n        {showHelsepåstander && (\n          <div\n            className=\"container helsepåstander-food-result-container\"\n            style={{ background: \"#f2f0b5\" }}\n          >\n            <h5>Helsepåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Under utvikling. </p>\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"helsepåstander\")}\n                />\n              </div>\n            </div>\n            {infoHelsepåstander ? (\n              // Information section for \"Helsepåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"helsepåstander\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"15px\" }}></div>\n        {/* conditional rendering for the buttons using showButtons state */}\n        {showButtons && (\n          <div className=\"d-flex justify-content-between\">\n            {/* Save button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-save\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Lagre produkt\n            </button>\n\n            {/* Share button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-share\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Del produkt\n            </button>\n\n            {/* Add a new product button */}\n            <button\n              className=\"btn btn-primary\"\n              onClick={() => window.location.reload()}\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-plus\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Legg til et nytt produkt\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Kategori28;\n","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Kategori29.js",["523","524","525","526"],[],"import React from \"react\";\nimport { useState, useEffect } from \"react\"; // import the useState and useeffect hook.\nimport { faCircleExclamation } from \"@fortawesome/free-solid-svg-icons\"; // import an icon.\nimport { faBan } from \"@fortawesome/free-solid-svg-icons\";\nimport { faSave, faShare, faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"; // import FontAwesomeIcon component.\nimport Tooltip from \"@mui/material/Tooltip\"; // import Tooltip component.\nimport keyholeLgog from \"./circle-keyhole-logo.png\"; // import an image\nimport { faCircleInfo } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport { faXmarkCircle } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport Select from \"react-select\"; // import Select component\n\nconst Kategori29 = () => {\n  // State variables for showing/hiding results and empty result message\n  const [showNokkelhulletResults, setShowNokkelhulletResults] = useState(null);\n  const [showErnaeringsResults, setShowErnaeringsResults] = useState(null);\n  const [showHelsepåstander, setShowHelsepåstander] = useState(null);\n  const [showEmptyResult, setShowEmptyResult] = useState(\"\"); // initialize state variable for showing empty result message.\n\n  //state variable to store the user's food type selection (solid or liquid) and the low sugars claim result\n  const [foodType, setFoodType] = useState(\"\");\n  const [lowSugars, setLowSugars] = useState(null);\n\n  //state variable to track whether the product meets the WITH NO ADDED SUGARS claim or not\n  const [withNoAddedSugars, setWithNoAddedSugars] = useState(false);\n\n  // State variable for tracking if the button is clicked\n  const [buttonClicked, setButtonClicked] = useState(false);\n\n  // useEffect hook for checking the condition for the \"WITH NO ADDED SUGARS\" claim when button is clicked\n  useEffect(() => {\n    if (buttonClicked) {\n      if (withNoAddedSugars) {\n        setShowErnaeringsResults(true);\n      } else {\n        setShowErnaeringsResults(false);\n      }\n    }\n  }, [withNoAddedSugars, buttonClicked]);\n\n  //state for controlling the buttons' visibility\n  const [showButtons, setShowButtons] = useState(false);\n\n  // State variables to control the visibility of the information sections\n  const [infoNokkelhullet, setInfoNokkelhullet] = useState(false);\n  const [infoErnaerings, setInfoErnaerings] = useState(false);\n  const [infoHelsepåstander, setInfoHelsepåstander] = useState(false);\n\n  // Function to show an information section based on the container parameter\n  const onClickInfo = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(true);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(true);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(true);\n    }\n  };\n\n  // Function to hide an information section based on the container parameter\n  const onClickClose = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(false);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(false);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(false);\n    }\n  };\n\n  // State variables for handling input fields and validation errors\n  const [energikj, setEnergikj] = useState(false);\n  const [energikcal, setEnergikcal] = useState(false);\n\n  const [mettede, setMettede] = useState(false);\n  const [mettedeNull, setMettedeNull] = useState(false);\n  const [fett, setFett] = useState(false);\n  const [protein, setProtein] = useState(false);\n  const [karbohydrat, setKarbohydrat] = useState(false);\n  const [hvoravSukkerarter, setHvoravSukkerarter] = useState(false);\n  const [hvoravSukkerarterNull, setHvoravSukkerarterNull] = useState(false);\n  const [kostfiber, setKostfiber] = useState(false);\n  const [salt, setSalt] = useState(false);\n  const [saltNull, setSaltNull] = useState(false);\n\n  // State variable for storing nutrition information entered by user\n  const [nutrition, setNutrition] = useState({\n    energikj: \"\",\n    energikcal: \"\",\n    mettede: \"\",\n    fett: \"\",\n    protein: \"\",\n    karbohydrat: \"\",\n    hvoravSukkerarter: \"\",\n    kostfiber: \"\",\n    salt: \"\",\n  });\n\n  // Handler for updating nutrition state/state variable based on input field changes/input values\n  const changeHandle = (event) => {\n    console.log(\"changeHandle ===\", event.target, event.target.value);\n    setNutrition({\n      ...nutrition,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  // define function to handle form submission\n  const onClick = (e) => {\n    e.preventDefault();\n    setButtonClicked(true);\n    setShowHelsepåstander(true);\n    setShowButtons(true);\n\n    console.log(\"onclick ===\", selectsPart, nutrition);\n\n    // Check if all required fields are filled out and within valid ranges\n    // The if statement checks if all required inputs are non-empty and meet the nutritional requirements\n    if (\n      nutrition.mettede !== \"\" &&\n      nutrition.mettede <= 2 &&\n      nutrition.fett !== \"\" &&\n      nutrition.protein !== \"\" &&\n      nutrition.karbohydrat !== \"\" &&\n      nutrition.hvoravSukkerarter !== \"\" &&\n      nutrition.hvoravSukkerarter <= 3 &&\n      nutrition.kostfiber !== \"\" &&\n      nutrition.salt !== \"\" &&\n      nutrition.salt <= 0.9\n    ) {\n      // If all requirements are met, display the nutrition results\n      setShowNokkelhulletResults(true);\n      // Hide any empty result messages or error messages\n      setShowEmptyResult(false);\n\n      // Check if the user selected \"energikj\" and if nutrition input lable of \"energikj\" is not empty\n      if (selectsPart === \"energikj\" && nutrition.energikj !== \"\") {\n        setEnergikj(false);\n      }\n\n      // Check if the user selected \"energikcal\" and if nutrition input lable of \"energikcal\" is not empty\n      if (selectsPart === \"energikcal\" && nutrition.energikcal !== \"\") {\n        setEnergikcal(false);\n      }\n      // Reset all input validation errors\n      setFett(false);\n      setMettede(false);\n      setMettedeNull(false);\n      setKarbohydrat(false);\n      setHvoravSukkerarter(false);\n      setHvoravSukkerarterNull(false);\n      setKostfiber(false);\n      setProtein(false);\n      setSalt(false);\n      setSaltNull(false);\n\n      // If the user has not selected any nutrients, set errors accordingly\n      // Check each nutrition value to see if it is missing or negative\n      // show input validation errors if any input is missing or negative.\n    } else {\n      if (selectsPart === \"energikj\") {\n        console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n        if (nutrition.energikj === \"\" || nutrition.energikj < 0) {\n          console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n          setEnergikj(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikj(false);\n        }\n      }\n\n      if (selectsPart === \"energikcal\") {\n        console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n        if (nutrition.energikcal === \"\" || nutrition.energikcal < 0) {\n          console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n          setEnergikcal(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikcal(false);\n        }\n      }\n\n      // repeat for each nutrition value...\n      if (nutrition.fett === \"\" || nutrition.fett < 0) {\n        setFett(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setFett(false);\n      }\n\n      if (nutrition.mettede === \"\" || nutrition.mettede < 0) {\n        setMettedeNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setMettedeNull(false);\n      }\n      if (nutrition.mettede > 2) {\n        setMettede(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setMettede(false);\n      }\n\n      // Check if the 'karbohydrat' input is missing or negative, and display an error message if necessary\n      if (nutrition.karbohydrat === \"\" || nutrition.karbohydrat < 0) {\n        setKarbohydrat(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKarbohydrat(false);\n      }\n\n      // Check if the 'hvoravSukkerarter' input is missing, negative or above the maximum allowed value (1),\n      // and display an error message if necessary\n      if (\n        nutrition.hvoravSukkerarter === \"\" ||\n        nutrition.hvoravSukkerarter < 0\n      ) {\n        setHvoravSukkerarterNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setHvoravSukkerarterNull(false);\n      }\n      if (nutrition.hvoravSukkerarter > 3) {\n        setHvoravSukkerarter(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setHvoravSukkerarter(false);\n      }\n\n      if (nutrition.kostfiber === \"\" || nutrition.kostfiber < 0) {\n        setKostfiber(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKostfiber(false);\n      }\n\n      if (nutrition.protein === \"\" || nutrition.protein < 0) {\n        setProtein(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setProtein(false);\n      }\n\n      if (nutrition.salt === \"\" || nutrition.salt < 0) {\n        setSaltNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setSaltNull(false);\n      }\n      if (nutrition.salt > 0.9) {\n        setSalt(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setSalt(false);\n      }\n    }\n\n    // Check for the \"LOW SUGARS\" claim\n    if (foodType === \"solid\" && parseFloat(nutrition.karbohydrat) <= 5) {\n      setLowSugars(true);\n    } else if (\n      foodType === \"liquid\" &&\n      parseFloat(nutrition.karbohydrat) <= 2.5\n    ) {\n      setLowSugars(true);\n    } else {\n      setLowSugars(false);\n    }\n\n    // Check the condition for the \"WITH NO ADDED SUGARS\" nutrition claim\n    if (nutrition.hvoravSukkerarter === \"0\" && nutrition.karbohydrat > 0) {\n      setWithNoAddedSugars(true);\n    } else {\n      setWithNoAddedSugars(false);\n    }\n  };\n\n  // create an array of energy units to select from\n  const selectUnit = [\n    {\n      value: \"energikj\",\n      label: \"(kj)\",\n    },\n    {\n      value: \"energikcal\",\n      label: \"(kcal)\",\n    },\n  ];\n\n  // Declare a state variable for the select dropdown.\n  const [selectsPart, setSelectPart] = useState(\"\");\n\n  // A function to handle changes to the select dropdown energy unit\n  const handlerPart = (event) => {\n    const inputVal = document.getElementsByName(event.value);\n    console.log(\"handlerPart ===\", event, nutrition, inputVal);\n    setSelectPart(event.value);\n  };\n\n  //create an array of food types to select from\n  const foodTypes = [\n    {\n      value: \"solid\",\n      label: \"Fast form\",\n    },\n    {\n      value: \"liquid\",\n      label: \"Flytende form\",\n    },\n  ];\n\n  return (\n    <div className=\"row\">\n      {/* This div creates a column layout for the left side of the table */}\n      <div className=\"col-md-6\">\n        {/* the selector (dropdown menu) for choosing the food type. */}\n        <div className=\"form-group\">\n          <label htmlFor=\"foodType\">Velg type matvare:</label>\n          <Select\n            className=\"form-control\"\n            id=\"foodType\"\n            options={foodTypes}\n            onChange={(e) => setFoodType(e.value)} // update the onFoodTypeChange function to directly set the food type state\n            placeholder=\"Velg type matvare\"\n          />\n        </div>\n\n        <h5>\n          Næringsinnhold per 100{\" \"}\n          {foodType === \"solid\" ? \"g\" : foodType === \"liquid\" ? \"ml\" : \"g/ml\"}\n        </h5>\n\n        {/* This div adds a light background color to the table */}\n        <div className=\"bg-light\">\n          {/* This table shows the nutritional information */}\n          <table className=\"table table-striped\">\n            {/* The table header */}\n            <thead>\n              <tr>\n                <th scope=\"col\" className=\"table-font\">\n                  Energi eller næringsstoff\n                </th>\n                <th scope=\"col\" className=\"table-font\">\n                  Mengde\n                </th>\n              </tr>\n            </thead>\n\n            {/* The table body */}\n            <tbody>\n              {/* This row shows the energy content */}\n              <tr className={(energikj, energikcal ? \"alert-box\" : null)}>\n                <th scope=\"row\" className=\"table-font\">\n                  {/* An icon with a tooltip to indicate missing values in energy parameters */}\n                  {energikj && energikcal ? (\n                    <Tooltip\n                      title=\"Mangler verdi i energi (kJ/Kcal) parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  {/* This div displays the energy label and unit */}\n                  <div className=\"row\">\n                    <div className=\"col-md-3\">\n                      <label for=\"energiunit\" class=\"form-label\">\n                        Energi\n                      </label>\n                    </div>\n                    {/* A dropdown menu for selecting the energy unit */}\n                    <div className=\"col-md-6\">\n                      <Select\n                        placeholder={<div>Velg enhet</div>}\n                        className=\"form-select-md mb-3\"\n                        options={selectUnit}\n                        onChange={(e) => handlerPart(e)}\n                      />\n                    </div>\n                  </div>\n                </th>\n                {/* An input field for entering the energy value */}\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name={selectsPart}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n              {/* Additional rows for other nutrient selections */}\n              {/* This row shows the fat content */}\n\n              <tr className={fett ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {fett ? (\n                    <Tooltip\n                      title=\"Mangler verdi i fett parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Fett (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"fett\"\n                    value={nutrition.fett}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the saturated fat content */}\n              <tr\n                className={\n                  mettede\n                    ? \"alert-box\"\n                    : null || mettedeNull\n                    ? \"alert-box\"\n                    : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {mettede ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden mettede fettsyrer. Mengden på mettede fettsyrer må være  høyst enn eller lik 2 / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {mettedeNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i mettede fettsyrer parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Mettede fettsyrer (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"mettede\"\n                    value={nutrition.mettede}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the carbohydrate (total sugars)content */}\n              <tr className={karbohydrat ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {/* If the \"karbohydrat\" value is missing, display an exclamation icon with a tooltip */}\n                  {karbohydrat ? (\n                    <Tooltip\n                      title=\"Mangler verdi i karbohydrat parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Karbohydrat (g)\n                </th>\n                {/* Input field for \"karbohydrat\" value */}\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"karbohydrat\"\n                    value={nutrition.karbohydrat}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows hvorav tilsatte sukkerarter (added sugars)content */}\n              <tr\n                className={\n                  hvoravSukkerarter\n                    ? \"alert-box\"\n                    : null || hvoravSukkerarterNull\n                    ? \"alert-box\"\n                    : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {/* If the \"hvoravSukkerarter\" value is too high, display a ban icon with a tooltip */}\n                  {hvoravSukkerarter ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden hvoravSukkerarter. Mengden på hvoravSukkerarter må være lavere enn eller lik 3 g/ 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {/* If the \"hvoravSukkerarter\" value is missing, display an exclamation icon with a tooltip */}\n                  {hvoravSukkerarterNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i hvorav sukkerarter parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Hvorav tilsatte sukkerarter (g)\n                </th>\n                {/* Input field for \"hvoravSukkerarter\" value */}\n\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"hvoravSukkerarter\"\n                    value={nutrition.hvoravSukkerarter}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows kostfiber content */}\n              <tr className={kostfiber ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {kostfiber ? (\n                    <Tooltip\n                      title=\"Mangler verdi i kostfiber parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Kostfiber (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"kostfiber\"\n                    value={nutrition.kostfiber}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the protein content */}\n              <tr className={protein ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {protein ? (\n                    <Tooltip\n                      title=\"Mangler verdi i protein parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Protein (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"protein\"\n                    value={nutrition.protein}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows salt content */}\n              <tr\n                className={\n                  salt ? \"alert-box\" : null || saltNull ? \"alert-box\" : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {salt ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden salt. Mengden på salt må være lavere enn eller lik 0.9 g/ 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {saltNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i salt parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Salt (g)\n                </th>\n                <td colSpan=\"2\">\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"salt\"\n                    value={nutrition.salt}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n\n        {/* Button that submits the form and calls the onClick function */}\n        <div className=\"col-12 button-div\">\n          <button\n            type=\"submit\"\n            className=\"btn btn-primary btn-lg button-search\"\n            onClick={onClick}\n          >\n            Beregn\n          </button>\n        </div>\n      </div>\n\n      <div className=\"col-md-6\">\n        {/* positive results nøkkelhullet container\" */}\n        {showNokkelhulletResults ? (\n          <div className=\"container nøkkelhullet-food-result-container\">\n            {/* An image with class \"keyhole-logo\" and alt text \"keyhole logo\" */}\n            <img\n              src={keyholeLgog}\n              className=\"keyhole-logo img-fluid\"\n              alt=\"keyhole logo\"\n            />\n            {/* A heading with text \"Nøkkelhullet\" */}\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir Nøkkelhullet. </p>\n              </div>\n              <div className=\"col-md-2\">\n                {/* FontAwesome icon with event listener to show the \"Nøkkelhullet\" information section */}\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  {/* A paragraph with a link to Lovdata's \"Forskrift om frivillig merking a nœringsmidler med Nokkellhullet\" */}\n                  <p>\n                    Les mer om hvilke krav det stilles for merking av\n                    Nokkellhullet på Lovdatas \"Forskrift om frivillig merking a\n                    nœringsmidler med Nokkellhullet\":\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  {/* FontAwesome icon with event listener to hide the \"Nøkkelhullet\" information section */}\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        ) : null}\n        {/*Negative results nøkkelhullet container\" */}\n        {showNokkelhulletResults === false && (\n          <div className=\"container nøkkelhullet-food-negResult-container\">\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir ikke Nøkkelhullet.</p>\n                {showEmptyResult ? (\n                  <p>** Obligatoriske næringsverdier kan ikke være tomme.</p>\n                ) : null}\n\n                {mettede ? (\n                  <p>** Mettede fettsyrer verdien kan være høyst 2 g/100 g</p>\n                ) : null}\n\n                {hvoravSukkerarter ? (\n                  <p>\n                    ** Tilsatte sukkerarter verdien kan være høyst 3 g/100 g.\n                  </p>\n                ) : null}\n\n                {salt ? (\n                  <p>** Salt verdien kan være høyst 0.9 g/100 g.</p>\n                ) : null}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om frivillig merking av næringsmidler med Nøkkelhullet:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for ernæringspåstander if there are all true results */}\n        {buttonClicked && (\n          <div\n            className={\n              lowSugars && withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-all\"\n                : !lowSugars && !withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-none\"\n                : \"container ernæringspåstander-food-result-container-some\"\n            }\n          >\n            <h5>Ernæringspåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                {/* Low sugars */}\n                {lowSugars ? (\n                  <div>\n                    <p>** Lavt sukkerinnhold:</p>\n                    <p>\n                      Dette produktet inneholder høyst 5 g sukkerarter per 100 g\n                      for næringsmidler i fast form, eller høyst 2,5 g\n                      sukkerarter per 100 ml for næringsmidler i flytende form\n                      og oppfyller kravet for \"Lavt sukkerinnhold\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Lavt sukkerinnhold\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        For faste næringsmidler, sukkerinnholdet må være høyst 5\n                        g per 100 g.\n                      </li>\n                      <li>\n                        For flytende næringsmidler, sukkerinnholdet må være\n                        høyst 2,5 g per 100 ml.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n\n                {/* No added sugars */}\n                {withNoAddedSugars ? (\n                  <div>\n                    <p>** Uten tilsatt sukker:</p>\n                    <p>\n                      Dette produktet er ikke tilsatt monosakkarider,\n                      disakkarider eller andre næringsmidler på grunn av deres\n                      søtende egenskaper og oppfyller kravet for \"Uten tilsatt\n                      sukker\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Uten tilsatt sukker\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        Produktet må ikke være tilsatt monosakkarider,\n                        disakkarider eller andre næringsmidler på grunn av deres\n                        søtende egenskaper.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"ernaerings\")}\n                />\n              </div>\n            </div>\n            {infoErnaerings ? (\n              // Information section for \"Ernæringspåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"ernaerings\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for Helsepåstander results  */}\n        {showHelsepåstander && (\n          <div\n            className=\"container helsepåstander-food-result-container\"\n            style={{ background: \"#f2f0b5\" }}\n          >\n            <h5>Helsepåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Under utvikling. </p>\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"helsepåstander\")}\n                />\n              </div>\n            </div>\n            {infoHelsepåstander ? (\n              // Information section for \"Helsepåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"helsepåstander\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"15px\" }}></div>\n        {/* conditional rendering for the buttons using showButtons state */}\n        {showButtons && (\n          <div className=\"d-flex justify-content-between\">\n            {/* Save button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-save\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Lagre produkt\n            </button>\n\n            {/* Share button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-share\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Del produkt\n            </button>\n\n            {/* Add a new product button */}\n            <button\n              className=\"btn btn-primary\"\n              onClick={() => window.location.reload()}\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-plus\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Legg til et nytt produkt\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Kategori29;\n","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Kategori31.js",["527","528","529","530"],[],"import React from \"react\";\nimport { useState, useEffect } from \"react\"; // import the useState and useeffect hook.\nimport { faCircleExclamation } from \"@fortawesome/free-solid-svg-icons\"; // import an icon.\nimport { faBan } from \"@fortawesome/free-solid-svg-icons\";\nimport { faSave, faShare, faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"; // import FontAwesomeIcon component.\nimport Tooltip from \"@mui/material/Tooltip\"; // import Tooltip component.\nimport keyholeLgog from \"./circle-keyhole-logo.png\"; // import an image\nimport { faCircleInfo } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport { faXmarkCircle } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport Select from \"react-select\"; // import Select component\n\nconst Kategori31 = () => {\n  // State variables for showing results and empty result message\n  const [showNokkelhulletResults, setShowNokkelhulletResults] = useState(null);\n  const [showErnaeringsResults, setShowErnaeringsResults] = useState(null);\n  const [showHelsepåstander, setShowHelsepåstander] = useState(null);\n  const [showEmptyResult, setShowEmptyResult] = useState(\"\"); // initialize state variable for showing empty result message.\n\n  //state variable to store the user's food type selection (solid or liquid) and the low sugars claim result\n  const [foodType, setFoodType] = useState(\"\");\n  const [lowSugars, setLowSugars] = useState(null);\n\n  //state variable to track whether the product meets the WITH NO ADDED SUGARS claim or not\n  const [withNoAddedSugars, setWithNoAddedSugars] = useState(false);\n\n  // State variable for tracking if the button is clicked\n  const [buttonClicked, setButtonClicked] = useState(false);\n\n  // useEffect hook for checking the condition for the \"WITH NO ADDED SUGARS\" claim when button is clicked\n  useEffect(() => {\n    if (buttonClicked) {\n      if (withNoAddedSugars) {\n        setShowErnaeringsResults(true);\n      } else {\n        setShowErnaeringsResults(false);\n      }\n    }\n  }, [withNoAddedSugars, buttonClicked]);\n\n  //state for controlling the buttons' visibility\n  const [showButtons, setShowButtons] = useState(false);\n\n  // State variables to control the visibility of the information sections\n  const [infoNokkelhullet, setInfoNokkelhullet] = useState(false);\n  const [infoErnaerings, setInfoErnaerings] = useState(false);\n  const [infoHelsepåstander, setInfoHelsepåstander] = useState(false);\n\n  // Function to show an information section based on the container parameter\n  const onClickInfo = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(true);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(true);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(true);\n    }\n  };\n\n  // Function to hide an information section based on the container parameter\n  const onClickClose = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(false);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(false);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(false);\n    }\n  };\n\n  // State variables for handling input fields and validation errors\n  const [energikj, setEnergikj] = useState(false);\n  const [energikcal, setEnergikcal] = useState(false);\n\n  const [fett, setFett] = useState(false);\n  const [mettede, setMettede] = useState(false);\n  const [mettedeNull, setMettedeNull] = useState(false);\n  const [karbohydrat, setKarbohydrat] = useState(false);\n  const [karbohydratNull, setKarbohydratNull] = useState(false);\n  const [hvoravSukkerarter, setHvoravSukkerarter] = useState(false);\n  const [kostfiber, setKostfiber] = useState(false);\n  const [protein, setProtein] = useState(false);\n  const [salt, setSalt] = useState(false);\n  const [saltNull, setSaltNull] = useState(false);\n\n  // State variable for storing nutrition information entered by user\n  const [nutrition, setNutrition] = useState({\n    energikj: \"\",\n    energikcal: \"\",\n    fett: \"\",\n    mettede: \"\",\n    karbohydrat: \"\",\n    hvoravSukkerarter: \"\",\n    kostfiber: \"\",\n    protein: \"\",\n    salt: \"\",\n  });\n\n  // Handler for updating nutrition state/state variable based on input field changes/input values\n  const changeHandle = (event) => {\n    console.log(\"changeHandle ===\", event.target, event.target.value);\n    setNutrition({\n      ...nutrition,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  // define function to handle form submission\n  const onClick = (e) => {\n    e.preventDefault();\n    setButtonClicked(true);\n    setShowHelsepåstander(true);\n    setShowButtons(true);\n\n    console.log(\"onclick ===\", selectsPart, nutrition);\n\n    // Check if all required fields are filled out and within valid ranges\n    // The if statement checks if all required inputs are non-empty and meet the nutritional requirements\n    if (\n      nutrition.fett !== \"\" &&\n      nutrition.mettede !== \"\" &&\n      nutrition.mettede <= nutrition.fett / 5 &&\n      nutrition.karbohydrat !== \"\" &&\n      nutrition.karbohydrat <= 5 &&\n      nutrition.hvoravSukkerarter !== \"\" &&\n      nutrition.kostfiber !== \"\" &&\n      nutrition.protein !== \"\" &&\n      nutrition.salt !== \"\" &&\n      nutrition.salt <= 0.8\n    ) {\n      // If all requirements are met, display the nutrition results\n      setShowNokkelhulletResults(true);\n      // Hide any empty result messages or error messages\n      setShowEmptyResult(false);\n\n      // Check if the user selected \"energikj\" and if nutrition input lable of \"energikj\" is not empty\n      if (selectsPart === \"energikj\" && nutrition.energikj !== \"\") {\n        setEnergikj(false);\n      }\n\n      // Check if the user selected \"energikcal\" and if nutrition input lable of \"energikcal\" is not empty\n      if (selectsPart === \"energikcal\" && nutrition.energikcal !== \"\") {\n        setEnergikcal(false);\n      }\n      // Reset all input validation errors\n      setFett(false);\n      setMettede(false);\n      setMettedeNull(false);\n      setKarbohydrat(false);\n      setKarbohydratNull(false);\n      setHvoravSukkerarter(false);\n      setKostfiber(false);\n      setProtein(false);\n      setSalt(false);\n      setSaltNull(false);\n      // If the user has not selected any nutrients, set errors accordingly\n      // Check each nutrition value to see if it is missing or negative\n      // show input validation errors if any input is missing or negative.\n    } else {\n      if (selectsPart === \"energikj\") {\n        console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n        if (nutrition.energikj === \"\" || nutrition.energikj < 0) {\n          console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n          setEnergikj(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikj(false);\n        }\n      }\n\n      if (selectsPart === \"energikcal\") {\n        console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n        if (nutrition.energikcal === \"\" || nutrition.energikcal < 0) {\n          console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n          setEnergikcal(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikcal(false);\n        }\n      }\n\n      // repeat for each nutrition value...\n      if (nutrition.fett === \"\" || nutrition.fett < 0) {\n        setFett(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setFett(false);\n      }\n\n      if (nutrition.mettede === \"\" || nutrition.mettede < 0) {\n        setMettedeNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setMettedeNull(false);\n      }\n      if (nutrition.mettede > nutrition.fett / 5) {\n        setMettede(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setMettede(false);\n      }\n\n      if (nutrition.karbohydrat === \"\" || nutrition.karbohydrat < 0) {\n        setKarbohydratNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKarbohydratNull(false);\n      }\n      if (nutrition.karbohydrat > 5) {\n        setKarbohydrat(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setKarbohydrat(false);\n      }\n\n      if (\n        nutrition.hvoravSukkerarter === \"\" ||\n        nutrition.hvoravSukkerarter < 0\n      ) {\n        setHvoravSukkerarter(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setHvoravSukkerarter(false);\n      }\n\n      if (nutrition.kostfiber === \"\" || nutrition.kostfiber < 0) {\n        setKostfiber(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKostfiber(false);\n      }\n\n      if (nutrition.protein === \"\" || nutrition.protein < 0) {\n        setProtein(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setProtein(false);\n      }\n\n      if (nutrition.salt === \"\" || nutrition.salt < 0) {\n        setSaltNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setSaltNull(false);\n      }\n      if (nutrition.salt > 0.8) {\n        setSalt(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setSalt(false);\n      }\n    }\n\n    // Check for the \"LOW SUGARS\" claim\n    if (foodType === \"solid\" && parseFloat(nutrition.karbohydrat) <= 5) {\n      setLowSugars(true);\n    } else if (\n      foodType === \"liquid\" &&\n      parseFloat(nutrition.karbohydrat) <= 2.5\n    ) {\n      setLowSugars(true);\n    } else {\n      setLowSugars(false);\n    }\n\n    // Check the condition for the \"WITH NO ADDED SUGARS\" nutrition claim\n    if (nutrition.hvoravSukkerarter === \"0\" && nutrition.karbohydrat > 0) {\n      setWithNoAddedSugars(true);\n    } else {\n      setWithNoAddedSugars(false);\n    }\n  };\n\n  // create an array of energy units to select from\n  const selectUnit = [\n    {\n      value: \"energikj\",\n      label: \"(kj)\",\n    },\n    {\n      value: \"energikcal\",\n      label: \"(kcal)\",\n    },\n  ];\n\n  // Declare a state variable for the select dropdown.\n  const [selectsPart, setSelectPart] = useState(\"\");\n\n  // A function to handle changes to the select dropdown energy unit\n  const handlerPart = (event) => {\n    const inputVal = document.getElementsByName(event.value);\n    console.log(\"handlerPart ===\", event, nutrition, inputVal);\n    setSelectPart(event.value);\n  };\n\n  //create an array of food types to select from\n  const foodTypes = [\n    {\n      value: \"solid\",\n      label: \"Fast form\",\n    },\n    {\n      value: \"liquid\",\n      label: \"Flytende form\",\n    },\n  ];\n\n  return (\n    <div className=\"row\">\n      {/* This div creates a column layout for the left side of the table */}\n      <div className=\"col-md-6\">\n        {/* the selector (dropdown menu) for choosing the food type. */}\n        <div className=\"form-group\">\n          <label htmlFor=\"foodType\">Velg type matvare:</label>\n          <Select\n            className=\"form-control\"\n            id=\"foodType\"\n            options={foodTypes}\n            onChange={(e) => setFoodType(e.value)} // update the onFoodTypeChange function to directly set the food type state\n            placeholder=\"Velg type matvare\"\n          />\n        </div>\n\n        <h5>\n          Næringsinnhold per 100{\" \"}\n          {foodType === \"solid\" ? \"g\" : foodType === \"liquid\" ? \"ml\" : \"g/ml\"}\n        </h5>\n\n        {/* This div adds a light background color to the table */}\n        <div className=\"bg-light\">\n          {/* This table shows the nutritional information */}\n          <table className=\"table table-striped\">\n            {/* The table header */}\n            <thead>\n              <tr>\n                <th scope=\"col\" className=\"table-font\">\n                  Energi eller næringsstoff\n                </th>\n                <th scope=\"col\" className=\"table-font\">\n                  Mengde\n                </th>\n              </tr>\n            </thead>\n\n            {/* The table body */}\n            <tbody>\n              {/* This row shows the energy content */}\n              <tr className={(energikj, energikcal ? \"alert-box\" : null)}>\n                <th scope=\"row\" className=\"table-font\">\n                  {/* An icon with a tooltip to indicate missing values in energy parameters */}\n                  {energikj && energikcal ? (\n                    <Tooltip\n                      title=\"Mangler verdi i energi (kJ/Kcal) parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  {/* This div displays the energy label and unit */}\n                  <div className=\"row\">\n                    <div className=\"col-md-3\">\n                      <label for=\"energiunit\" class=\"form-label\">\n                        Energi\n                      </label>\n                    </div>\n                    {/* A dropdown menu for selecting the energy unit */}\n                    <div className=\"col-md-6\">\n                      <Select\n                        placeholder={<div>Velg enhet</div>}\n                        className=\"form-select-md mb-3\"\n                        options={selectUnit}\n                        onChange={(e) => handlerPart(e)}\n                      />\n                    </div>\n                  </div>\n                </th>\n                {/* An input field for entering the energy value */}\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name={selectsPart}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* Additional rows for other nutrient selections */}\n              {/* This row shows the fat content */}\n              <tr className={fett ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {fett ? (\n                    <Tooltip\n                      title=\"Mangler verdi i fett parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Fett (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"fett\"\n                    value={nutrition.fett}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the saturated fat content */}\n              <tr\n                className={\n                  mettede\n                    ? \"alert-box\"\n                    : null || mettedeNull\n                    ? \"alert-box\"\n                    : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {mettede ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden mettede fettsyrer. Mengden på mettede fettsyrer må være  høyst høyst 20 % av fettinnholdet / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {mettedeNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i mettede fettsyrer parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Mettede fettsyrer (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"mettede\"\n                    value={nutrition.mettede}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the carbohydrate content */}\n              <tr\n                className={\n                  karbohydrat\n                    ? \"alert-box\"\n                    : null || karbohydratNull\n                    ? \"alert-box\"\n                    : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {karbohydrat ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden sukkerarter. Mengden på sukkerarter må være lavere enn eller lik 5 g / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {karbohydratNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i karbohydrat parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Karbohydrat (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"karbohydrat\"\n                    value={nutrition.karbohydrat}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows hvorav sukkerarter content */}\n              <tr className={hvoravSukkerarter ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {hvoravSukkerarter ? (\n                    <Tooltip\n                      title=\"Mangler verdi i hvorav sukkerarter parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Hvorav tilsatte sukkerarter (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"hvoravSukkerarter\"\n                    value={nutrition.hvoravSukkerarter}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows kostfiber content */}\n              <tr className={kostfiber ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {kostfiber ? (\n                    <Tooltip\n                      title=\"Mangler verdi i kostfiber parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Kostfiber (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"kostfiber\"\n                    value={nutrition.kostfiber}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the protein content */}\n              <tr className={protein ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {protein ? (\n                    <Tooltip\n                      title=\"Mangler verdi i protein parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Protein (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"protein\"\n                    value={nutrition.protein}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows salt content */}\n              <tr\n                className={\n                  salt ? \"alert-box\" : null || saltNull ? \"alert-box\" : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {salt ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden salt. Mengden på salt må være lavere enn eller lik 0.8 g/ 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {saltNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i salt parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Salt (g)\n                </th>\n                <td colSpan=\"2\">\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"salt\"\n                    value={nutrition.salt}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n\n        {/* Button that submits the form and calls the onClick function */}\n        <div className=\"col-12 button-div\">\n          <button\n            type=\"submit\"\n            className=\"btn btn-primary btn-lg button-search\"\n            onClick={onClick}\n          >\n            Beregn\n          </button>\n        </div>\n      </div>\n\n      <div className=\"col-md-6\">\n        {/* positive results nøkkelhullet container\" */}\n        {showNokkelhulletResults ? (\n          <div className=\"container nøkkelhullet-food-result-container\">\n            {/* An image with class \"keyhole-logo\" and alt text \"keyhole logo\" */}\n            <img\n              src={keyholeLgog}\n              className=\"keyhole-logo img-fluid\"\n              alt=\"keyhole logo\"\n            />\n            {/* A heading with text \"Nøkkelhullet\" */}\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir Nøkkelhullet. </p>\n              </div>\n              <div className=\"col-md-2\">\n                {/* FontAwesome icon with event listener to show the \"Nøkkelhullet\" information section */}\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  {/* A paragraph with a link to Lovdata's \"Forskrift om frivillig merking a nœringsmidler med Nokkellhullet\" */}\n                  <p>\n                    Les mer om hvilke krav det stilles for merking av\n                    Nokkellhullet på Lovdatas \"Forskrift om frivillig merking a\n                    nœringsmidler med Nokkellhullet\":\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  {/* FontAwesome icon with event listener to hide the \"Nøkkelhullet\" information section */}\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        ) : null}\n        {/*Negative results nøkkelhullet container\" */}\n        {showNokkelhulletResults === false && (\n          <div className=\"container nøkkelhullet-food-negResult-container\">\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir ikke Nøkkelhullet.</p>\n                {showEmptyResult ? (\n                  <p>** Obligatoriske næringsverdier kan ikke være tomme.</p>\n                ) : null}\n\n                {mettede ? (\n                  <p>\n                    ** Mettede fettsyrer verdien kan være høyst 20 % av\n                    fettinnholdet /100 g\n                  </p>\n                ) : null}\n\n                {karbohydrat ? (\n                  <p>** Sukkerarter verdien kan være høyst 5 g/100 g.</p>\n                ) : null}\n\n                {salt ? (\n                  <p>** Salt verdien kan være høyst 0.8 g/100 g.</p>\n                ) : null}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om frivillig merking av næringsmidler med Nøkkelhullet:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for ernæringspåstander if there are all true results */}\n        {buttonClicked && (\n          <div\n            className={\n              lowSugars && withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-all\"\n                : !lowSugars && !withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-none\"\n                : \"container ernæringspåstander-food-result-container-some\"\n            }\n          >\n            <h5>Ernæringspåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                {/* Low sugars */}\n                {lowSugars ? (\n                  <div>\n                    <p>** Lavt sukkerinnhold:</p>\n                    <p>\n                      Dette produktet inneholder høyst 5 g sukkerarter per 100 g\n                      for næringsmidler i fast form, eller høyst 2,5 g\n                      sukkerarter per 100 ml for næringsmidler i flytende form\n                      og oppfyller kravet for \"Lavt sukkerinnhold\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Lavt sukkerinnhold\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        For faste næringsmidler, sukkerinnholdet må være høyst 5\n                        g per 100 g.\n                      </li>\n                      <li>\n                        For flytende næringsmidler, sukkerinnholdet må være\n                        høyst 2,5 g per 100 ml.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n\n                {/* No added sugars */}\n                {withNoAddedSugars ? (\n                  <div>\n                    <p>** Uten tilsatt sukker:</p>\n                    <p>\n                      Dette produktet er ikke tilsatt monosakkarider,\n                      disakkarider eller andre næringsmidler på grunn av deres\n                      søtende egenskaper og oppfyller kravet for \"Uten tilsatt\n                      sukker\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Uten tilsatt sukker\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        Produktet må ikke være tilsatt monosakkarider,\n                        disakkarider eller andre næringsmidler på grunn av deres\n                        søtende egenskaper.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"ernaerings\")}\n                />\n              </div>\n            </div>\n            {infoErnaerings ? (\n              // Information section for \"Ernæringspåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"ernaerings\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for Helsepåstander results  */}\n        {showHelsepåstander && (\n          <div\n            className=\"container helsepåstander-food-result-container\"\n            style={{ background: \"#f2f0b5\" }}\n          >\n            <h5>Helsepåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Under utvikling. </p>\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"helsepåstander\")}\n                />\n              </div>\n            </div>\n            {infoHelsepåstander ? (\n              // Information section for \"Helsepåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"helsepåstander\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"15px\" }}></div>\n        {/* conditional rendering for the buttons using showButtons state */}\n        {showButtons && (\n          <div className=\"d-flex justify-content-between\">\n            {/* Save button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-save\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Lagre produkt\n            </button>\n\n            {/* Share button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-share\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Del produkt\n            </button>\n\n            {/* Add a new product button */}\n            <button\n              className=\"btn btn-primary\"\n              onClick={() => window.location.reload()}\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-plus\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Legg til et nytt produkt\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Kategori31;\n","/Users/annabatzeri/Desktop/Nøkkelhulet/src/Kategori32.js",["531","532","533","534"],[],"import React from \"react\";\nimport { useState, useEffect } from \"react\"; // import the useState and useeffect hook.\nimport { faCircleExclamation } from \"@fortawesome/free-solid-svg-icons\"; // import an icon.\nimport { faBan } from \"@fortawesome/free-solid-svg-icons\";\nimport { faSave, faShare, faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"; // import FontAwesomeIcon component.\nimport Tooltip from \"@mui/material/Tooltip\"; // import Tooltip component.\nimport keyholeLgog from \"./circle-keyhole-logo.png\"; // import an image\nimport { faCircleInfo } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport { faXmarkCircle } from \"@fortawesome/free-solid-svg-icons\"; // import an icon\nimport Select from \"react-select\"; // import Select component\n\nconst Kategori32 = () => {\n  // State variables for showing results and empty result message\n  const [showNokkelhulletResults, setShowNokkelhulletResults] = useState(null);\n  const [showErnaeringsResults, setShowErnaeringsResults] = useState(null);\n  const [showHelsepåstander, setShowHelsepåstander] = useState(null);\n  const [showEmptyResult, setShowEmptyResult] = useState(\"\"); // initialize state variable for showing empty result message.\n\n  //state variable to store the user's food type selection (solid or liquid) and the low sugars claim result\n  const [foodType, setFoodType] = useState(\"\");\n  const [lowSugars, setLowSugars] = useState(null);\n\n  //state variable to track whether the product meets the WITH NO ADDED SUGARS claim or not\n  const [withNoAddedSugars, setWithNoAddedSugars] = useState(false);\n\n  // State variable for tracking if the button is clicked\n  const [buttonClicked, setButtonClicked] = useState(false);\n\n  // useEffect hook for checking the condition for the \"WITH NO ADDED SUGARS\" claim when button is clicked\n  useEffect(() => {\n    if (buttonClicked) {\n      if (withNoAddedSugars) {\n        setShowErnaeringsResults(true);\n      } else {\n        setShowErnaeringsResults(false);\n      }\n    }\n  }, [withNoAddedSugars, buttonClicked]);\n\n  //state for controlling the buttons' visibility\n  const [showButtons, setShowButtons] = useState(false);\n\n  // State variables to control the visibility of the information sections\n  const [infoNokkelhullet, setInfoNokkelhullet] = useState(false);\n  const [infoErnaerings, setInfoErnaerings] = useState(false);\n  const [infoHelsepåstander, setInfoHelsepåstander] = useState(false);\n\n  // Function to show an information section based on the container parameter\n  const onClickInfo = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(true);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(true);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(true);\n    }\n  };\n\n  // Function to hide an information section based on the container parameter\n  const onClickClose = (container) => {\n    if (container === \"nokkelhullet\") {\n      setInfoNokkelhullet(false);\n    } else if (container === \"ernaerings\") {\n      setInfoErnaerings(false);\n    } else if (container === \"helsepåstander\") {\n      setInfoHelsepåstander(false);\n    }\n  };\n\n  // State variables for handling input fields and validation errors\n  const [energikj, setEnergikj] = useState(false);\n  const [energikcal, setEnergikcal] = useState(false);\n\n  const [fett, setFett] = useState(false);\n  const [fettNull, setFettNull] = useState(false);\n  const [mettede, setMettede] = useState(false);\n  const [mettedeNull, setMettedeNull] = useState(false);\n  const [karbohydrat, setKarbohydrat] = useState(false);\n  const [karbohydratNull, setKarbohydratNull] = useState(false);\n  const [hvoravSukkerarter, setHvoravSukkerarter] = useState(false);\n  const [kostfiber, setKostfiber] = useState(false);\n  const [protein, setProtein] = useState(false);\n  const [salt, setSalt] = useState(false);\n  const [saltNull, setSaltNull] = useState(false);\n\n  // State variable for storing nutrition information entered by user\n  const [nutrition, setNutrition] = useState({\n    energikj: \"\",\n    energikcal: \"\",\n    fett: \"\",\n    mettede: \"\",\n    karbohydrat: \"\",\n    hvoravSukkerarter: \"\",\n    kostfiber: \"\",\n    protein: \"\",\n    salt: \"\",\n  });\n\n  // Handler for updating nutrition state/state variable based on input field changes/input values\n  const changeHandle = (event) => {\n    console.log(\"changeHandle ===\", event.target, event.target.value);\n    setNutrition({\n      ...nutrition,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  // define function to handle form submission\n  const onClick = (e) => {\n    e.preventDefault();\n    setButtonClicked(true);\n    setShowHelsepåstander(true);\n    setShowButtons(true);\n\n    console.log(\"onclick ===\", selectsPart, nutrition);\n\n    // Check if all required fields are filled out and within valid ranges\n    // The if statement checks if all required inputs are non-empty and meet the nutritional requirements\n    if (\n      nutrition.fett !== \"\" &&\n      nutrition.fett <= 5 &&\n      nutrition.mettede !== \"\" &&\n      nutrition.mettede <= 1.65 &&\n      nutrition.karbohydrat !== \"\" &&\n      nutrition.karbohydrat <= 5 &&\n      nutrition.hvoravSukkerarter !== \"\" &&\n      nutrition.kostfiber !== \"\" &&\n      nutrition.protein !== \"\" &&\n      nutrition.salt !== \"\" &&\n      nutrition.salt <= 0.8\n    ) {\n      // If all requirements are met, display the nutrition results\n      setShowNokkelhulletResults(true);\n      // Hide any empty result messages or error messages\n      setShowEmptyResult(false);\n\n      // Check if the user selected \"energikj\" and if nutrition input lable of \"energikj\" is not empty\n      if (selectsPart === \"energikj\" && nutrition.energikj !== \"\") {\n        setEnergikj(false);\n      }\n\n      // Check if the user selected \"energikcal\" and if nutrition input lable of \"energikcal\" is not empty\n      if (selectsPart === \"energikcal\" && nutrition.energikcal !== \"\") {\n        setEnergikcal(false);\n      }\n      // Reset all input validation errors\n      setFett(false);\n      setFettNull(false);\n      setMettede(false);\n      setMettedeNull(false);\n      setKarbohydrat(false);\n      setKarbohydratNull(false);\n      setHvoravSukkerarter(false);\n      setKostfiber(false);\n      setProtein(false);\n      setSalt(false);\n      setSaltNull(false);\n      // If the user has not selected any nutrients, set errors accordingly\n      // Check each nutrition value to see if it is missing or negative\n      // show input validation errors if any input is missing or negative.\n    } else {\n      if (selectsPart === \"energikj\") {\n        console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n        if (nutrition.energikj === \"\" || nutrition.energikj < 0) {\n          console.log(\"energikj ===\", selectsPart, nutrition.energikj);\n          setEnergikj(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikj(false);\n        }\n      }\n\n      if (selectsPart === \"energikcal\") {\n        console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n        if (nutrition.energikcal === \"\" || nutrition.energikcal < 0) {\n          console.log(\"energikcal ===\", selectsPart, nutrition.energikcal);\n          setEnergikcal(true);\n          setShowNokkelhulletResults(false);\n          setShowEmptyResult(true);\n        } else {\n          setEnergikcal(false);\n        }\n      }\n\n      // repeat for each nutrition value...\n      if (nutrition.fett === \"\" || nutrition.fett < 0) {\n        setFettNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setFettNull(false);\n      }\n      if (nutrition.fett > 5) {\n        setFett(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setFett(false);\n      }\n\n      if (nutrition.mettede === \"\" || nutrition.mettede < 0) {\n        setMettedeNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setMettedeNull(false);\n      }\n      if (nutrition.mettede > 1.65) {\n        setMettede(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setMettede(false);\n      }\n\n      if (nutrition.karbohydrat === \"\" || nutrition.karbohydrat < 0) {\n        setKarbohydratNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKarbohydratNull(false);\n      }\n      if (nutrition.karbohydrat > 5) {\n        setKarbohydrat(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setKarbohydrat(false);\n      }\n\n      if (\n        nutrition.hvoravSukkerarter === \"\" ||\n        nutrition.hvoravSukkerarter < 0\n      ) {\n        setHvoravSukkerarter(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setHvoravSukkerarter(false);\n      }\n\n      if (nutrition.kostfiber === \"\" || nutrition.kostfiber < 0) {\n        setKostfiber(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setKostfiber(false);\n      }\n\n      if (nutrition.protein === \"\" || nutrition.protein < 0) {\n        setProtein(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setProtein(false);\n      }\n\n      if (nutrition.salt === \"\" || nutrition.salt < 0) {\n        setSaltNull(true);\n        setShowNokkelhulletResults(false);\n        setShowEmptyResult(true);\n      } else {\n        setSaltNull(false);\n      }\n      if (nutrition.salt > 0.8) {\n        setSalt(true);\n        setShowNokkelhulletResults(false);\n      } else {\n        setSalt(false);\n      }\n    }\n\n    // Check for the \"LOW SUGARS\" claim\n    if (foodType === \"solid\" && parseFloat(nutrition.karbohydrat) <= 5) {\n      setLowSugars(true);\n    } else if (\n      foodType === \"liquid\" &&\n      parseFloat(nutrition.karbohydrat) <= 2.5\n    ) {\n      setLowSugars(true);\n    } else {\n      setLowSugars(false);\n    }\n\n    // Check the condition for the \"WITH NO ADDED SUGARS\" nutrition claim\n    if (nutrition.hvoravSukkerarter === \"0\" && nutrition.karbohydrat > 0) {\n      setWithNoAddedSugars(true);\n    } else {\n      setWithNoAddedSugars(false);\n    }\n  };\n\n  // create an array of energy units to select from\n  const selectUnit = [\n    {\n      value: \"energikj\",\n      label: \"(kj)\",\n    },\n    {\n      value: \"energikcal\",\n      label: \"(kcal)\",\n    },\n  ];\n\n  // Declare a state variable for the select dropdown.\n  const [selectsPart, setSelectPart] = useState(\"\");\n\n  // A function to handle changes to the select dropdown energy unit\n  const handlerPart = (event) => {\n    const inputVal = document.getElementsByName(event.value);\n    console.log(\"handlerPart ===\", event, nutrition, inputVal);\n    setSelectPart(event.value);\n  };\n\n  //create an array of food types to select from\n  const foodTypes = [\n    {\n      value: \"solid\",\n      label: \"Fast form\",\n    },\n    {\n      value: \"liquid\",\n      label: \"Flytende form\",\n    },\n  ];\n\n  return (\n    <div className=\"row\">\n      {/* This div creates a column layout for the left side of the table */}\n      <div className=\"col-md-6\">\n        {/* the selector (dropdown menu) for choosing the food type. */}\n        <div className=\"form-group\">\n          <label htmlFor=\"foodType\">Velg type matvare:</label>\n          <Select\n            className=\"form-control\"\n            id=\"foodType\"\n            options={foodTypes}\n            onChange={(e) => setFoodType(e.value)} // update the onFoodTypeChange function to directly set the food type state\n            placeholder=\"Velg type matvare\"\n          />\n        </div>\n\n        <h5>\n          Næringsinnhold per 100{\" \"}\n          {foodType === \"solid\" ? \"g\" : foodType === \"liquid\" ? \"ml\" : \"g/ml\"}\n        </h5>\n\n        {/* This div adds a light background color to the table */}\n        <div className=\"bg-light\">\n          {/* This table shows the nutritional information */}\n          <table className=\"table table-striped\">\n            {/* The table header */}\n            <thead>\n              <tr>\n                <th scope=\"col\" className=\"table-font\">\n                  Energi eller næringsstoff\n                </th>\n                <th scope=\"col\" className=\"table-font\">\n                  Mengde\n                </th>\n              </tr>\n            </thead>\n\n            {/* The table body */}\n            <tbody>\n              {/* This row shows the energy content */}\n              <tr className={(energikj, energikcal ? \"alert-box\" : null)}>\n                <th scope=\"row\" className=\"table-font\">\n                  {/* An icon with a tooltip to indicate missing values in energy parameters */}\n                  {energikj && energikcal ? (\n                    <Tooltip\n                      title=\"Mangler verdi i energi (kJ/Kcal) parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  {/* This div displays the energy label and unit */}\n                  <div className=\"row\">\n                    <div className=\"col-md-3\">\n                      <label for=\"energiunit\" class=\"form-label\">\n                        Energi\n                      </label>\n                    </div>\n                    {/* A dropdown menu for selecting the energy unit */}\n                    <div className=\"col-md-6\">\n                      <Select\n                        placeholder={<div>Velg enhet</div>}\n                        className=\"form-select-md mb-3\"\n                        options={selectUnit}\n                        onChange={(e) => handlerPart(e)}\n                      />\n                    </div>\n                  </div>\n                </th>\n                {/* An input field for entering the energy value */}\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name={selectsPart}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* Additional rows for other nutrient selections */}\n              {/* This row shows the fat content */}\n              <tr\n                className={\n                  fett ? \"alert-box\" : null || fettNull ? \"alert-box\" : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {fett ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden fett. Mengden på fett må være lavere enn eller lik 5/ 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {fettNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i fett parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Fett (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"fett\"\n                    value={nutrition.fett}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the saturated fat content */}\n              <tr\n                className={\n                  mettede\n                    ? \"alert-box\"\n                    : null || mettedeNull\n                    ? \"alert-box\"\n                    : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {mettede ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden mettede fettsyrer. Mengden på mettede fettsyrer må være lavere enn eller lik 1.65 / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {mettedeNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i mettede fettsyrer parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Mettede fettsyrer (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"mettede\"\n                    value={nutrition.mettede}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the carbohydrate content */}\n              <tr\n                className={\n                  karbohydrat\n                    ? \"alert-box\"\n                    : null || karbohydratNull\n                    ? \"alert-box\"\n                    : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {karbohydrat ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden sukkerarter. Mengden på sukkerarter må være lavere enn eller lik 5 g / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {karbohydratNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i karbohydrat parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Karbohydrat (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"karbohydrat\"\n                    value={nutrition.karbohydrat}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows hvorav sukkerarter content */}\n              <tr className={hvoravSukkerarter ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {hvoravSukkerarter ? (\n                    <Tooltip\n                      title=\"Mangler verdi i hvorav sukkerarter parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Hvorav tilsatte sukkerarter (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"hvoravSukkerarter\"\n                    value={nutrition.hvoravSukkerarter}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows kostfiber content */}\n              <tr className={kostfiber ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {kostfiber ? (\n                    <Tooltip\n                      title=\"Mangler verdi i kostfiber parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  • Kostfiber (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"kostfiber\"\n                    value={nutrition.kostfiber}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows the protein content */}\n              <tr className={protein ? \"alert-box\" : null}>\n                <th scope=\"row\" className=\"table-font\">\n                  {protein ? (\n                    <Tooltip\n                      title=\"Mangler verdi i protein parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Protein (g)\n                </th>\n                <td>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"protein\"\n                    value={nutrition.protein}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n\n              {/* This row shows salt content */}\n              <tr\n                className={\n                  salt ? \"alert-box\" : null || saltNull ? \"alert-box\" : null\n                }\n              >\n                <th scope=\"row\" className=\"table-font\">\n                  {salt ? (\n                    <Tooltip\n                      title=\"Produktet innfrir ikke Nøkkelhullet på grunn av mengden salt. Mengden på salt må være lavere enn eller lik 0.8 / 100 g for å møte kravene for Nøkkelhullsmerking.\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon className=\"alert-icon\" icon={faBan} />\n                      </div>\n                    </Tooltip>\n                  ) : null}\n                  {saltNull ? (\n                    <Tooltip\n                      title=\"Mangler verdi i salt parameter\"\n                      placement=\"right\"\n                      arrow\n                    >\n                      <div className=\"icon\">\n                        <FontAwesomeIcon\n                          className=\"alert-icon\"\n                          icon={faCircleExclamation}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : null}{\" \"}\n                  Salt (g)\n                </th>\n                <td colSpan=\"2\">\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"any\"\n                    name=\"salt\"\n                    value={nutrition.salt}\n                    onChange={changeHandle}\n                    className=\"form-control\"\n                  ></input>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n\n        {/* Button that submits the form and calls the onClick function */}\n        <div className=\"col-12 button-div\">\n          <button\n            type=\"submit\"\n            className=\"btn btn-primary btn-lg button-search\"\n            onClick={onClick}\n          >\n            Søk\n          </button>\n        </div>\n      </div>\n\n      <div className=\"col-md-6\">\n        {/* positive results nøkkelhullet container\" */}\n        {showNokkelhulletResults ? (\n          <div className=\"container nøkkelhullet-food-result-container\">\n            {/* An image with class \"keyhole-logo\" and alt text \"keyhole logo\" */}\n            <img\n              src={keyholeLgog}\n              className=\"keyhole-logo img-fluid\"\n              alt=\"keyhole logo\"\n            />\n            {/* A heading with text \"Nøkkelhullet\" */}\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir Nøkkelhullet. </p>\n              </div>\n              <div className=\"col-md-2\">\n                {/* FontAwesome icon with event listener to show the \"Nøkkelhullet\" information section */}\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  {/* A paragraph with a link to Lovdata's \"Forskrift om frivillig merking a nœringsmidler med Nokkellhullet\" */}\n                  <p>\n                    Les mer om hvilke krav det stilles for merking av\n                    Nokkellhullet på Lovdatas \"Forskrift om frivillig merking a\n                    nœringsmidler med Nokkellhullet\":\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  {/* FontAwesome icon with event listener to hide the \"Nøkkelhullet\" information section */}\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        ) : null}\n        {/*Negative results nøkkelhullet container\" */}\n        {showNokkelhulletResults === false && (\n          <div className=\"container nøkkelhullet-food-negResult-container\">\n            <h5>Nøkkelhullet</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Produktet innfrir ikke Nøkkelhullet.</p>\n                {showEmptyResult ? (\n                  <p>** Obligatoriske næringsverdier kan ikke være tomme.</p>\n                ) : null}\n\n                {mettede ? (\n                  <p>\n                    ** Mettede fettsyrer verdien kan være høyst 33 % av\n                    fettinnholdet /100 g.\n                  </p>\n                ) : null}\n\n                {fett ? <p>** Fett verdien kan være høyst 5 g/100 g.</p> : null}\n\n                {karbohydrat ? (\n                  <p>** Sukkerarter verdien kan være høyst 5 g/100 g.</p>\n                ) : null}\n\n                {salt ? (\n                  <p>** Salt verdien kan være høyst 0.8 g/100 g.</p>\n                ) : null}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"nokkelhullet\")}\n                />\n              </div>\n            </div>\n            {infoNokkelhullet ? (\n              // Information section for \"Nøkkelhullet\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om frivillig merking av næringsmidler med Nøkkelhullet:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2015-02-18-139\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"nokkelhullet\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for ernæringspåstander if there are all true results */}\n        {buttonClicked && (\n          <div\n            className={\n              lowSugars && withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-all\"\n                : !lowSugars && !withNoAddedSugars\n                ? \"container ernæringspåstander-food-result-container-none\"\n                : \"container ernæringspåstander-food-result-container-some\"\n            }\n          >\n            <h5>Ernæringspåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                {/* Low sugars */}\n                {lowSugars ? (\n                  <div>\n                    <p>** Lavt sukkerinnhold:</p>\n                    <p>\n                      Dette produktet inneholder høyst 5 g sukkerarter per 100 g\n                      for næringsmidler i fast form, eller høyst 2,5 g\n                      sukkerarter per 100 ml for næringsmidler i flytende form\n                      og oppfyller kravet for \"Lavt sukkerinnhold\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Lavt sukkerinnhold\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        For faste næringsmidler, sukkerinnholdet må være høyst 5\n                        g per 100 g.\n                      </li>\n                      <li>\n                        For flytende næringsmidler, sukkerinnholdet må være\n                        høyst 2,5 g per 100 ml.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n\n                {/* No added sugars */}\n                {withNoAddedSugars ? (\n                  <div>\n                    <p>** Uten tilsatt sukker:</p>\n                    <p>\n                      Dette produktet er ikke tilsatt monosakkarider,\n                      disakkarider eller andre næringsmidler på grunn av deres\n                      søtende egenskaper og oppfyller kravet for \"Uten tilsatt\n                      sukker\".\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <p>\n                      ** Produktet innfrir ikke \"Uten tilsatt sukker\" påstanden.\n                    </p>\n                    <ul>\n                      <li>\n                        Produktet må ikke være tilsatt monosakkarider,\n                        disakkarider eller andre næringsmidler på grunn av deres\n                        søtende egenskaper.\n                      </li>\n                    </ul>\n                  </div>\n                )}\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"ernaerings\")}\n                />\n              </div>\n            </div>\n            {infoErnaerings ? (\n              // Information section for \"Ernæringspåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"ernaerings\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"5px\" }}></div>\n        {/* container for Helsepåstander results  */}\n        {showHelsepåstander && (\n          <div\n            className=\"container helsepåstander-food-result-container\"\n            style={{ background: \"#f2f0b5\" }}\n          >\n            <h5>Helsepåstander</h5>\n            <div className=\"row\">\n              <div className=\"col-md-10\">\n                <p>Under utvikling. </p>\n              </div>\n              <div className=\"col-md-2\">\n                <FontAwesomeIcon\n                  className=\"info-button\"\n                  icon={faCircleInfo}\n                  onClick={() => onClickInfo(\"helsepåstander\")}\n                />\n              </div>\n            </div>\n            {infoHelsepåstander ? (\n              // Information section for \"Helsepåstander\"\n              <div className=\"container info-div row\">\n                <div className=\"col-md-10\">\n                  <p>\n                    Les mer om hvordan oppnå kriteriene på Lovdata’s Forskrift\n                    om ernærings- og helsepåstander om næringsmidler:\n                    <a\n                      href=\"https://lovdata.no/dokument/SF/forskrift/2010-02-17-187/KAPITTEL_1#KAPITTEL_1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      lovdata.no\n                    </a>\n                  </p>\n                </div>\n                <div className=\"col-md-2\">\n                  <FontAwesomeIcon\n                    className=\"x-button\"\n                    icon={faXmarkCircle}\n                    onClick={() => onClickClose(\"helsepåstander\")}\n                  />\n                </div>\n              </div>\n            ) : null}\n          </div>\n        )}\n        {/* Spacer */}\n        <div style={{ padding: \"15px\" }}></div>\n        {/* conditional rendering for the buttons using showButtons state */}\n        {showButtons && (\n          <div className=\"d-flex justify-content-between\">\n            {/* Save button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-save\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Lagre produkt\n            </button>\n\n            {/* Share button */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-share\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Del produkt\n            </button>\n\n            {/* Add a new product button */}\n            <button\n              className=\"btn btn-primary\"\n              onClick={() => window.location.reload()}\n              style={{ width: \"200px\", marginRight: \"5px\" }}\n            >\n              <i className=\"fas fa-plus\" style={{ marginRight: \"5px\" }}></i>{\" \"}\n              Legg til et nytt produkt\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Kategori32;\n",{"ruleId":"535","severity":1,"message":"536","line":4,"column":10,"nodeType":"537","messageId":"538","endLine":4,"endColumn":15},{"ruleId":"535","severity":1,"message":"539","line":5,"column":10,"nodeType":"537","messageId":"538","endLine":5,"endColumn":16},{"ruleId":"535","severity":1,"message":"540","line":5,"column":18,"nodeType":"537","messageId":"538","endLine":5,"endColumn":25},{"ruleId":"535","severity":1,"message":"541","line":5,"column":27,"nodeType":"537","messageId":"538","endLine":5,"endColumn":33},{"ruleId":"535","severity":1,"message":"542","line":18,"column":10,"nodeType":"537","messageId":"538","endLine":18,"endColumn":31},{"ruleId":"535","severity":1,"message":"543","line":88,"column":10,"nodeType":"537","messageId":"538","endLine":88,"endColumn":18},{"ruleId":"535","severity":1,"message":"544","line":88,"column":20,"nodeType":"537","messageId":"538","endLine":88,"endColumn":31},{"ruleId":"535","severity":1,"message":"536","line":4,"column":10,"nodeType":"537","messageId":"538","endLine":4,"endColumn":15},{"ruleId":"535","severity":1,"message":"539","line":5,"column":10,"nodeType":"537","messageId":"538","endLine":5,"endColumn":16},{"ruleId":"535","severity":1,"message":"540","line":5,"column":18,"nodeType":"537","messageId":"538","endLine":5,"endColumn":25},{"ruleId":"535","severity":1,"message":"541","line":5,"column":27,"nodeType":"537","messageId":"538","endLine":5,"endColumn":33},{"ruleId":"535","severity":1,"message":"545","line":8,"column":8,"nodeType":"537","messageId":"538","endLine":8,"endColumn":19},{"ruleId":"535","severity":1,"message":"539","line":5,"column":10,"nodeType":"537","messageId":"538","endLine":5,"endColumn":16},{"ruleId":"535","severity":1,"message":"540","line":5,"column":18,"nodeType":"537","messageId":"538","endLine":5,"endColumn":25},{"ruleId":"535","severity":1,"message":"541","line":5,"column":27,"nodeType":"537","messageId":"538","endLine":5,"endColumn":33},{"ruleId":"535","severity":1,"message":"542","line":18,"column":10,"nodeType":"537","messageId":"538","endLine":18,"endColumn":31},{"ruleId":"535","severity":1,"message":"539","line":5,"column":10,"nodeType":"537","messageId":"538","endLine":5,"endColumn":16},{"ruleId":"535","severity":1,"message":"540","line":5,"column":18,"nodeType":"537","messageId":"538","endLine":5,"endColumn":25},{"ruleId":"535","severity":1,"message":"541","line":5,"column":27,"nodeType":"537","messageId":"538","endLine":5,"endColumn":33},{"ruleId":"535","severity":1,"message":"542","line":16,"column":10,"nodeType":"537","messageId":"538","endLine":16,"endColumn":31},{"ruleId":"535","severity":1,"message":"539","line":5,"column":10,"nodeType":"537","messageId":"538","endLine":5,"endColumn":16},{"ruleId":"535","severity":1,"message":"540","line":5,"column":18,"nodeType":"537","messageId":"538","endLine":5,"endColumn":25},{"ruleId":"535","severity":1,"message":"541","line":5,"column":27,"nodeType":"537","messageId":"538","endLine":5,"endColumn":33},{"ruleId":"535","severity":1,"message":"542","line":18,"column":10,"nodeType":"537","messageId":"538","endLine":18,"endColumn":31},{"ruleId":"535","severity":1,"message":"539","line":5,"column":10,"nodeType":"537","messageId":"538","endLine":5,"endColumn":16},{"ruleId":"535","severity":1,"message":"540","line":5,"column":18,"nodeType":"537","messageId":"538","endLine":5,"endColumn":25},{"ruleId":"535","severity":1,"message":"541","line":5,"column":27,"nodeType":"537","messageId":"538","endLine":5,"endColumn":33},{"ruleId":"535","severity":1,"message":"542","line":16,"column":10,"nodeType":"537","messageId":"538","endLine":16,"endColumn":31},{"ruleId":"535","severity":1,"message":"539","line":5,"column":10,"nodeType":"537","messageId":"538","endLine":5,"endColumn":16},{"ruleId":"535","severity":1,"message":"540","line":5,"column":18,"nodeType":"537","messageId":"538","endLine":5,"endColumn":25},{"ruleId":"535","severity":1,"message":"541","line":5,"column":27,"nodeType":"537","messageId":"538","endLine":5,"endColumn":33},{"ruleId":"535","severity":1,"message":"542","line":16,"column":10,"nodeType":"537","messageId":"538","endLine":16,"endColumn":31},{"ruleId":"535","severity":1,"message":"539","line":5,"column":10,"nodeType":"537","messageId":"538","endLine":5,"endColumn":16},{"ruleId":"535","severity":1,"message":"540","line":5,"column":18,"nodeType":"537","messageId":"538","endLine":5,"endColumn":25},{"ruleId":"535","severity":1,"message":"541","line":5,"column":27,"nodeType":"537","messageId":"538","endLine":5,"endColumn":33},{"ruleId":"535","severity":1,"message":"542","line":17,"column":10,"nodeType":"537","messageId":"538","endLine":17,"endColumn":31},{"ruleId":"535","severity":1,"message":"539","line":5,"column":10,"nodeType":"537","messageId":"538","endLine":5,"endColumn":16},{"ruleId":"535","severity":1,"message":"540","line":5,"column":18,"nodeType":"537","messageId":"538","endLine":5,"endColumn":25},{"ruleId":"535","severity":1,"message":"541","line":5,"column":27,"nodeType":"537","messageId":"538","endLine":5,"endColumn":33},{"ruleId":"535","severity":1,"message":"542","line":16,"column":10,"nodeType":"537","messageId":"538","endLine":16,"endColumn":31},{"ruleId":"535","severity":1,"message":"539","line":5,"column":10,"nodeType":"537","messageId":"538","endLine":5,"endColumn":16},{"ruleId":"535","severity":1,"message":"540","line":5,"column":18,"nodeType":"537","messageId":"538","endLine":5,"endColumn":25},{"ruleId":"535","severity":1,"message":"541","line":5,"column":27,"nodeType":"537","messageId":"538","endLine":5,"endColumn":33},{"ruleId":"535","severity":1,"message":"542","line":16,"column":10,"nodeType":"537","messageId":"538","endLine":16,"endColumn":31},{"ruleId":"535","severity":1,"message":"539","line":5,"column":10,"nodeType":"537","messageId":"538","endLine":5,"endColumn":16},{"ruleId":"535","severity":1,"message":"540","line":5,"column":18,"nodeType":"537","messageId":"538","endLine":5,"endColumn":25},{"ruleId":"535","severity":1,"message":"541","line":5,"column":27,"nodeType":"537","messageId":"538","endLine":5,"endColumn":33},{"ruleId":"535","severity":1,"message":"542","line":16,"column":10,"nodeType":"537","messageId":"538","endLine":16,"endColumn":31},{"ruleId":"535","severity":1,"message":"539","line":5,"column":10,"nodeType":"537","messageId":"538","endLine":5,"endColumn":16},{"ruleId":"535","severity":1,"message":"540","line":5,"column":18,"nodeType":"537","messageId":"538","endLine":5,"endColumn":25},{"ruleId":"535","severity":1,"message":"541","line":5,"column":27,"nodeType":"537","messageId":"538","endLine":5,"endColumn":33},{"ruleId":"535","severity":1,"message":"542","line":16,"column":10,"nodeType":"537","messageId":"538","endLine":16,"endColumn":31},{"ruleId":"535","severity":1,"message":"539","line":5,"column":10,"nodeType":"537","messageId":"538","endLine":5,"endColumn":16},{"ruleId":"535","severity":1,"message":"540","line":5,"column":18,"nodeType":"537","messageId":"538","endLine":5,"endColumn":25},{"ruleId":"535","severity":1,"message":"541","line":5,"column":27,"nodeType":"537","messageId":"538","endLine":5,"endColumn":33},{"ruleId":"535","severity":1,"message":"542","line":18,"column":10,"nodeType":"537","messageId":"538","endLine":18,"endColumn":31},{"ruleId":"535","severity":1,"message":"539","line":5,"column":10,"nodeType":"537","messageId":"538","endLine":5,"endColumn":16},{"ruleId":"535","severity":1,"message":"540","line":5,"column":18,"nodeType":"537","messageId":"538","endLine":5,"endColumn":25},{"ruleId":"535","severity":1,"message":"541","line":5,"column":27,"nodeType":"537","messageId":"538","endLine":5,"endColumn":33},{"ruleId":"535","severity":1,"message":"542","line":18,"column":10,"nodeType":"537","messageId":"538","endLine":18,"endColumn":31},{"ruleId":"535","severity":1,"message":"539","line":5,"column":10,"nodeType":"537","messageId":"538","endLine":5,"endColumn":16},{"ruleId":"535","severity":1,"message":"540","line":5,"column":18,"nodeType":"537","messageId":"538","endLine":5,"endColumn":25},{"ruleId":"535","severity":1,"message":"541","line":5,"column":27,"nodeType":"537","messageId":"538","endLine":5,"endColumn":33},{"ruleId":"535","severity":1,"message":"542","line":16,"column":10,"nodeType":"537","messageId":"538","endLine":16,"endColumn":31},{"ruleId":"535","severity":1,"message":"539","line":5,"column":10,"nodeType":"537","messageId":"538","endLine":5,"endColumn":16},{"ruleId":"535","severity":1,"message":"540","line":5,"column":18,"nodeType":"537","messageId":"538","endLine":5,"endColumn":25},{"ruleId":"535","severity":1,"message":"541","line":5,"column":27,"nodeType":"537","messageId":"538","endLine":5,"endColumn":33},{"ruleId":"535","severity":1,"message":"542","line":16,"column":10,"nodeType":"537","messageId":"538","endLine":16,"endColumn":31},{"ruleId":"535","severity":1,"message":"539","line":5,"column":10,"nodeType":"537","messageId":"538","endLine":5,"endColumn":16},{"ruleId":"535","severity":1,"message":"540","line":5,"column":18,"nodeType":"537","messageId":"538","endLine":5,"endColumn":25},{"ruleId":"535","severity":1,"message":"541","line":5,"column":27,"nodeType":"537","messageId":"538","endLine":5,"endColumn":33},{"ruleId":"535","severity":1,"message":"542","line":16,"column":10,"nodeType":"537","messageId":"538","endLine":16,"endColumn":31},{"ruleId":"535","severity":1,"message":"539","line":5,"column":10,"nodeType":"537","messageId":"538","endLine":5,"endColumn":16},{"ruleId":"535","severity":1,"message":"540","line":5,"column":18,"nodeType":"537","messageId":"538","endLine":5,"endColumn":25},{"ruleId":"535","severity":1,"message":"541","line":5,"column":27,"nodeType":"537","messageId":"538","endLine":5,"endColumn":33},{"ruleId":"535","severity":1,"message":"542","line":16,"column":10,"nodeType":"537","messageId":"538","endLine":16,"endColumn":31},{"ruleId":"535","severity":1,"message":"539","line":5,"column":10,"nodeType":"537","messageId":"538","endLine":5,"endColumn":16},{"ruleId":"535","severity":1,"message":"540","line":5,"column":18,"nodeType":"537","messageId":"538","endLine":5,"endColumn":25},{"ruleId":"535","severity":1,"message":"541","line":5,"column":27,"nodeType":"537","messageId":"538","endLine":5,"endColumn":33},{"ruleId":"535","severity":1,"message":"542","line":16,"column":10,"nodeType":"537","messageId":"538","endLine":16,"endColumn":31},{"ruleId":"535","severity":1,"message":"539","line":5,"column":10,"nodeType":"537","messageId":"538","endLine":5,"endColumn":16},{"ruleId":"535","severity":1,"message":"540","line":5,"column":18,"nodeType":"537","messageId":"538","endLine":5,"endColumn":25},{"ruleId":"535","severity":1,"message":"541","line":5,"column":27,"nodeType":"537","messageId":"538","endLine":5,"endColumn":33},{"ruleId":"535","severity":1,"message":"542","line":16,"column":10,"nodeType":"537","messageId":"538","endLine":16,"endColumn":31},{"ruleId":"535","severity":1,"message":"539","line":5,"column":10,"nodeType":"537","messageId":"538","endLine":5,"endColumn":16},{"ruleId":"535","severity":1,"message":"540","line":5,"column":18,"nodeType":"537","messageId":"538","endLine":5,"endColumn":25},{"ruleId":"535","severity":1,"message":"541","line":5,"column":27,"nodeType":"537","messageId":"538","endLine":5,"endColumn":33},{"ruleId":"535","severity":1,"message":"542","line":16,"column":10,"nodeType":"537","messageId":"538","endLine":16,"endColumn":31},{"ruleId":"535","severity":1,"message":"539","line":5,"column":10,"nodeType":"537","messageId":"538","endLine":5,"endColumn":16},{"ruleId":"535","severity":1,"message":"540","line":5,"column":18,"nodeType":"537","messageId":"538","endLine":5,"endColumn":25},{"ruleId":"535","severity":1,"message":"541","line":5,"column":27,"nodeType":"537","messageId":"538","endLine":5,"endColumn":33},{"ruleId":"535","severity":1,"message":"542","line":16,"column":10,"nodeType":"537","messageId":"538","endLine":16,"endColumn":31},{"ruleId":"535","severity":1,"message":"539","line":5,"column":10,"nodeType":"537","messageId":"538","endLine":5,"endColumn":16},{"ruleId":"535","severity":1,"message":"540","line":5,"column":18,"nodeType":"537","messageId":"538","endLine":5,"endColumn":25},{"ruleId":"535","severity":1,"message":"541","line":5,"column":27,"nodeType":"537","messageId":"538","endLine":5,"endColumn":33},{"ruleId":"535","severity":1,"message":"542","line":16,"column":10,"nodeType":"537","messageId":"538","endLine":16,"endColumn":31},{"ruleId":"535","severity":1,"message":"539","line":5,"column":10,"nodeType":"537","messageId":"538","endLine":5,"endColumn":16},{"ruleId":"535","severity":1,"message":"540","line":5,"column":18,"nodeType":"537","messageId":"538","endLine":5,"endColumn":25},{"ruleId":"535","severity":1,"message":"541","line":5,"column":27,"nodeType":"537","messageId":"538","endLine":5,"endColumn":33},{"ruleId":"535","severity":1,"message":"542","line":16,"column":10,"nodeType":"537","messageId":"538","endLine":16,"endColumn":31},{"ruleId":"535","severity":1,"message":"539","line":5,"column":10,"nodeType":"537","messageId":"538","endLine":5,"endColumn":16},{"ruleId":"535","severity":1,"message":"540","line":5,"column":18,"nodeType":"537","messageId":"538","endLine":5,"endColumn":25},{"ruleId":"535","severity":1,"message":"541","line":5,"column":27,"nodeType":"537","messageId":"538","endLine":5,"endColumn":33},{"ruleId":"535","severity":1,"message":"542","line":16,"column":10,"nodeType":"537","messageId":"538","endLine":16,"endColumn":31},{"ruleId":"535","severity":1,"message":"536","line":4,"column":10,"nodeType":"537","messageId":"538","endLine":4,"endColumn":15},{"ruleId":"535","severity":1,"message":"539","line":5,"column":10,"nodeType":"537","messageId":"538","endLine":5,"endColumn":16},{"ruleId":"535","severity":1,"message":"540","line":5,"column":18,"nodeType":"537","messageId":"538","endLine":5,"endColumn":25},{"ruleId":"535","severity":1,"message":"541","line":5,"column":27,"nodeType":"537","messageId":"538","endLine":5,"endColumn":33},{"ruleId":"535","severity":1,"message":"542","line":18,"column":10,"nodeType":"537","messageId":"538","endLine":18,"endColumn":31},{"ruleId":"535","severity":1,"message":"543","line":88,"column":10,"nodeType":"537","messageId":"538","endLine":88,"endColumn":18},{"ruleId":"535","severity":1,"message":"544","line":88,"column":20,"nodeType":"537","messageId":"538","endLine":88,"endColumn":31},{"ruleId":"535","severity":1,"message":"539","line":5,"column":10,"nodeType":"537","messageId":"538","endLine":5,"endColumn":16},{"ruleId":"535","severity":1,"message":"540","line":5,"column":18,"nodeType":"537","messageId":"538","endLine":5,"endColumn":25},{"ruleId":"535","severity":1,"message":"541","line":5,"column":27,"nodeType":"537","messageId":"538","endLine":5,"endColumn":33},{"ruleId":"535","severity":1,"message":"542","line":16,"column":10,"nodeType":"537","messageId":"538","endLine":16,"endColumn":31},{"ruleId":"535","severity":1,"message":"539","line":5,"column":10,"nodeType":"537","messageId":"538","endLine":5,"endColumn":16},{"ruleId":"535","severity":1,"message":"540","line":5,"column":18,"nodeType":"537","messageId":"538","endLine":5,"endColumn":25},{"ruleId":"535","severity":1,"message":"541","line":5,"column":27,"nodeType":"537","messageId":"538","endLine":5,"endColumn":33},{"ruleId":"535","severity":1,"message":"542","line":16,"column":10,"nodeType":"537","messageId":"538","endLine":16,"endColumn":31},{"ruleId":"535","severity":1,"message":"539","line":5,"column":10,"nodeType":"537","messageId":"538","endLine":5,"endColumn":16},{"ruleId":"535","severity":1,"message":"540","line":5,"column":18,"nodeType":"537","messageId":"538","endLine":5,"endColumn":25},{"ruleId":"535","severity":1,"message":"541","line":5,"column":27,"nodeType":"537","messageId":"538","endLine":5,"endColumn":33},{"ruleId":"535","severity":1,"message":"542","line":16,"column":10,"nodeType":"537","messageId":"538","endLine":16,"endColumn":31},{"ruleId":"535","severity":1,"message":"539","line":5,"column":10,"nodeType":"537","messageId":"538","endLine":5,"endColumn":16},{"ruleId":"535","severity":1,"message":"540","line":5,"column":18,"nodeType":"537","messageId":"538","endLine":5,"endColumn":25},{"ruleId":"535","severity":1,"message":"541","line":5,"column":27,"nodeType":"537","messageId":"538","endLine":5,"endColumn":33},{"ruleId":"535","severity":1,"message":"542","line":16,"column":10,"nodeType":"537","messageId":"538","endLine":16,"endColumn":31},{"ruleId":"535","severity":1,"message":"539","line":5,"column":10,"nodeType":"537","messageId":"538","endLine":5,"endColumn":16},{"ruleId":"535","severity":1,"message":"540","line":5,"column":18,"nodeType":"537","messageId":"538","endLine":5,"endColumn":25},{"ruleId":"535","severity":1,"message":"541","line":5,"column":27,"nodeType":"537","messageId":"538","endLine":5,"endColumn":33},{"ruleId":"535","severity":1,"message":"542","line":16,"column":10,"nodeType":"537","messageId":"538","endLine":16,"endColumn":31},{"ruleId":"535","severity":1,"message":"539","line":5,"column":10,"nodeType":"537","messageId":"538","endLine":5,"endColumn":16},{"ruleId":"535","severity":1,"message":"540","line":5,"column":18,"nodeType":"537","messageId":"538","endLine":5,"endColumn":25},{"ruleId":"535","severity":1,"message":"541","line":5,"column":27,"nodeType":"537","messageId":"538","endLine":5,"endColumn":33},{"ruleId":"535","severity":1,"message":"542","line":16,"column":10,"nodeType":"537","messageId":"538","endLine":16,"endColumn":31},{"ruleId":"535","severity":1,"message":"539","line":5,"column":10,"nodeType":"537","messageId":"538","endLine":5,"endColumn":16},{"ruleId":"535","severity":1,"message":"540","line":5,"column":18,"nodeType":"537","messageId":"538","endLine":5,"endColumn":25},{"ruleId":"535","severity":1,"message":"541","line":5,"column":27,"nodeType":"537","messageId":"538","endLine":5,"endColumn":33},{"ruleId":"535","severity":1,"message":"542","line":16,"column":10,"nodeType":"537","messageId":"538","endLine":16,"endColumn":31},{"ruleId":"535","severity":1,"message":"539","line":5,"column":10,"nodeType":"537","messageId":"538","endLine":5,"endColumn":16},{"ruleId":"535","severity":1,"message":"540","line":5,"column":18,"nodeType":"537","messageId":"538","endLine":5,"endColumn":25},{"ruleId":"535","severity":1,"message":"541","line":5,"column":27,"nodeType":"537","messageId":"538","endLine":5,"endColumn":33},{"ruleId":"535","severity":1,"message":"542","line":16,"column":10,"nodeType":"537","messageId":"538","endLine":16,"endColumn":31},{"ruleId":"535","severity":1,"message":"539","line":5,"column":10,"nodeType":"537","messageId":"538","endLine":5,"endColumn":16},{"ruleId":"535","severity":1,"message":"540","line":5,"column":18,"nodeType":"537","messageId":"538","endLine":5,"endColumn":25},{"ruleId":"535","severity":1,"message":"541","line":5,"column":27,"nodeType":"537","messageId":"538","endLine":5,"endColumn":33},{"ruleId":"535","severity":1,"message":"542","line":16,"column":10,"nodeType":"537","messageId":"538","endLine":16,"endColumn":31},{"ruleId":"535","severity":1,"message":"539","line":5,"column":10,"nodeType":"537","messageId":"538","endLine":5,"endColumn":16},{"ruleId":"535","severity":1,"message":"540","line":5,"column":18,"nodeType":"537","messageId":"538","endLine":5,"endColumn":25},{"ruleId":"535","severity":1,"message":"541","line":5,"column":27,"nodeType":"537","messageId":"538","endLine":5,"endColumn":33},{"ruleId":"535","severity":1,"message":"542","line":16,"column":10,"nodeType":"537","messageId":"538","endLine":16,"endColumn":31},{"ruleId":"535","severity":1,"message":"539","line":5,"column":10,"nodeType":"537","messageId":"538","endLine":5,"endColumn":16},{"ruleId":"535","severity":1,"message":"540","line":5,"column":18,"nodeType":"537","messageId":"538","endLine":5,"endColumn":25},{"ruleId":"535","severity":1,"message":"541","line":5,"column":27,"nodeType":"537","messageId":"538","endLine":5,"endColumn":33},{"ruleId":"535","severity":1,"message":"542","line":16,"column":10,"nodeType":"537","messageId":"538","endLine":16,"endColumn":31},{"ruleId":"535","severity":1,"message":"539","line":5,"column":10,"nodeType":"537","messageId":"538","endLine":5,"endColumn":16},{"ruleId":"535","severity":1,"message":"540","line":5,"column":18,"nodeType":"537","messageId":"538","endLine":5,"endColumn":25},{"ruleId":"535","severity":1,"message":"541","line":5,"column":27,"nodeType":"537","messageId":"538","endLine":5,"endColumn":33},{"ruleId":"535","severity":1,"message":"542","line":16,"column":10,"nodeType":"537","messageId":"538","endLine":16,"endColumn":31},{"ruleId":"535","severity":1,"message":"539","line":5,"column":10,"nodeType":"537","messageId":"538","endLine":5,"endColumn":16},{"ruleId":"535","severity":1,"message":"540","line":5,"column":18,"nodeType":"537","messageId":"538","endLine":5,"endColumn":25},{"ruleId":"535","severity":1,"message":"541","line":5,"column":27,"nodeType":"537","messageId":"538","endLine":5,"endColumn":33},{"ruleId":"535","severity":1,"message":"542","line":16,"column":10,"nodeType":"537","messageId":"538","endLine":16,"endColumn":31},{"ruleId":"535","severity":1,"message":"539","line":5,"column":10,"nodeType":"537","messageId":"538","endLine":5,"endColumn":16},{"ruleId":"535","severity":1,"message":"540","line":5,"column":18,"nodeType":"537","messageId":"538","endLine":5,"endColumn":25},{"ruleId":"535","severity":1,"message":"541","line":5,"column":27,"nodeType":"537","messageId":"538","endLine":5,"endColumn":33},{"ruleId":"535","severity":1,"message":"542","line":16,"column":10,"nodeType":"537","messageId":"538","endLine":16,"endColumn":31},{"ruleId":"535","severity":1,"message":"539","line":5,"column":10,"nodeType":"537","messageId":"538","endLine":5,"endColumn":16},{"ruleId":"535","severity":1,"message":"540","line":5,"column":18,"nodeType":"537","messageId":"538","endLine":5,"endColumn":25},{"ruleId":"535","severity":1,"message":"541","line":5,"column":27,"nodeType":"537","messageId":"538","endLine":5,"endColumn":33},{"ruleId":"535","severity":1,"message":"542","line":16,"column":10,"nodeType":"537","messageId":"538","endLine":16,"endColumn":31},{"ruleId":"535","severity":1,"message":"539","line":5,"column":10,"nodeType":"537","messageId":"538","endLine":5,"endColumn":16},{"ruleId":"535","severity":1,"message":"540","line":5,"column":18,"nodeType":"537","messageId":"538","endLine":5,"endColumn":25},{"ruleId":"535","severity":1,"message":"541","line":5,"column":27,"nodeType":"537","messageId":"538","endLine":5,"endColumn":33},{"ruleId":"535","severity":1,"message":"542","line":16,"column":10,"nodeType":"537","messageId":"538","endLine":16,"endColumn":31},{"ruleId":"535","severity":1,"message":"539","line":5,"column":10,"nodeType":"537","messageId":"538","endLine":5,"endColumn":16},{"ruleId":"535","severity":1,"message":"540","line":5,"column":18,"nodeType":"537","messageId":"538","endLine":5,"endColumn":25},{"ruleId":"535","severity":1,"message":"541","line":5,"column":27,"nodeType":"537","messageId":"538","endLine":5,"endColumn":33},{"ruleId":"535","severity":1,"message":"542","line":16,"column":10,"nodeType":"537","messageId":"538","endLine":16,"endColumn":31},{"ruleId":"535","severity":1,"message":"539","line":5,"column":10,"nodeType":"537","messageId":"538","endLine":5,"endColumn":16},{"ruleId":"535","severity":1,"message":"540","line":5,"column":18,"nodeType":"537","messageId":"538","endLine":5,"endColumn":25},{"ruleId":"535","severity":1,"message":"541","line":5,"column":27,"nodeType":"537","messageId":"538","endLine":5,"endColumn":33},{"ruleId":"535","severity":1,"message":"542","line":16,"column":10,"nodeType":"537","messageId":"538","endLine":16,"endColumn":31},{"ruleId":"535","severity":1,"message":"539","line":5,"column":10,"nodeType":"537","messageId":"538","endLine":5,"endColumn":16},{"ruleId":"535","severity":1,"message":"540","line":5,"column":18,"nodeType":"537","messageId":"538","endLine":5,"endColumn":25},{"ruleId":"535","severity":1,"message":"541","line":5,"column":27,"nodeType":"537","messageId":"538","endLine":5,"endColumn":33},{"ruleId":"535","severity":1,"message":"542","line":16,"column":10,"nodeType":"537","messageId":"538","endLine":16,"endColumn":31},{"ruleId":"535","severity":1,"message":"539","line":5,"column":10,"nodeType":"537","messageId":"538","endLine":5,"endColumn":16},{"ruleId":"535","severity":1,"message":"540","line":5,"column":18,"nodeType":"537","messageId":"538","endLine":5,"endColumn":25},{"ruleId":"535","severity":1,"message":"541","line":5,"column":27,"nodeType":"537","messageId":"538","endLine":5,"endColumn":33},{"ruleId":"535","severity":1,"message":"542","line":16,"column":10,"nodeType":"537","messageId":"538","endLine":16,"endColumn":31},{"ruleId":"535","severity":1,"message":"539","line":5,"column":10,"nodeType":"537","messageId":"538","endLine":5,"endColumn":16},{"ruleId":"535","severity":1,"message":"540","line":5,"column":18,"nodeType":"537","messageId":"538","endLine":5,"endColumn":25},{"ruleId":"535","severity":1,"message":"541","line":5,"column":27,"nodeType":"537","messageId":"538","endLine":5,"endColumn":33},{"ruleId":"535","severity":1,"message":"542","line":16,"column":10,"nodeType":"537","messageId":"538","endLine":16,"endColumn":31},{"ruleId":"535","severity":1,"message":"539","line":5,"column":10,"nodeType":"537","messageId":"538","endLine":5,"endColumn":16},{"ruleId":"535","severity":1,"message":"540","line":5,"column":18,"nodeType":"537","messageId":"538","endLine":5,"endColumn":25},{"ruleId":"535","severity":1,"message":"541","line":5,"column":27,"nodeType":"537","messageId":"538","endLine":5,"endColumn":33},{"ruleId":"535","severity":1,"message":"542","line":16,"column":10,"nodeType":"537","messageId":"538","endLine":16,"endColumn":31},{"ruleId":"535","severity":1,"message":"539","line":5,"column":10,"nodeType":"537","messageId":"538","endLine":5,"endColumn":16},{"ruleId":"535","severity":1,"message":"540","line":5,"column":18,"nodeType":"537","messageId":"538","endLine":5,"endColumn":25},{"ruleId":"535","severity":1,"message":"541","line":5,"column":27,"nodeType":"537","messageId":"538","endLine":5,"endColumn":33},{"ruleId":"535","severity":1,"message":"542","line":16,"column":10,"nodeType":"537","messageId":"538","endLine":16,"endColumn":31},"no-unused-vars","'faBan' is defined but never used.","Identifier","unusedVar","'faSave' is defined but never used.","'faShare' is defined but never used.","'faPlus' is defined but never used.","'showErnaeringsResults' is assigned a value but never used.","'saltNull' is assigned a value but never used.","'setSaltNull' is assigned a value but never used.","'keyholeLgog' is defined but never used."]