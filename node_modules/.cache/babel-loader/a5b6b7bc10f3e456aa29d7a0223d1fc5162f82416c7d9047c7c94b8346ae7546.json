{"ast":null,"code":"import _slicedToArray from \"/Users/annabatzeri/Desktop/N\\xF8kkelhulet/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@mui/utils\";\nvar _excluded = [\"colorSchemes\"],\n  _excluded2 = [\"colorSchemes\"],\n  _excluded3 = [\"components\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { GlobalStyles } from '@mui/styled-engine';\nimport { deepmerge, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport createSpacing from '../createTheme/createSpacing';\nimport createBreakpoints from '../createTheme/createBreakpoints';\nimport cssVarsParser from './cssVarsParser';\nimport ThemeProvider from '../ThemeProvider';\nimport getInitColorSchemeScript, { DEFAULT_ATTRIBUTE, DEFAULT_MODE_STORAGE_KEY } from './getInitColorSchemeScript';\nimport useCurrentColorScheme from './useCurrentColorScheme';\nimport createGetCssVar from './createGetCssVar';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport var DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';\nexport default function createCssVarsProvider(options) {\n  var _baseTheme$breakpoint;\n  var _options$theme = options.theme,\n    baseTheme = _options$theme === void 0 ? {} : _options$theme,\n    _options$defaultMode = options.defaultMode,\n    desisgnSystemMode = _options$defaultMode === void 0 ? 'light' : _options$defaultMode,\n    designSystemColorScheme = options.defaultColorScheme,\n    _options$disableTrans = options.disableTransitionOnChange,\n    designSystemTransitionOnChange = _options$disableTrans === void 0 ? false : _options$disableTrans,\n    _options$enableColorS = options.enableColorScheme,\n    designSystemEnableColorScheme = _options$enableColorS === void 0 ? true : _options$enableColorS,\n    _options$prefix = options.prefix,\n    designSystemPrefix = _options$prefix === void 0 ? '' : _options$prefix,\n    shouldSkipGeneratingVar = options.shouldSkipGeneratingVar,\n    resolveTheme = options.resolveTheme;\n  var systemSpacing = createSpacing(baseTheme.spacing);\n  var systemBreakpoints = createBreakpoints((_baseTheme$breakpoint = baseTheme.breakpoints) != null ? _baseTheme$breakpoint : {});\n  if (!baseTheme.colorSchemes || typeof designSystemColorScheme === 'string' && !baseTheme.colorSchemes[designSystemColorScheme] || typeof designSystemColorScheme === 'object' && !baseTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.light] || typeof designSystemColorScheme === 'object' && !baseTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.dark]) {\n    console.error(\"MUI: `\".concat(designSystemColorScheme, \"` does not exist in `theme.colorSchemes`.\"));\n  }\n  var ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\n  var useColorScheme = function useColorScheme() {\n    var value = React.useContext(ColorSchemeContext);\n    if (!value) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? \"MUI: `useColorScheme` must be called under <CssVarsProvider />\" : _formatMuiErrorMessage(19));\n    }\n    return value;\n  };\n  function CssVarsProvider(_ref) {\n    var children = _ref.children,\n      _ref$theme = _ref.theme,\n      themeProp = _ref$theme === void 0 ? {} : _ref$theme,\n      _ref$prefix = _ref.prefix,\n      prefix = _ref$prefix === void 0 ? designSystemPrefix : _ref$prefix,\n      _ref$modeStorageKey = _ref.modeStorageKey,\n      modeStorageKey = _ref$modeStorageKey === void 0 ? DEFAULT_MODE_STORAGE_KEY : _ref$modeStorageKey,\n      _ref$attribute = _ref.attribute,\n      attribute = _ref$attribute === void 0 ? DEFAULT_ATTRIBUTE : _ref$attribute,\n      _ref$defaultMode = _ref.defaultMode,\n      defaultMode = _ref$defaultMode === void 0 ? desisgnSystemMode : _ref$defaultMode,\n      _ref$defaultColorSche = _ref.defaultColorScheme,\n      defaultColorScheme = _ref$defaultColorSche === void 0 ? designSystemColorScheme : _ref$defaultColorSche,\n      _ref$disableTransitio = _ref.disableTransitionOnChange,\n      disableTransitionOnChange = _ref$disableTransitio === void 0 ? designSystemTransitionOnChange : _ref$disableTransitio,\n      _ref$enableColorSchem = _ref.enableColorScheme,\n      enableColorScheme = _ref$enableColorSchem === void 0 ? designSystemEnableColorScheme : _ref$enableColorSchem;\n    var _baseTheme$colorSchem = baseTheme.colorSchemes,\n      baseColorSchemes = _baseTheme$colorSchem === void 0 ? {} : _baseTheme$colorSchem,\n      restBaseTheme = _objectWithoutPropertiesLoose(baseTheme, _excluded);\n    var _themeProp$colorSchem = themeProp.colorSchemes,\n      colorSchemesProp = _themeProp$colorSchem === void 0 ? {} : _themeProp$colorSchem,\n      restThemeProp = _objectWithoutPropertiesLoose(themeProp, _excluded2);\n    var hasMounted = React.useRef(false); // eslint-disable-next-line prefer-const\n\n    var _deepmerge = deepmerge(restBaseTheme, restThemeProp),\n      _deepmerge$components = _deepmerge.components,\n      components = _deepmerge$components === void 0 ? {} : _deepmerge$components,\n      mergedTheme = _objectWithoutPropertiesLoose(_deepmerge, _excluded3);\n    var colorSchemes = deepmerge(baseColorSchemes, colorSchemesProp);\n    var allColorSchemes = Object.keys(colorSchemes);\n    var defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n    var defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark;\n    var _useCurrentColorSchem = useCurrentColorScheme({\n        supportedColorSchemes: allColorSchemes,\n        defaultLightColorScheme: defaultLightColorScheme,\n        defaultDarkColorScheme: defaultDarkColorScheme,\n        modeStorageKey: modeStorageKey,\n        defaultMode: defaultMode\n      }),\n      mode = _useCurrentColorSchem.mode,\n      setMode = _useCurrentColorSchem.setMode,\n      systemMode = _useCurrentColorSchem.systemMode,\n      lightColorScheme = _useCurrentColorSchem.lightColorScheme,\n      darkColorScheme = _useCurrentColorSchem.darkColorScheme,\n      colorScheme = _useCurrentColorSchem.colorScheme,\n      setColorScheme = _useCurrentColorSchem.setColorScheme;\n    var resolvedColorScheme = function () {\n      if (!colorScheme) {\n        // This scope occurs on the server\n        if (defaultMode === 'dark') {\n          return defaultDarkColorScheme;\n        } // use light color scheme, if default mode is 'light' | 'auto'\n\n        return defaultLightColorScheme;\n      }\n      return colorScheme;\n    }();\n    var _cssVarsParser = cssVarsParser(mergedTheme, {\n        prefix: prefix,\n        basePrefix: designSystemPrefix,\n        shouldSkipGeneratingVar: shouldSkipGeneratingVar\n      }),\n      rootCss = _cssVarsParser.css,\n      rootVars = _cssVarsParser.vars,\n      parsedTheme = _cssVarsParser.parsedTheme;\n    mergedTheme = _extends({}, parsedTheme, {\n      components: components,\n      colorSchemes: colorSchemes,\n      prefix: prefix,\n      vars: rootVars,\n      spacing: themeProp.spacing ? createSpacing(themeProp.spacing) : systemSpacing,\n      breakpoints: themeProp.breakpoints ? createBreakpoints(themeProp.breakpoints) : systemBreakpoints,\n      getCssVar: createGetCssVar(prefix)\n    });\n    var styleSheet = {};\n    Object.entries(colorSchemes).forEach(function (_ref2) {\n      var _ref3 = _slicedToArray(_ref2, 2),\n        key = _ref3[0],\n        scheme = _ref3[1];\n      var _cssVarsParser2 = cssVarsParser(scheme, {\n          prefix: prefix,\n          basePrefix: designSystemPrefix,\n          shouldSkipGeneratingVar: shouldSkipGeneratingVar\n        }),\n        css = _cssVarsParser2.css,\n        vars = _cssVarsParser2.vars,\n        parsedScheme = _cssVarsParser2.parsedTheme;\n      mergedTheme.vars = deepmerge(mergedTheme.vars, vars);\n      if (key === resolvedColorScheme) {\n        mergedTheme = _extends({}, mergedTheme, parsedScheme);\n      }\n      var resolvedDefaultColorScheme = function () {\n        if (typeof defaultColorScheme === 'string') {\n          return defaultColorScheme;\n        }\n        if (defaultMode === 'dark') {\n          return defaultColorScheme.dark;\n        }\n        return defaultColorScheme.light;\n      }();\n      if (key === resolvedDefaultColorScheme) {\n        styleSheet[':root'] = css;\n      } else {\n        styleSheet[\"[\".concat(attribute, \"=\\\"\").concat(key, \"\\\"]\")] = css;\n      }\n    });\n    React.useEffect(function () {\n      if (colorScheme) {\n        // attaches attribute to <html> because the css variables are attached to :root (html)\n        document.documentElement.setAttribute(attribute, colorScheme);\n      }\n    }, [colorScheme, attribute]);\n    useEnhancedEffect(function () {\n      if (!mode || !enableColorScheme) {\n        return undefined;\n      }\n      var priorColorScheme = document.documentElement.style.getPropertyValue('color-scheme'); // `color-scheme` tells browser to render built-in elements according to its value: `light` or `dark`\n\n      if (mode === 'system') {\n        document.documentElement.style.setProperty('color-scheme', systemMode);\n      } else {\n        document.documentElement.style.setProperty('color-scheme', mode);\n      }\n      return function () {\n        document.documentElement.style.setProperty('color-scheme', priorColorScheme);\n      };\n    }, [mode, systemMode, enableColorScheme]);\n    React.useEffect(function () {\n      var timer;\n      if (disableTransitionOnChange && hasMounted.current) {\n        // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313\n        var css = document.createElement('style');\n        css.appendChild(document.createTextNode(DISABLE_CSS_TRANSITION));\n        document.head.appendChild(css); // Force browser repaint\n\n        (function () {\n          return window.getComputedStyle(document.body);\n        })();\n        timer = setTimeout(function () {\n          document.head.removeChild(css);\n        }, 1);\n      }\n      return function () {\n        clearTimeout(timer);\n      };\n    }, [colorScheme, disableTransitionOnChange]);\n    React.useEffect(function () {\n      hasMounted.current = true;\n      return function () {\n        hasMounted.current = false;\n      };\n    }, []);\n    return /*#__PURE__*/_jsxs(ColorSchemeContext.Provider, {\n      value: {\n        mode: mode,\n        setMode: setMode,\n        lightColorScheme: lightColorScheme,\n        darkColorScheme: darkColorScheme,\n        colorScheme: colorScheme,\n        setColorScheme: setColorScheme,\n        allColorSchemes: allColorSchemes\n      },\n      children: [/*#__PURE__*/_jsx(GlobalStyles, {\n        styles: {\n          ':root': rootCss\n        }\n      }), /*#__PURE__*/_jsx(GlobalStyles, {\n        styles: styleSheet\n      }), /*#__PURE__*/_jsx(ThemeProvider, {\n        theme: resolveTheme ? resolveTheme(mergedTheme) : mergedTheme,\n        children: children\n      })]\n    });\n  }\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\n    /**\n     * The body attribute name to attach colorScheme.\n     */\n    attribute: PropTypes.string,\n    /**\n     * The component tree.\n     */\n    children: PropTypes.node,\n    /**\n     * The initial color scheme used.\n     */\n    defaultColorScheme: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    /**\n     * The initial mode used.\n     */\n    defaultMode: PropTypes.string,\n    /**\n     * Disable CSS transitions when switching between modes or color schemes\n     */\n    disableTransitionOnChange: PropTypes.bool,\n    /**\n     * Indicate to the browser which color scheme is used (light or dark) for rendering built-in UI\n     */\n    enableColorScheme: PropTypes.bool,\n    /**\n     * The key in the local storage used to store current color scheme.\n     */\n    modeStorageKey: PropTypes.string,\n    /**\n     * CSS variable prefix.\n     */\n    prefix: PropTypes.string,\n    /**\n     * The calculated theme object that will be passed through context.\n     */\n    theme: PropTypes.object\n  } : void 0;\n  return {\n    CssVarsProvider: CssVarsProvider,\n    useColorScheme: useColorScheme,\n    getInitColorSchemeScript: getInitColorSchemeScript\n  };\n}","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","formatMuiErrorMessage","_formatMuiErrorMessage","_excluded","_excluded2","_excluded3","React","PropTypes","GlobalStyles","deepmerge","unstable_useEnhancedEffect","useEnhancedEffect","createSpacing","createBreakpoints","cssVarsParser","ThemeProvider","getInitColorSchemeScript","DEFAULT_ATTRIBUTE","DEFAULT_MODE_STORAGE_KEY","useCurrentColorScheme","createGetCssVar","jsx","_jsx","jsxs","_jsxs","DISABLE_CSS_TRANSITION","createCssVarsProvider","options","_baseTheme$breakpoint","_options$theme","theme","baseTheme","_options$defaultMode","defaultMode","desisgnSystemMode","designSystemColorScheme","defaultColorScheme","_options$disableTrans","disableTransitionOnChange","designSystemTransitionOnChange","_options$enableColorS","enableColorScheme","designSystemEnableColorScheme","_options$prefix","prefix","designSystemPrefix","shouldSkipGeneratingVar","resolveTheme","systemSpacing","spacing","systemBreakpoints","breakpoints","colorSchemes","light","dark","console","error","concat","ColorSchemeContext","createContext","undefined","useColorScheme","value","useContext","Error","process","env","NODE_ENV","CssVarsProvider","_ref","children","_ref$theme","themeProp","_ref$prefix","_ref$modeStorageKey","modeStorageKey","_ref$attribute","attribute","_ref$defaultMode","_ref$defaultColorSche","_ref$disableTransitio","_ref$enableColorSchem","_baseTheme$colorSchem","baseColorSchemes","restBaseTheme","_themeProp$colorSchem","colorSchemesProp","restThemeProp","hasMounted","useRef","_deepmerge","_deepmerge$components","components","mergedTheme","allColorSchemes","Object","keys","defaultLightColorScheme","defaultDarkColorScheme","_useCurrentColorSchem","supportedColorSchemes","mode","setMode","systemMode","lightColorScheme","darkColorScheme","colorScheme","setColorScheme","resolvedColorScheme","_cssVarsParser","basePrefix","rootCss","css","rootVars","vars","parsedTheme","getCssVar","styleSheet","entries","forEach","_ref2","_ref3","_slicedToArray","key","scheme","_cssVarsParser2","parsedScheme","resolvedDefaultColorScheme","useEffect","document","documentElement","setAttribute","priorColorScheme","style","getPropertyValue","setProperty","timer","current","createElement","appendChild","createTextNode","head","window","getComputedStyle","body","setTimeout","removeChild","clearTimeout","Provider","styles","propTypes","string","node","oneOfType","object","bool"],"sources":["/Users/annabatzeri/Desktop/Nøkkelhulet/node_modules/@mui/system/esm/cssVars/createCssVarsProvider.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@mui/utils\";\nconst _excluded = [\"colorSchemes\"],\n      _excluded2 = [\"colorSchemes\"],\n      _excluded3 = [\"components\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { GlobalStyles } from '@mui/styled-engine';\nimport { deepmerge, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport createSpacing from '../createTheme/createSpacing';\nimport createBreakpoints from '../createTheme/createBreakpoints';\nimport cssVarsParser from './cssVarsParser';\nimport ThemeProvider from '../ThemeProvider';\nimport getInitColorSchemeScript, { DEFAULT_ATTRIBUTE, DEFAULT_MODE_STORAGE_KEY } from './getInitColorSchemeScript';\nimport useCurrentColorScheme from './useCurrentColorScheme';\nimport createGetCssVar from './createGetCssVar';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';\nexport default function createCssVarsProvider(options) {\n  var _baseTheme$breakpoint;\n\n  const {\n    theme: baseTheme = {},\n    defaultMode: desisgnSystemMode = 'light',\n    defaultColorScheme: designSystemColorScheme,\n    disableTransitionOnChange: designSystemTransitionOnChange = false,\n    enableColorScheme: designSystemEnableColorScheme = true,\n    prefix: designSystemPrefix = '',\n    shouldSkipGeneratingVar,\n    resolveTheme\n  } = options;\n  const systemSpacing = createSpacing(baseTheme.spacing);\n  const systemBreakpoints = createBreakpoints((_baseTheme$breakpoint = baseTheme.breakpoints) != null ? _baseTheme$breakpoint : {});\n\n  if (!baseTheme.colorSchemes || typeof designSystemColorScheme === 'string' && !baseTheme.colorSchemes[designSystemColorScheme] || typeof designSystemColorScheme === 'object' && !baseTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.light] || typeof designSystemColorScheme === 'object' && !baseTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.dark]) {\n    console.error(`MUI: \\`${designSystemColorScheme}\\` does not exist in \\`theme.colorSchemes\\`.`);\n  }\n\n  const ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\n\n  const useColorScheme = () => {\n    const value = React.useContext(ColorSchemeContext);\n\n    if (!value) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: \\`useColorScheme\\` must be called under <CssVarsProvider />` : _formatMuiErrorMessage(19));\n    }\n\n    return value;\n  };\n\n  function CssVarsProvider({\n    children,\n    theme: themeProp = {},\n    prefix = designSystemPrefix,\n    modeStorageKey = DEFAULT_MODE_STORAGE_KEY,\n    attribute = DEFAULT_ATTRIBUTE,\n    defaultMode = desisgnSystemMode,\n    defaultColorScheme = designSystemColorScheme,\n    disableTransitionOnChange = designSystemTransitionOnChange,\n    enableColorScheme = designSystemEnableColorScheme\n  }) {\n    const {\n      colorSchemes: baseColorSchemes = {}\n    } = baseTheme,\n          restBaseTheme = _objectWithoutPropertiesLoose(baseTheme, _excluded);\n\n    const {\n      colorSchemes: colorSchemesProp = {}\n    } = themeProp,\n          restThemeProp = _objectWithoutPropertiesLoose(themeProp, _excluded2);\n\n    const hasMounted = React.useRef(false); // eslint-disable-next-line prefer-const\n\n    let _deepmerge = deepmerge(restBaseTheme, restThemeProp),\n        {\n      components = {}\n    } = _deepmerge,\n        mergedTheme = _objectWithoutPropertiesLoose(_deepmerge, _excluded3);\n\n    const colorSchemes = deepmerge(baseColorSchemes, colorSchemesProp);\n    const allColorSchemes = Object.keys(colorSchemes);\n    const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n    const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark;\n    const {\n      mode,\n      setMode,\n      systemMode,\n      lightColorScheme,\n      darkColorScheme,\n      colorScheme,\n      setColorScheme\n    } = useCurrentColorScheme({\n      supportedColorSchemes: allColorSchemes,\n      defaultLightColorScheme,\n      defaultDarkColorScheme,\n      modeStorageKey,\n      defaultMode\n    });\n\n    const resolvedColorScheme = (() => {\n      if (!colorScheme) {\n        // This scope occurs on the server\n        if (defaultMode === 'dark') {\n          return defaultDarkColorScheme;\n        } // use light color scheme, if default mode is 'light' | 'auto'\n\n\n        return defaultLightColorScheme;\n      }\n\n      return colorScheme;\n    })();\n\n    const {\n      css: rootCss,\n      vars: rootVars,\n      parsedTheme\n    } = cssVarsParser(mergedTheme, {\n      prefix,\n      basePrefix: designSystemPrefix,\n      shouldSkipGeneratingVar\n    });\n    mergedTheme = _extends({}, parsedTheme, {\n      components,\n      colorSchemes,\n      prefix,\n      vars: rootVars,\n      spacing: themeProp.spacing ? createSpacing(themeProp.spacing) : systemSpacing,\n      breakpoints: themeProp.breakpoints ? createBreakpoints(themeProp.breakpoints) : systemBreakpoints,\n      getCssVar: createGetCssVar(prefix)\n    });\n    const styleSheet = {};\n    Object.entries(colorSchemes).forEach(([key, scheme]) => {\n      const {\n        css,\n        vars,\n        parsedTheme: parsedScheme\n      } = cssVarsParser(scheme, {\n        prefix,\n        basePrefix: designSystemPrefix,\n        shouldSkipGeneratingVar\n      });\n      mergedTheme.vars = deepmerge(mergedTheme.vars, vars);\n\n      if (key === resolvedColorScheme) {\n        mergedTheme = _extends({}, mergedTheme, parsedScheme);\n      }\n\n      const resolvedDefaultColorScheme = (() => {\n        if (typeof defaultColorScheme === 'string') {\n          return defaultColorScheme;\n        }\n\n        if (defaultMode === 'dark') {\n          return defaultColorScheme.dark;\n        }\n\n        return defaultColorScheme.light;\n      })();\n\n      if (key === resolvedDefaultColorScheme) {\n        styleSheet[':root'] = css;\n      } else {\n        styleSheet[`[${attribute}=\"${key}\"]`] = css;\n      }\n    });\n    React.useEffect(() => {\n      if (colorScheme) {\n        // attaches attribute to <html> because the css variables are attached to :root (html)\n        document.documentElement.setAttribute(attribute, colorScheme);\n      }\n    }, [colorScheme, attribute]);\n    useEnhancedEffect(() => {\n      if (!mode || !enableColorScheme) {\n        return undefined;\n      }\n\n      const priorColorScheme = document.documentElement.style.getPropertyValue('color-scheme'); // `color-scheme` tells browser to render built-in elements according to its value: `light` or `dark`\n\n      if (mode === 'system') {\n        document.documentElement.style.setProperty('color-scheme', systemMode);\n      } else {\n        document.documentElement.style.setProperty('color-scheme', mode);\n      }\n\n      return () => {\n        document.documentElement.style.setProperty('color-scheme', priorColorScheme);\n      };\n    }, [mode, systemMode, enableColorScheme]);\n    React.useEffect(() => {\n      let timer;\n\n      if (disableTransitionOnChange && hasMounted.current) {\n        // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313\n        const css = document.createElement('style');\n        css.appendChild(document.createTextNode(DISABLE_CSS_TRANSITION));\n        document.head.appendChild(css); // Force browser repaint\n\n        (() => window.getComputedStyle(document.body))();\n\n        timer = setTimeout(() => {\n          document.head.removeChild(css);\n        }, 1);\n      }\n\n      return () => {\n        clearTimeout(timer);\n      };\n    }, [colorScheme, disableTransitionOnChange]);\n    React.useEffect(() => {\n      hasMounted.current = true;\n      return () => {\n        hasMounted.current = false;\n      };\n    }, []);\n    return /*#__PURE__*/_jsxs(ColorSchemeContext.Provider, {\n      value: {\n        mode,\n        setMode,\n        lightColorScheme,\n        darkColorScheme,\n        colorScheme,\n        setColorScheme,\n        allColorSchemes\n      },\n      children: [/*#__PURE__*/_jsx(GlobalStyles, {\n        styles: {\n          ':root': rootCss\n        }\n      }), /*#__PURE__*/_jsx(GlobalStyles, {\n        styles: styleSheet\n      }), /*#__PURE__*/_jsx(ThemeProvider, {\n        theme: resolveTheme ? resolveTheme(mergedTheme) : mergedTheme,\n        children: children\n      })]\n    });\n  }\n\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\n    /**\n     * The body attribute name to attach colorScheme.\n     */\n    attribute: PropTypes.string,\n\n    /**\n     * The component tree.\n     */\n    children: PropTypes.node,\n\n    /**\n     * The initial color scheme used.\n     */\n    defaultColorScheme: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n\n    /**\n     * The initial mode used.\n     */\n    defaultMode: PropTypes.string,\n\n    /**\n     * Disable CSS transitions when switching between modes or color schemes\n     */\n    disableTransitionOnChange: PropTypes.bool,\n\n    /**\n     * Indicate to the browser which color scheme is used (light or dark) for rendering built-in UI\n     */\n    enableColorScheme: PropTypes.bool,\n\n    /**\n     * The key in the local storage used to store current color scheme.\n     */\n    modeStorageKey: PropTypes.string,\n\n    /**\n     * CSS variable prefix.\n     */\n    prefix: PropTypes.string,\n\n    /**\n     * The calculated theme object that will be passed through context.\n     */\n    theme: PropTypes.object\n  } : void 0;\n  return {\n    CssVarsProvider,\n    useColorScheme,\n    getInitColorSchemeScript\n  };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}